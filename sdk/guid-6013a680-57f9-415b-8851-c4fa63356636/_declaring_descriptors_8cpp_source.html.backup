<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/ForumNokia/DescriptorExample/src/DeclaringDescriptors.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/ForumNokia/DescriptorExample/src/DeclaringDescriptors.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright © 2008 Nokia Corporation.</span>
<a name="l00003"></a>00003 <span class="comment"> */</span>
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;e32std.h&gt;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;e32base.h&gt;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &quot;DescriptorExamples.h&quot;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &quot;StringRenderer.h&quot;</span>
<a name="l00009"></a>00009 
<a name="l00010"></a>00010 <span class="comment">// -----------------------------------------------------------------------------</span>
<a name="l00011"></a>00011 <span class="comment">// This example method is documented in header file &quot;DescriptorExamples.h&quot;</span>
<a name="l00012"></a>00012 <span class="comment">// -----------------------------------------------------------------------------</span>
<a name="l00013"></a><a class="code" href="class_c_descriptor_examples.html#a7f529caf8413e46dbb90c73f9b8839da">00013</a> <span class="keywordtype">void</span> <a class="code" href="class_c_descriptor_examples.html#a7f529caf8413e46dbb90c73f9b8839da">CDescriptorExamples::ToStack</a>()
<a name="l00014"></a>00014     {
<a name="l00015"></a>00015     TPtr output( iViewer-&gt;<a class="code" href="class_m_result_viewer.html#a30d7e86bbb78ba769648736a9ee9e62d">GetViewBuffer</a>() );
<a name="l00016"></a>00016     
<a name="l00017"></a>00017     <span class="comment">//Note, You should use the _LIT macro instead of _L</span>
<a name="l00018"></a>00018     RenderHeader( _L( <span class="stringliteral">&quot;ToStack&quot;</span> ), output );
<a name="l00019"></a>00019 
<a name="l00020"></a>00020     <span class="comment">// --------------------</span>
<a name="l00021"></a>00021     <span class="comment">// declare constant buffers to stack as automatic variable:</span>
<a name="l00022"></a>00022     <span class="comment">// length=0, maxsize=20, data=&quot;&quot;.</span>
<a name="l00023"></a>00023     <span class="comment">// Note that these automatic variables consumes stack until the</span>
<a name="l00024"></a>00024     <span class="comment">// method ends...</span>
<a name="l00025"></a>00025     TBufC&lt;20&gt; tbufc20( _L(<span class="stringliteral">&quot;Hey!&quot;</span>) );
<a name="l00026"></a>00026     RenderVariableFormatted( tbufc20.Des(), output, KRenderCharacteristics );
<a name="l00027"></a>00027 
<a name="l00028"></a>00028     <span class="comment">// --------------------</span>
<a name="l00029"></a>00029     <span class="comment">// declare modifiable buffers to stack as automatic variable:</span>
<a name="l00030"></a>00030     <span class="comment">// length=0, maxsize=20, data=&quot;&quot;</span>
<a name="l00031"></a>00031     TBuf&lt;20&gt; tbuf20;
<a name="l00032"></a>00032     RenderVariableFormatted( tbuf20, output, KRenderCharacteristics );
<a name="l00033"></a>00033 
<a name="l00034"></a>00034     <span class="comment">// --------------------</span>
<a name="l00035"></a>00035     <span class="comment">// declare a non modifying descriptor pointer that points to array in</span>
<a name="l00036"></a>00036     <span class="comment">// the middle of a temporary buffer: length=3, data=&quot;loWo&quot;</span>
<a name="l00037"></a>00037     <span class="comment">// Example is declared to own code block so automatic variables are</span>
<a name="l00038"></a>00038     <span class="comment">// deleted when block ends.</span>
<a name="l00039"></a>00039         {
<a name="l00040"></a>00040         TBuf&lt;20&gt; tmpBuf(_L(<span class="stringliteral">&quot;HelloWorld&quot;</span>));
<a name="l00041"></a>00041         <span class="keyword">const</span> TText* arrayInBuf = tmpBuf.Ptr(); <span class="comment">// point to first char in buffer</span>
<a name="l00042"></a>00042         TPtrC partOfBuffer( arrayInBuf + 3, 4 );
<a name="l00043"></a>00043         RenderVariableFormatted( tmpBuf, output,
<a name="l00044"></a>00044                                  KRenderCharacteristics );
<a name="l00045"></a>00045         RenderVariableFormatted( partOfBuffer, output,
<a name="l00046"></a>00046                                  KRenderCharacteristics );
<a name="l00047"></a>00047         } <span class="comment">// tmpBuf, arrayInBuf and partOfBuffer do no more exist in stack</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049     <span class="comment">// --------------------</span>
<a name="l00050"></a>00050     <span class="comment">// declare modifying buffer pointer pointing to memory</span>
<a name="l00051"></a>00051     <span class="comment">// in another buffer: length=4, maxSize=5, data=loWo</span>
<a name="l00052"></a>00052         {
<a name="l00053"></a>00053         <span class="comment">// tmpBuf below can&#39;t be edited with its methods but we can alter data</span>
<a name="l00054"></a>00054         <span class="comment">// through modifiable buffer pointer created few lines later</span>
<a name="l00055"></a>00055         TBufC&lt;20&gt; tmpBuf(_L(<span class="stringliteral">&quot;HelloWorld&quot;</span>));
<a name="l00056"></a>00056         <span class="comment">// Set arrayInBuf to point to first character in buffer. Has to be</span>
<a name="l00057"></a>00057         <span class="comment">// cast to non const pointer since TPtr expects such (of course)</span>
<a name="l00058"></a>00058         TText* arrayInBuf = (TText*)tmpBuf.Ptr();
<a name="l00059"></a>00059         TPtr modifyingPointer( arrayInBuf + 3, 4, 5 );
<a name="l00060"></a>00060         RenderVariableFormatted( modifyingPointer, output,
<a name="l00061"></a>00061                                  KRenderCharacteristics );
<a name="l00062"></a>00062         }
<a name="l00063"></a>00063 
<a name="l00064"></a>00064     <span class="comment">// --------------------</span>
<a name="l00065"></a>00065     <span class="comment">// declare modifying buffer pointing to a buffer descriptor - instead of</span>
<a name="l00066"></a>00066     <span class="comment">// of its buffer directrly. The only way to do a such is to call method</span>
<a name="l00067"></a>00067     <span class="comment">// Des() of non modifiable descriptors buffers TBufC and HBuf.</span>
<a name="l00068"></a>00068     <span class="comment">// contents of tmpBuf after modification: length=6, maxlength=20,</span>
<a name="l00069"></a>00069     <span class="comment">// data=&quot;HWorld&quot;</span>
<a name="l00070"></a>00070         {
<a name="l00071"></a>00071         TBufC&lt;20&gt; originalBuf( _L(<span class="stringliteral">&quot;HelloWorld&quot;</span>) );
<a name="l00072"></a>00072         TPtr tmpBufPtr = originalBuf.Des();
<a name="l00073"></a>00073         <span class="comment">// modify the original buffer. Length in both descriptors</span>
<a name="l00074"></a>00074         <span class="comment">// is updated!</span>
<a name="l00075"></a>00075         tmpBufPtr.Delete(1, 4);
<a name="l00076"></a>00076         RenderVariableFormatted( originalBuf.Des(), output,
<a name="l00077"></a>00077                                  KRenderCharacteristics );
<a name="l00078"></a>00078         }
<a name="l00079"></a>00079     iViewer-&gt;<a class="code" href="class_m_result_viewer.html#a8e10673e2504a4af6382f26794bb8004">UpdateView</a>();
<a name="l00080"></a>00080     }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="comment">// -----------------------------------------------------------------------------</span>
<a name="l00083"></a>00083 <span class="comment">// This example method is documented in header file &quot;DescriptorExamples.h&quot;</span>
<a name="l00084"></a>00084 <span class="comment">// -----------------------------------------------------------------------------</span>
<a name="l00085"></a><a class="code" href="class_c_descriptor_examples.html#abfb8e980e2e7e89daa2b46de2cb98d4a">00085</a> <span class="keywordtype">void</span> <a class="code" href="class_c_descriptor_examples.html#abfb8e980e2e7e89daa2b46de2cb98d4a">CDescriptorExamples::ToHeapL</a>()
<a name="l00086"></a>00086     {
<a name="l00087"></a>00087     TPtr output( iViewer-&gt;<a class="code" href="class_m_result_viewer.html#a30d7e86bbb78ba769648736a9ee9e62d">GetViewBuffer</a>() );
<a name="l00088"></a>00088     RenderHeader( _L( <span class="stringliteral">&quot;ToHeap&quot;</span> ), output );
<a name="l00089"></a>00089 
<a name="l00090"></a>00090     <span class="comment">// --------------------</span>
<a name="l00091"></a>00091     <span class="comment">// Allocate heap buffer with buffer size of 512. Factory</span>
<a name="l00092"></a>00092     <span class="comment">// method LC allocates the object, pushes cleanup item to</span>
<a name="l00093"></a>00093     <span class="comment">// cleanup stack and returns pointer to allocated object.</span>
<a name="l00094"></a>00094     <span class="comment">//</span>
<a name="l00095"></a>00095     HBufC *hbufc = HBufC::NewLC( 512 );
<a name="l00096"></a>00096     RenderVariableFormatted( hbufc-&gt;Des(), output, KRenderCharacteristics );
<a name="l00097"></a>00097 
<a name="l00098"></a>00098     <span class="comment">// --------------------</span>
<a name="l00099"></a>00099     <span class="comment">// Allocate TBuf descriptor with the same characteristics</span>
<a name="l00100"></a>00100     <span class="comment">// like example above. Let also the constructor to initialize</span>
<a name="l00101"></a>00101     <span class="comment">// the buffer with text.</span>
<a name="l00102"></a>00102     TBuf&lt;512&gt; *tbuf = <span class="keyword">new</span> (ELeave) TBuf&lt;512&gt;( _L(<span class="stringliteral">&quot;Hello World!&quot;</span>) );
<a name="l00103"></a>00103     <span class="comment">// Objects allocated from heap have to be deleted explicitly. Quite good</span>
<a name="l00104"></a>00104     <span class="comment">// practise is to push every item allocated from heap to cleanup stack and</span>
<a name="l00105"></a>00105     <span class="comment">// let the last line in method delete all allocated objects with one method</span>
<a name="l00106"></a>00106     <span class="comment">// call (CleanupStack::PopAndDestroy(count)). If method leaves at the middle</span>
<a name="l00107"></a>00107     <span class="comment">// of execution, the trap harness deletes automatically all objects pushed</span>
<a name="l00108"></a>00108     <span class="comment">// to cleanup stack and no memory leaks occur.</span>
<a name="l00109"></a>00109     CleanupStack::PushL( tbuf );
<a name="l00110"></a>00110     RenderVariableFormatted( *tbuf, output, KRenderCharacteristics );
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     <span class="comment">// we do no more need allocated objects, so lets remove them from cleanup</span>
<a name="l00113"></a>00113     <span class="comment">// stack with one method call.</span>
<a name="l00114"></a>00114     CleanupStack::PopAndDestroy(2); <span class="comment">// hbufc &amp; tbuf</span>
<a name="l00115"></a>00115     iViewer-&gt;<a class="code" href="class_m_result_viewer.html#a8e10673e2504a4af6382f26794bb8004">UpdateView</a>();
<a name="l00116"></a>00116     }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="comment">// -----------------------------------------------------------------------------</span>
<a name="l00119"></a>00119 <span class="comment">// This example method is documented in header file &quot;DescriptorExamples.h&quot;</span>
<a name="l00120"></a>00120 <span class="comment">// -----------------------------------------------------------------------------</span>
<a name="l00121"></a><a class="code" href="class_c_descriptor_examples.html#ac09dcbba3fcb7b55391e50c3692052d5">00121</a> <span class="keywordtype">void</span> <a class="code" href="class_c_descriptor_examples.html#ac09dcbba3fcb7b55391e50c3692052d5">CDescriptorExamples::Literals</a>()
<a name="l00122"></a>00122     {
<a name="l00123"></a>00123     TPtr output( iViewer-&gt;<a class="code" href="class_m_result_viewer.html#a30d7e86bbb78ba769648736a9ee9e62d">GetViewBuffer</a>() );
<a name="l00124"></a>00124     RenderHeader( _L( <span class="stringliteral">&quot;Literals&quot;</span> ), output );
<a name="l00125"></a>00125 
<a name="l00126"></a>00126     <span class="comment">// --------------------</span>
<a name="l00127"></a>00127     <span class="comment">// Declare variable KLit1 and assing some text to it. _LIT macro</span>
<a name="l00128"></a>00128     <span class="comment">// evaluates so that static constant variable is declared and</span>
<a name="l00129"></a>00129     <span class="comment">// initialized with given string data. Since static and constant,</span>
<a name="l00130"></a>00130     <span class="comment">// it is compiled as part of program binary.</span>
<a name="l00131"></a>00131     <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>( KLit1, <span class="stringliteral">&quot;String declared with macro _LIT&quot;</span> );
<a name="l00132"></a>00132     RenderVariableFormatted( KLit1, output, KRenderCharacteristics );
<a name="l00133"></a>00133 
<a name="l00134"></a>00134     <span class="comment">// --------------------</span>
<a name="l00135"></a>00135     <span class="comment">// Literals can be also created with macro _L. However, it isn&#39;t</span>
<a name="l00136"></a>00136     <span class="comment">// so efficient (refer book &quot;Symbian OS C++ for Mobile Phones&quot;</span>
<a name="l00137"></a>00137     <span class="comment">// for details). Using it in test code is acceptable.</span>
<a name="l00138"></a>00138     TPtrC L1 = _L( <span class="stringliteral">&quot;String declared with macro _L&quot;</span> );
<a name="l00139"></a>00139     RenderVariableFormatted( L1, output, KRenderCharacteristics );
<a name="l00140"></a>00140 
<a name="l00141"></a>00141     <span class="comment">// --------------------</span>
<a name="l00142"></a>00142     <span class="comment">// Let&#39;s declare a literal that contains euro sign (0x20AC).Since it</span>
<a name="l00143"></a>00143     <span class="comment">// doesn&#39;t exist in many 8 bit encodings , we declare it as &#39;e&#39; when</span>
<a name="l00144"></a>00144     <span class="comment">// building non-unicode build</span>
<a name="l00145"></a>00145 <span class="preprocessor">#ifdef _UNICODE</span>
<a name="l00146"></a>00146 <span class="preprocessor"></span>    <span class="comment">// note that in unicode literal the unicode chars can be declared</span>
<a name="l00147"></a>00147     <span class="comment">// by passing the unicode number of the character as hexadecimal number</span>
<a name="l00148"></a>00148     <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>( KLitEuro, <span class="stringliteral">&quot;I won 166\x20AC from lottery!&quot;</span> );
<a name="l00149"></a>00149 <span class="preprocessor">#else</span>
<a name="l00150"></a>00150 <span class="preprocessor"></span>    <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>( KLitEuro, <span class="stringliteral">&quot;I won 166e from lottery!&quot;</span> );
<a name="l00151"></a>00151 <span class="preprocessor">#endif</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span>    RenderVariableFormatted( KLitEuro, output, KRenderCharacteristics );
<a name="l00153"></a>00153     iViewer-&gt;<a class="code" href="class_m_result_viewer.html#a8e10673e2504a4af6382f26794bb8004">UpdateView</a>();
<a name="l00154"></a>00154     }
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

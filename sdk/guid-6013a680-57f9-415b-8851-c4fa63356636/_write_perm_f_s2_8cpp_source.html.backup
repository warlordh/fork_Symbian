<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/SysLibs/FileStores/WritePermFS2/WritePermFS2.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/SysLibs/FileStores/WritePermFS2/WritePermFS2.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2000-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// Example to demonstrate use of CPermanentFileStore</span>
<a name="l00015"></a>00015 <span class="comment">// The Store root stream is an example of a persistent data structure</span>
<a name="l00016"></a>00016 <span class="comment">// The internal representation is the class CItemArray</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;CommonStreamStore.h&quot;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;s32file.h&gt;</span>
<a name="l00022"></a>00022         
<a name="l00023"></a>00023                                 <span class="comment">// Create a permanent file store</span>
<a name="l00024"></a>00024                                 <span class="comment">// and initialise its stream structure</span>
<a name="l00025"></a>00025 LOCAL_C <span class="keywordtype">void</span> doMakeStoreL(<span class="keyword">const</span> TDesC&amp; aName);
<a name="l00026"></a>00026 
<a name="l00027"></a>00027                                 <span class="comment">// Use the store, preserving the stream structure</span>
<a name="l00028"></a>00028 LOCAL_C <span class="keywordtype">void</span> doUseStoreL(<span class="keyword">const</span> TDesC&amp; aName);
<a name="l00029"></a>00029 
<a name="l00030"></a>00030                                 <span class="comment">// Update the data in the store</span>
<a name="l00031"></a>00031 LOCAL_C <span class="keywordtype">void</span> doUpdateStoreL(CPersistentStore&amp; aStore);
<a name="l00032"></a>00032 
<a name="l00033"></a>00033                                 <span class="comment">// Display the store contents</span>
<a name="l00034"></a>00034 LOCAL_C <span class="keywordtype">void</span> doShowL(<span class="keyword">const</span> TDesC&amp; aHeading,CPersistentStore&amp; aStore);
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">typedef</span> TBuf&lt;100&gt; TItem;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039                                 <span class="comment">// The main object&#39;s in-memory representation</span>
<a name="l00040"></a>00040 <span class="keyword">class </span>CItemArray : <span class="keyword">public</span> CBase
<a name="l00041"></a>00041         {
<a name="l00042"></a>00042 <span class="keyword">public</span>:
<a name="l00043"></a>00043         <span class="keyword">static</span> TStreamId CreateL(CStreamStore&amp; aStore);
<a name="l00044"></a>00044                 <span class="comment">//</span>
<a name="l00045"></a>00045         ~CItemArray();
<a name="l00046"></a>00046         <span class="keyword">static</span> CItemArray* NewLC(CStreamStore&amp; aStore,TStreamId anId);
<a name="l00047"></a>00047         <span class="keywordtype">void</span> RestoreL();
<a name="l00048"></a>00048         <span class="keywordtype">void</span> StoreL() <span class="keyword">const</span>;
<a name="l00049"></a>00049         <span class="keywordtype">void</span> ExternalizeL(RWriteStream&amp; aStream) <span class="keyword">const</span>;
<a name="l00050"></a>00050                 <span class="comment">//</span>
<a name="l00051"></a>00051         <span class="keywordtype">void</span> AddItemL(<span class="keyword">const</span> TItem&amp; anItem);
<a name="l00052"></a>00052         <span class="keywordtype">void</span> RemoveItemL(TInt anIndex);
<a name="l00053"></a>00053         TInt Count() <span class="keyword">const</span>;
<a name="l00054"></a>00054         <span class="keywordtype">void</span> GetItemL(TItem&amp; anItem,TInt anIndex) <span class="keyword">const</span>;
<a name="l00055"></a>00055 <span class="keyword">protected</span>:
<a name="l00056"></a>00056         CItemArray(CStreamStore&amp; aStore);
<a name="l00057"></a>00057         <span class="keywordtype">void</span> ConstructL();
<a name="l00058"></a>00058         <span class="keywordtype">void</span> InternalizeL(RReadStream&amp; aStream);
<a name="l00059"></a>00059 <span class="keyword">private</span>:
<a name="l00060"></a>00060         CStreamStore&amp; iStore;
<a name="l00061"></a>00061         TStreamId iMyId;
<a name="l00062"></a>00062         CArrayFixFlat&lt;TStreamId&gt;* iArray;
<a name="l00063"></a>00063         };
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="comment">// The file name, extension and path for the file store</span>
<a name="l00067"></a>00067 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFullNameOfFileStore,<span class="stringliteral">&quot;\\epoc32ex\\data\\WritePermFS2.dat&quot;</span>);
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="comment">//  Do the example</span>
<a name="l00071"></a>00071 LOCAL_C <span class="keywordtype">void</span> doExampleL()
<a name="l00072"></a>00072     {
<a name="l00073"></a>00073                             <span class="comment">// make sure directory exists</span>
<a name="l00074"></a>00074         fsSession.MkDirAll(KFullNameOfFileStore);
<a name="l00075"></a>00075         doMakeStoreL(KFullNameOfFileStore);
<a name="l00076"></a>00076         doUseStoreL(KFullNameOfFileStore);
<a name="l00077"></a>00077         }
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 LOCAL_C <span class="keywordtype">void</span> doMakeStoreL(<span class="keyword">const</span> TDesC&amp; aName)
<a name="l00081"></a>00081         {
<a name="l00082"></a>00082         TParse  filestorename;
<a name="l00083"></a>00083         fsSession.Parse(aName,filestorename);
<a name="l00084"></a>00084                                 <span class="comment">// construct file store object - the file to contain the</span>
<a name="l00085"></a>00085                                 <span class="comment">// the store replaces any existing file of the same name.</span>
<a name="l00086"></a>00086         CFileStore* store = CPermanentFileStore::ReplaceLC(fsSession,filestorename.FullName(),EFileRead|EFileWrite);
<a name="l00087"></a>00087                                 <span class="comment">// Easy way to set the layout type</span>
<a name="l00088"></a>00088     store-&gt;SetTypeL(store-&gt;Layout());
<a name="l00089"></a>00089                 
<a name="l00090"></a>00090                                 <span class="comment">// create the required stream for CItemArray</span>
<a name="l00091"></a>00091         TStreamId <span class="keywordtype">id</span>=CItemArray::CreateL(*store);
<a name="l00092"></a>00092 
<a name="l00093"></a>00093                                 <span class="comment">// make it the root</span>
<a name="l00094"></a>00094         store-&gt;SetRootL(<span class="keywordtype">id</span>);
<a name="l00095"></a>00095                         
<a name="l00096"></a>00096                                 <span class="comment">// Commit changes to the store</span>
<a name="l00097"></a>00097         store-&gt;CommitL();
<a name="l00098"></a>00098 
<a name="l00099"></a>00099                                 <span class="comment">// Show contents of the store</span>
<a name="l00100"></a>00100         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtStoreContent,<span class="stringliteral">&quot;Store content ...&quot;</span>);
<a name="l00101"></a>00101         doShowL(KTxtStoreContent,*store);
<a name="l00102"></a>00102 
<a name="l00103"></a>00103                                 <span class="comment">// Cleanup the store</span>
<a name="l00104"></a>00104         CleanupStack::PopAndDestroy();
<a name="l00105"></a>00105         }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 LOCAL_C <span class="keywordtype">void</span> doUseStoreL(<span class="keyword">const</span> TDesC&amp; aName)
<a name="l00109"></a>00109         {
<a name="l00110"></a>00110         TParse  filestorename;
<a name="l00111"></a>00111         fsSession.Parse(aName,filestorename);
<a name="l00112"></a>00112                                 <span class="comment">// construct file store object - specifying the file</span>
<a name="l00113"></a>00113                                 <span class="comment">// containing the store.</span>
<a name="l00114"></a>00114                                 <span class="comment">// Do not need to specify the file store type, this is</span>
<a name="l00115"></a>00115                                 <span class="comment">// specified by the file itself</span>
<a name="l00116"></a>00116         CFileStore* store = CFileStore::OpenL(fsSession,filestorename.FullName(),EFileRead|EFileWrite);
<a name="l00117"></a>00117 
<a name="l00118"></a>00118                                 <span class="comment">// The standard form for using permanent file stores:</span>
<a name="l00119"></a>00119                                 <span class="comment">// 1. The store object is not owned by the updating code</span>
<a name="l00120"></a>00120                                 <span class="comment">// 2  Failure at any point during update, including the</span>
<a name="l00121"></a>00121                                 <span class="comment">//    final commit, should result in Revert() being called</span>
<a name="l00122"></a>00122                                 <span class="comment">//    on the store (before destruction).</span>
<a name="l00123"></a>00123 
<a name="l00124"></a>00124         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtErrorOccurred,<span class="stringliteral">&quot;\n** Error %d occured during store update&quot;</span>);
<a name="l00125"></a>00125 
<a name="l00126"></a>00126         TRAPD(error,doUpdateStoreL(*store));
<a name="l00127"></a>00127         <span class="keywordflow">if</span> (error!=KErrNone)
<a name="l00128"></a>00128                 {
<a name="l00129"></a>00129                 store-&gt;Revert();
<a name="l00130"></a>00130                 console-&gt;Printf(KTxtErrorOccurred);
<a name="l00131"></a>00131                 }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133                                 <span class="comment">// the store is not on the cleanup stack</span>
<a name="l00134"></a>00134         <span class="keyword">delete</span> store;
<a name="l00135"></a>00135         }
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 LOCAL_C <span class="keywordtype">void</span> doUpdateStoreL(CPersistentStore&amp; aStore)
<a name="l00139"></a>00139         {
<a name="l00140"></a>00140                                 <span class="comment">// get the root stream into memory</span>
<a name="l00141"></a>00141         CItemArray* array=CItemArray::NewLC(aStore,aStore.Root());
<a name="l00142"></a>00142 
<a name="l00143"></a>00143                                 <span class="comment">// Add some items</span>
<a name="l00144"></a>00144         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtHello,<span class="stringliteral">&quot;hello&quot;</span>);
<a name="l00145"></a>00145         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtWorld,<span class="stringliteral">&quot; world!&quot;</span>);
<a name="l00146"></a>00146 
<a name="l00147"></a>00147         TItem item;
<a name="l00148"></a>00148         item = KTxtHello;
<a name="l00149"></a>00149         array-&gt;AddItemL(item);
<a name="l00150"></a>00150         item = KTxtWorld;
<a name="l00151"></a>00151         array-&gt;AddItemL(item);
<a name="l00152"></a>00152                                 <span class="comment">// Re-write the root stream with new data</span>
<a name="l00153"></a>00153         array-&gt;StoreL();
<a name="l00154"></a>00154                                 <span class="comment">// commit all changes</span>
<a name="l00155"></a>00155         aStore.CommitL();
<a name="l00156"></a>00156 
<a name="l00157"></a>00157         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtAfterAdding,<span class="stringliteral">&quot;After adding...&quot;</span>);
<a name="l00158"></a>00158         doShowL(KTxtAfterAdding,aStore);
<a name="l00159"></a>00159 
<a name="l00160"></a>00160                                 <span class="comment">// remove an item</span>
<a name="l00161"></a>00161         array-&gt;RemoveItemL(1);          <span class="comment">// &quot; world!&quot;</span>
<a name="l00162"></a>00162                                 <span class="comment">// Re-write the root stream with new data</span>
<a name="l00163"></a>00163         array-&gt;StoreL();
<a name="l00164"></a>00164                                 <span class="comment">// commit all changes</span>
<a name="l00165"></a>00165         aStore.CommitL();
<a name="l00166"></a>00166 
<a name="l00167"></a>00167         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtAfterRemoving,<span class="stringliteral">&quot;After removing...&quot;</span>);
<a name="l00168"></a>00168         doShowL(KTxtAfterRemoving,aStore);
<a name="l00169"></a>00169 
<a name="l00170"></a>00170                                 <span class="comment">// Add an item</span>
<a name="l00171"></a>00171         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtCapWorld,<span class="stringliteral">&quot; WORLD!&quot;</span>);
<a name="l00172"></a>00172         item= KTxtCapWorld;
<a name="l00173"></a>00173         array-&gt;AddItemL(item);
<a name="l00174"></a>00174                                 <span class="comment">// Re-write the root stream with new data</span>
<a name="l00175"></a>00175         array-&gt;StoreL();
<a name="l00176"></a>00176                                 <span class="comment">// Discard all changes since last store commit</span>
<a name="l00177"></a>00177         aStore.Revert();
<a name="l00178"></a>00178 
<a name="l00179"></a>00179         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtAfterRevert,<span class="stringliteral">&quot;After revert...&quot;</span>);
<a name="l00180"></a>00180         doShowL(KTxtAfterRevert,aStore);
<a name="l00181"></a>00181 
<a name="l00182"></a>00182                                 <span class="comment">// array and aStore are not in snych after revert...</span>
<a name="l00183"></a>00183                                 <span class="comment">// restore in-memory version to match store version</span>
<a name="l00184"></a>00184         array-&gt;RestoreL();
<a name="l00185"></a>00185 
<a name="l00186"></a>00186                                         <span class="comment">// Add the item again</span>
<a name="l00187"></a>00187         array-&gt;AddItemL(item);
<a name="l00188"></a>00188                                 <span class="comment">// Re-write the root stream with new data</span>
<a name="l00189"></a>00189         array-&gt;StoreL();
<a name="l00190"></a>00190                                 <span class="comment">// commit all changes</span>
<a name="l00191"></a>00191         aStore.CommitL();
<a name="l00192"></a>00192 
<a name="l00193"></a>00193         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtAfterCommit,<span class="stringliteral">&quot;After commit...&quot;</span>);
<a name="l00194"></a>00194         doShowL(KTxtAfterCommit,aStore);
<a name="l00195"></a>00195 
<a name="l00196"></a>00196                                 <span class="comment">// cleanup array</span>
<a name="l00197"></a>00197         CleanupStack::PopAndDestroy();
<a name="l00198"></a>00198         }
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtNewLine,<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00201"></a>00201 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatType1,<span class="stringliteral">&quot;\n%d item(s):&quot;</span>);
<a name="l00202"></a>00202 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatType2,<span class="stringliteral">&quot;\n  %S&quot;</span>);
<a name="l00203"></a>00203 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatType3,<span class="stringliteral">&quot;\n[any key to continue]\n&quot;</span>);
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 LOCAL_C <span class="keywordtype">void</span> doShowL(<span class="keyword">const</span> TDesC&amp; aHeading,CPersistentStore&amp; aStore)
<a name="l00207"></a>00207         {
<a name="l00208"></a>00208                                 <span class="comment">// Get an in-memory representation of the root stream</span>
<a name="l00209"></a>00209         CItemArray* array=CItemArray::NewLC(aStore,aStore.Root());
<a name="l00210"></a>00210 
<a name="l00211"></a>00211         console-&gt;Printf(KTxtNewLine);
<a name="l00212"></a>00212         console-&gt;Printf(aHeading);
<a name="l00213"></a>00213         console-&gt;Printf(KFormatType1,array-&gt;Count());
<a name="l00214"></a>00214         <span class="keywordflow">for</span> (TInt ii=0;ii&lt;array-&gt;Count();++ii)
<a name="l00215"></a>00215                 {
<a name="l00216"></a>00216                                 <span class="comment">// for each item in the array</span>
<a name="l00217"></a>00217                                 <span class="comment">//    get the item</span>
<a name="l00218"></a>00218                 TItem item;
<a name="l00219"></a>00219                 array-&gt;GetItemL(item,ii);
<a name="l00220"></a>00220                                 <span class="comment">//    display the data</span>
<a name="l00221"></a>00221                 console-&gt;Printf(KFormatType2,&amp;item);
<a name="l00222"></a>00222                 }
<a name="l00223"></a>00223                                 <span class="comment">// cleanup the array</span>
<a name="l00224"></a>00224         CleanupStack::PopAndDestroy();
<a name="l00225"></a>00225 
<a name="l00226"></a>00226         console-&gt;Printf(KFormatType3);
<a name="l00227"></a>00227         console-&gt;Getch();
<a name="l00228"></a>00228         }
<a name="l00229"></a>00229 
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 <span class="comment">//***************************************************************</span>
<a name="l00232"></a>00232 <span class="comment">//***************************************************************</span>
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 CItemArray::~CItemArray()
<a name="l00235"></a>00235         {
<a name="l00236"></a>00236         <span class="keyword">delete</span> iArray;
<a name="l00237"></a>00237         }
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 CItemArray::CItemArray(CStreamStore&amp; aStore)
<a name="l00240"></a>00240         : iStore(aStore)
<a name="l00241"></a>00241         {}
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 TStreamId CItemArray::CreateL(CStreamStore&amp; aStore)
<a name="l00244"></a>00244 <span class="comment">// create the stream representation of the class</span>
<a name="l00245"></a>00245         {
<a name="l00246"></a>00246                                 <span class="comment">// use a temporary CItemArray</span>
<a name="l00247"></a>00247         CItemArray* <span class="keyword">self</span>=<span class="keyword">new</span>(ELeave) CItemArray(aStore);
<a name="l00248"></a>00248         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00249"></a>00249                                 <span class="comment">// construct object</span>
<a name="l00250"></a>00250         <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00251"></a>00251                                 <span class="comment">// create new stream</span>
<a name="l00252"></a>00252         RStoreWriteStream outstream;
<a name="l00253"></a>00253         TStreamId <span class="keywordtype">id</span>=outstream.CreateLC(aStore);
<a name="l00254"></a>00254                                 <span class="comment">// write  external rep</span>
<a name="l00255"></a>00255         <span class="keyword">self</span>-&gt;ExternalizeL(outstream);
<a name="l00256"></a>00256                                 <span class="comment">// commit stream</span>
<a name="l00257"></a>00257         outstream.CommitL();
<a name="l00258"></a>00258                                 <span class="comment">// cleanup stream and temporary self</span>
<a name="l00259"></a>00259         CleanupStack::PopAndDestroy(2);
<a name="l00260"></a>00260         <span class="keywordflow">return</span> id;
<a name="l00261"></a>00261         }
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 CItemArray* CItemArray::NewLC(CStreamStore&amp; aStore,TStreamId anId)
<a name="l00264"></a>00264 <span class="comment">// construct a CItemArray from persistent storage</span>
<a name="l00265"></a>00265         {
<a name="l00266"></a>00266         CItemArray* <span class="keyword">self</span>=<span class="keyword">new</span>(ELeave) CItemArray(aStore);
<a name="l00267"></a>00267         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00268"></a>00268                                 <span class="comment">// construct object</span>
<a name="l00269"></a>00269         <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00270"></a>00270                                 <span class="comment">// set the stream id for StoreL/RestoreL</span>
<a name="l00271"></a>00271         <span class="keyword">self</span>-&gt;iMyId=anId;
<a name="l00272"></a>00272                                 <span class="comment">// restore the internal rep.</span>
<a name="l00273"></a>00273         <span class="keyword">self</span>-&gt;RestoreL();
<a name="l00274"></a>00274         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00275"></a>00275         }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 <span class="keywordtype">void</span> CItemArray::StoreL() const
<a name="l00278"></a>00278 <span class="comment">// replace external rep. with internal one</span>
<a name="l00279"></a>00279         {
<a name="l00280"></a>00280         RStoreWriteStream outstream;
<a name="l00281"></a>00281         outstream.ReplaceLC(iStore,iMyId);
<a name="l00282"></a>00282         ExternalizeL(outstream);
<a name="l00283"></a>00283         outstream.CommitL();
<a name="l00284"></a>00284         CleanupStack::PopAndDestroy();
<a name="l00285"></a>00285         }
<a name="l00286"></a>00286 
<a name="l00287"></a>00287 <span class="keywordtype">void</span> CItemArray::RestoreL()
<a name="l00288"></a>00288 <span class="comment">// replace internal rep with external one</span>
<a name="l00289"></a>00289         {
<a name="l00290"></a>00290         iArray-&gt;Reset();
<a name="l00291"></a>00291         RStoreReadStream instream;
<a name="l00292"></a>00292         instream.OpenLC(iStore,iMyId);
<a name="l00293"></a>00293         InternalizeL(instream);
<a name="l00294"></a>00294         CleanupStack::PopAndDestroy();
<a name="l00295"></a>00295         }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 <span class="keywordtype">void</span> CItemArray::AddItemL(<span class="keyword">const</span> TItem&amp; anItem)
<a name="l00298"></a>00298 <span class="comment">// add item to the collection</span>
<a name="l00299"></a>00299         {
<a name="l00300"></a>00300                                 <span class="comment">// write external rep of item</span>
<a name="l00301"></a>00301         RStoreWriteStream outstream;
<a name="l00302"></a>00302         TStreamId <span class="keywordtype">id</span>=outstream.CreateLC(iStore);
<a name="l00303"></a>00303         outstream&lt;&lt;anItem;
<a name="l00304"></a>00304         outstream.CommitL();
<a name="l00305"></a>00305         CleanupStack::PopAndDestroy();
<a name="l00306"></a>00306                                 <span class="comment">// add new stream id to the internal array</span>
<a name="l00307"></a>00307         iArray-&gt;AppendL(<span class="keywordtype">id</span>);
<a name="l00308"></a>00308         }
<a name="l00309"></a>00309 
<a name="l00310"></a>00310 <span class="keywordtype">void</span> CItemArray::RemoveItemL(TInt anIndex)
<a name="l00311"></a>00311 <span class="comment">// remove an item from the collection</span>
<a name="l00312"></a>00312         {
<a name="l00313"></a>00313                                 <span class="comment">// remove the stream from the store</span>
<a name="l00314"></a>00314         iStore.DeleteL((*iArray)[anIndex]);
<a name="l00315"></a>00315                                 <span class="comment">// remove the entry from the internal array</span>
<a name="l00316"></a>00316         iArray-&gt;Delete(anIndex);
<a name="l00317"></a>00317         }
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 TInt CItemArray::Count()<span class="keyword"> const</span>
<a name="l00320"></a>00320 <span class="keyword">        </span>{
<a name="l00321"></a>00321         <span class="keywordflow">return</span> iArray-&gt;Count();
<a name="l00322"></a>00322         }
<a name="l00323"></a>00323 
<a name="l00324"></a>00324 <span class="keywordtype">void</span> CItemArray::GetItemL(TItem&amp; anItem,TInt anIndex) <span class="keyword">const</span>
<a name="l00325"></a>00325 <span class="comment">// retrieve an item from the store</span>
<a name="l00326"></a>00326         {
<a name="l00327"></a>00327         RStoreReadStream instream;
<a name="l00328"></a>00328         instream.OpenLC(iStore,(*iArray)[anIndex]);
<a name="l00329"></a>00329         instream&gt;&gt;anItem;
<a name="l00330"></a>00330         CleanupStack::PopAndDestroy();
<a name="l00331"></a>00331         }
<a name="l00332"></a>00332 
<a name="l00333"></a>00333 <span class="keywordtype">void</span> CItemArray::ConstructL()
<a name="l00334"></a>00334         {
<a name="l00335"></a>00335         iArray=<span class="keyword">new</span>(ELeave) CArrayFixFlat&lt;TStreamId&gt;(8);
<a name="l00336"></a>00336         }
<a name="l00337"></a>00337 
<a name="l00338"></a>00338 <span class="keywordtype">void</span> CItemArray::ExternalizeL(RWriteStream&amp; aStream)<span class="keyword"> const</span>
<a name="l00339"></a>00339 <span class="keyword">        </span>{
<a name="l00340"></a>00340                                 <span class="comment">// stream out the array</span>
<a name="l00341"></a>00341         aStream&lt;&lt;*iArray;
<a name="l00342"></a>00342         }
<a name="l00343"></a>00343 
<a name="l00344"></a>00344 <span class="keywordtype">void</span> CItemArray::InternalizeL(RReadStream&amp; aStream)
<a name="l00345"></a>00345         {
<a name="l00346"></a>00346                                 <span class="comment">// stream in the array</span>
<a name="l00347"></a>00347         aStream&gt;&gt;*iArray;
<a name="l00348"></a>00348         }
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

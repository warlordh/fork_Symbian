<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/AppFramework/txtshell/txtexamp.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/AppFramework/txtshell/txtexamp.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2000-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#ifndef __TXTEXAMP_H</span>
<a name="l00017"></a>00017 <span class="preprocessor"></span><span class="preprocessor">#define __TXTEXAMP_H</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;coemain.h&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;coecntrl.h&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;s32file.h&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;txtglobl.h&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;frmtview.h&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;txtfmlyr.h&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="comment">//</span>
<a name="l00027"></a>00027 <span class="comment">// class MGraphicsExampleObserver</span>
<a name="l00028"></a>00028 <span class="comment">//</span>
<a name="l00029"></a>00029 
<a name="l00030"></a><a class="code" href="class_m_graphics_example_observer.html">00030</a> <span class="keyword">class </span><a class="code" href="class_m_graphics_example_observer.html">MGraphicsExampleObserver</a>
<a name="l00031"></a>00031         <span class="comment">// Defines an interface that controls can call to inform the shell </span>
<a name="l00032"></a>00032         <span class="comment">// that they have finished, or that the status message display needs </span>
<a name="l00033"></a>00033         <span class="comment">// updating. It is implemented by CExampleShellContainer        </span>
<a name="l00034"></a>00034         {
<a name="l00035"></a>00035 <span class="keyword">public</span>:
<a name="l00036"></a>00036         <span class="comment">// Notify user that example has finished</span>
<a name="l00037"></a>00037         <span class="keyword">virtual</span> <span class="keywordtype">void</span> NotifyGraphicExampleFinished()=0;
<a name="l00038"></a>00038         <span class="comment">// Notify user of the current status of the example</span>
<a name="l00039"></a>00039         <span class="keyword">virtual</span> <span class="keywordtype">void</span> NotifyStatus(<span class="keyword">const</span> TDesC&amp; aMessage)=0;
<a name="l00040"></a>00040         };
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="comment">//</span>
<a name="l00043"></a>00043 <span class="comment">// class CGraphicExampleControl</span>
<a name="l00044"></a>00044 <span class="comment">//</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="comment">/*</span>
<a name="l00047"></a>00047 <span class="comment">        Usage</span>
<a name="l00048"></a>00048 <span class="comment"></span>
<a name="l00049"></a>00049 <span class="comment">                This class is used as a base class for graphics and text </span>
<a name="l00050"></a>00050 <span class="comment">                examples. It uses CONE&#39;s facilities to provide an initialized </span>
<a name="l00051"></a>00051 <span class="comment">                graphics environment.</span>
<a name="l00052"></a>00052 <span class="comment"></span>
<a name="l00053"></a>00053 <span class="comment">                It creates a 600x200 window in which drawing can be done.</span>
<a name="l00054"></a>00054 <span class="comment"></span>
<a name="l00055"></a>00055 <span class="comment">                It supports multiple phases, so different drawings can be </span>
<a name="l00056"></a>00056 <span class="comment">                done from one phase to another.  Tap the spacebar or click the</span>
<a name="l00057"></a>00057 <span class="comment">                mouse (anywhere) to advance a phase.</span>
<a name="l00058"></a>00058 <span class="comment"></span>
<a name="l00059"></a>00059 <span class="comment">                Quit the program by pressing the exit button.</span>
<a name="l00060"></a>00060 <span class="comment"></span>
<a name="l00061"></a>00061 <span class="comment">        Writing derived classes</span>
<a name="l00062"></a>00062 <span class="comment"></span>
<a name="l00063"></a>00063 <span class="comment">                A minimal derived class should have a Draw() function</span>
<a name="l00064"></a>00064 <span class="comment">                which puts a drawing onto the screen.</span>
<a name="l00065"></a>00065 <span class="comment"></span>
<a name="l00066"></a>00066 <span class="comment">                If you are using multiple phases, code a constructor which</span>
<a name="l00067"></a>00067 <span class="comment">                calls SetMaxPhases() specifying the number of phases.  Have</span>
<a name="l00068"></a>00068 <span class="comment">                Draw() honour the phase number, available using Phase().</span>
<a name="l00069"></a>00069 <span class="comment">*/</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="preprocessor">#pragma warning(disable : 4100)</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span>                <span class="comment">// disable &quot;parameter not used&quot; warning on HandleKey()</span>
<a name="l00073"></a>00073 
<a name="l00074"></a><a class="code" href="class_c_graphic_example_control.html">00074</a> <span class="keyword">class </span><a class="code" href="class_c_graphic_example_control.html">CGraphicExampleControl</a> : <span class="keyword">public</span> CCoeControl
<a name="l00075"></a>00075         {
<a name="l00076"></a>00076 <span class="keyword">public</span>:
<a name="l00077"></a>00077         <span class="comment">// construct/destruct</span>
<a name="l00078"></a>00078         <span class="keywordtype">void</span> ConstructL(<span class="keyword">const</span> TRect&amp; aRect, <a class="code" href="class_m_graphics_example_observer.html">MGraphicsExampleObserver</a>* aObserver, <span class="keyword">const</span> CCoeControl&amp; aParent);
<a name="l00079"></a>00079                 <span class="comment">// second-phase construction</span>
<a name="l00080"></a>00080         ~<a class="code" href="class_c_graphic_example_control.html">CGraphicExampleControl</a>();
<a name="l00081"></a>00081         <span class="comment">// public so container can offer keys</span>
<a name="l00082"></a>00082         TKeyResponse OfferKeyEventL(<span class="keyword">const</span> TKeyEvent&amp; aKeyEvent,TEventCode aType);
<a name="l00083"></a>00083                 <span class="comment">// intercepts space; offers other keys to derived classes</span>
<a name="l00084"></a>00084 <span class="keyword">protected</span>:
<a name="l00085"></a>00085         <span class="comment">// derived classes must provide the next 2 functions</span>
<a name="l00086"></a>00086         <span class="keyword">virtual</span> <span class="keywordtype">void</span> UpdateModelL() =0; <span class="comment">// empty update model function</span>
<a name="l00087"></a>00087         <span class="keyword">virtual</span> <span class="keywordtype">void</span> Draw(<span class="keyword">const</span> TRect&amp; <span class="comment">/* aRect */</span>)<span class="keyword"> const </span>{}; <span class="comment">// empty draw function</span>
<a name="l00088"></a>00088         <span class="comment">// use Phase() in Draw() to tell what phase we&#39;re in</span>
<a name="l00089"></a>00089         TInt Phase()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> iPhase; }; <span class="comment">// get phase number</span>
<a name="l00090"></a>00090         <span class="keywordtype">void</span> SetMaxPhases(TInt aMaxPhases) { iMaxPhases=aMaxPhases; };
<a name="l00091"></a>00091                         <span class="comment">// use this from derived-class constructor to set number of phases</span>
<a name="l00092"></a>00092         CFont* iMessageFont; <span class="comment">// font for messages</span>
<a name="l00093"></a>00093 <span class="keyword">private</span>:
<a name="l00094"></a>00094         <span class="comment">// functions provided for CCoeControl protocol</span>
<a name="l00095"></a>00095         <span class="keywordtype">void</span> HandlePointerEventL(<span class="keyword">const</span> TPointerEvent&amp; aPointerEvent);
<a name="l00096"></a>00096                 <span class="comment">// advances phase on pointer-down</span>
<a name="l00097"></a>00097         <span class="keywordtype">void</span> Quit(); <span class="comment">// does termination</span>
<a name="l00098"></a>00098         <span class="keywordtype">void</span> NextPhaseL(); <span class="comment">// advances phase: quits if all phases done</span>
<a name="l00099"></a>00099         <span class="comment">// phase control for graphics examples</span>
<a name="l00100"></a>00100         TInt iPhase; <span class="comment">// phase number</span>
<a name="l00101"></a>00101         TInt iMaxPhases; <span class="comment">// maximum phases</span>
<a name="l00102"></a>00102 <span class="keyword">protected</span>:
<a name="l00103"></a>00103         <a class="code" href="class_m_graphics_example_observer.html">MGraphicsExampleObserver</a>* iFormObserver;
<a name="l00104"></a>00104         TBool iUpdateModelDoesRedraw; <span class="comment">// whether UpdateModelL() does a redraw for us</span>
<a name="l00105"></a>00105         };
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 <span class="comment">// sundry derived classes</span>
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 <span class="keyword">class </span>CGlobalText;
<a name="l00110"></a>00110 <span class="keyword">class </span>CRichText;
<a name="l00111"></a>00111 <span class="keyword">class </span>CParaFormatLayer;
<a name="l00112"></a>00112 <span class="keyword">class </span>CCharFormatLayer;
<a name="l00113"></a>00113 <span class="keyword">class </span>CTextLayout;
<a name="l00114"></a>00114 <span class="keyword">class </span>CTextView;
<a name="l00115"></a>00115 <span class="keyword">class </span>CStyleList;
<a name="l00116"></a>00116 <span class="keyword">class </span>CParagraphStyle;
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00119"></a><a class="code" href="class_c_global_control.html">00119</a> <span class="keyword">class </span><a class="code" href="class_c_global_control.html">CGlobalControl</a> : <span class="keyword">public</span> <a class="code" href="class_c_graphic_example_control.html">CGraphicExampleControl</a>
<a name="l00120"></a>00120         {
<a name="l00121"></a>00121         <span class="comment">// Demonstrates the use of global text</span>
<a name="l00122"></a>00122 <span class="keyword">public</span>:
<a name="l00123"></a>00123         <a class="code" href="class_c_global_control.html">CGlobalControl</a>() { SetMaxPhases(16); };
<a name="l00124"></a>00124         <span class="keywordtype">void</span> UpdateModelL();
<a name="l00125"></a>00125         <span class="keywordtype">void</span> Draw(<span class="keyword">const</span> TRect&amp; aRect) <span class="keyword">const</span>;
<a name="l00126"></a>00126         ~<a class="code" href="class_c_global_control.html">CGlobalControl</a>();
<a name="l00127"></a>00127 <span class="keyword">private</span>:
<a name="l00128"></a>00128         CGlobalText* iGlobalText; <span class="comment">// global text object</span>
<a name="l00129"></a>00129         CParaFormatLayer* iParaFormatLayer;
<a name="l00130"></a>00130         CCharFormatLayer* iCharFormatLayer;
<a name="l00131"></a>00131         TStreamId iStreamId; <span class="comment">// required when storing and restoring global text</span>
<a name="l00132"></a>00132         <span class="comment">// text layout and view stuff</span>
<a name="l00133"></a>00133         CTextLayout* iLayout; <span class="comment">// text layout</span>
<a name="l00134"></a>00134         CTextView* iTextView; <span class="comment">// text view</span>
<a name="l00135"></a>00135         TRect iViewRect; <span class="comment">// rectangle through which to view text</span>
<a name="l00136"></a>00136         TCharFormat iCharFormat;
<a name="l00137"></a>00137         TCharFormatMask iCharFormatMask;
<a name="l00138"></a>00138         };
<a name="l00139"></a>00139 
<a name="l00140"></a><a class="code" href="class_c_rich_control.html">00140</a> <span class="keyword">class </span><a class="code" href="class_c_rich_control.html">CRichControl</a> : <span class="keyword">public</span> <a class="code" href="class_c_graphic_example_control.html">CGraphicExampleControl</a>
<a name="l00141"></a>00141         {
<a name="l00142"></a>00142         <span class="comment">// Demonstrates the use of rich text</span>
<a name="l00143"></a>00143 <span class="keyword">public</span>:
<a name="l00144"></a>00144         <a class="code" href="class_c_rich_control.html">CRichControl</a>() { SetMaxPhases(14);}; 
<a name="l00145"></a>00145         ~<a class="code" href="class_c_rich_control.html">CRichControl</a>(); <span class="comment">// destructor</span>
<a name="l00146"></a>00146         <span class="keywordtype">void</span> UpdateModelL();
<a name="l00147"></a>00147         <span class="keywordtype">void</span> Draw(<span class="keyword">const</span> TRect&amp; aRect) <span class="keyword">const</span>;
<a name="l00148"></a>00148 <span class="keyword">private</span>:
<a name="l00149"></a>00149         CRichText* iRichText; <span class="comment">// global text object</span>
<a name="l00150"></a>00150         CParaFormatLayer* iParaFormatLayer;
<a name="l00151"></a>00151         CCharFormatLayer* iCharFormatLayer;
<a name="l00152"></a>00152         TStreamId iStreamId; <span class="comment">// required when storing and restoring global text</span>
<a name="l00153"></a>00153         <span class="comment">// text layout and view stuff</span>
<a name="l00154"></a>00154         CTextLayout* iLayout; <span class="comment">// text layout</span>
<a name="l00155"></a>00155         CTextView* iTextView; <span class="comment">// text view</span>
<a name="l00156"></a>00156         TRect iViewRect; <span class="comment">// rectangle through which to view text</span>
<a name="l00157"></a>00157         TCharFormat iCharFormat;
<a name="l00158"></a>00158         TCharFormatMask iCharFormatMask;
<a name="l00159"></a>00159         };
<a name="l00160"></a>00160 
<a name="l00161"></a><a class="code" href="class_c_style_control.html">00161</a> <span class="keyword">class </span><a class="code" href="class_c_style_control.html">CStyleControl</a> : <span class="keyword">public</span> <a class="code" href="class_c_graphic_example_control.html">CGraphicExampleControl</a>
<a name="l00162"></a>00162         {
<a name="l00163"></a>00163         <span class="comment">// Demonstrates the use of styles in rich text</span>
<a name="l00164"></a>00164 <span class="keyword">public</span>:
<a name="l00165"></a>00165         <a class="code" href="class_c_style_control.html">CStyleControl</a>() { SetMaxPhases(9);}; 
<a name="l00166"></a>00166         ~<a class="code" href="class_c_style_control.html">CStyleControl</a>(); <span class="comment">// destructor</span>
<a name="l00167"></a>00167         <span class="keywordtype">void</span> UpdateModelL();
<a name="l00168"></a>00168         <span class="keywordtype">void</span> Draw(<span class="keyword">const</span> TRect&amp; aRect) <span class="keyword">const</span>;
<a name="l00169"></a>00169 <span class="keyword">private</span>:
<a name="l00170"></a>00170         <span class="keywordtype">void</span> CreateNormalL(); <span class="comment">// Create Normal style (the global layers) </span>
<a name="l00171"></a>00171         <span class="keywordtype">void</span> CreateStylesL(); <span class="comment">// Create some paragraph styles</span>
<a name="l00172"></a>00172 <span class="keyword">private</span>:
<a name="l00173"></a>00173         CRichText* iRichText; <span class="comment">// rich text object</span>
<a name="l00174"></a>00174         CParaFormatLayer* iNormalParaFormatLayer;
<a name="l00175"></a>00175         CCharFormatLayer* iNormalCharFormatLayer;
<a name="l00176"></a>00176         TStreamId iStreamId; <span class="comment">// required when storing and restoring global text</span>
<a name="l00177"></a>00177         <span class="comment">// text layout and view stuff</span>
<a name="l00178"></a>00178         CTextLayout* iLayout; <span class="comment">// text layout</span>
<a name="l00179"></a>00179         CTextView* iTextView; <span class="comment">// text view</span>
<a name="l00180"></a>00180         TRect iViewRect; <span class="comment">// rectangle through which to view text</span>
<a name="l00181"></a>00181         CStyleList* iStyleList; <span class="comment">// Style list holds the two styles</span>
<a name="l00182"></a>00182         CParagraphStyle* iStyleOne;
<a name="l00183"></a>00183         CParagraphStyle* iStyleTwo;
<a name="l00184"></a>00184         TCharFormat iCharFormat;
<a name="l00185"></a>00185         TCharFormatMask iCharFormatMask;
<a name="l00186"></a>00186         };
<a name="l00187"></a>00187 
<a name="l00188"></a><a class="code" href="class_c_view_control.html">00188</a> <span class="keyword">class </span><a class="code" href="class_c_view_control.html">CViewControl</a> : <span class="keyword">public</span> <a class="code" href="class_c_graphic_example_control.html">CGraphicExampleControl</a>
<a name="l00189"></a>00189         {
<a name="l00190"></a>00190         <span class="comment">// Demonstrates the use of the text view and text layout classes</span>
<a name="l00191"></a>00191 <span class="keyword">public</span>:
<a name="l00192"></a>00192         <a class="code" href="class_c_view_control.html">CViewControl</a>() { SetMaxPhases(14);}; 
<a name="l00193"></a>00193         ~<a class="code" href="class_c_view_control.html">CViewControl</a>(); 
<a name="l00194"></a>00194         <span class="keywordtype">void</span> UpdateModelL();
<a name="l00195"></a>00195         <span class="keywordtype">void</span> Draw(<span class="keyword">const</span> TRect&amp; aRect) <span class="keyword">const</span>;
<a name="l00196"></a>00196 <span class="keyword">private</span>:
<a name="l00197"></a>00197         CRichText* iRichText; <span class="comment">// rich text object</span>
<a name="l00198"></a>00198         CParaFormatLayer* iParaFormatLayer;
<a name="l00199"></a>00199         CCharFormatLayer* iCharFormatLayer;
<a name="l00200"></a>00200         <span class="comment">// text layout and view stuff</span>
<a name="l00201"></a>00201         CTextLayout* iLayout; <span class="comment">// text layout</span>
<a name="l00202"></a>00202         CTextView* iTextView; <span class="comment">// text view</span>
<a name="l00203"></a>00203         TRect iViewRect; <span class="comment">// rectangle through which to view text</span>
<a name="l00204"></a>00204         CFbsBitmap* iBitmap; <span class="comment">// line cursor bitmap</span>
<a name="l00205"></a>00205         TCharFormat iCharFormat;
<a name="l00206"></a>00206         TCharFormatMask iCharFormatMask;
<a name="l00207"></a>00207         };
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 <span class="preprocessor">#endif</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span>
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

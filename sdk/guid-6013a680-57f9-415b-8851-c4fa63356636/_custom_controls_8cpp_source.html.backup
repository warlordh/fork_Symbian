<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/AppFramework/UIControls/CustomControls/CustomControls.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/AppFramework/UIControls/CustomControls/CustomControls.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2000-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// UI Control Framework example program</span>
<a name="l00015"></a>00015 <span class="comment">// This example demonstrates how to write new control classes.</span>
<a name="l00016"></a>00016 <span class="comment">// The example creates three new control classes:</span>
<a name="l00017"></a>00017 <span class="comment">// 1. CSmiley              - a simple control which displays a </span>
<a name="l00018"></a>00018 <span class="comment">// smiley face that can have two moods,</span>
<a name="l00019"></a>00019 <span class="comment">// happy and sad. The user can change</span>
<a name="l00020"></a>00020 <span class="comment">// the smiley&#39;s mood by pressing the</span>
<a name="l00021"></a>00021 <span class="comment">// space bar.</span>
<a name="l00022"></a>00022 <span class="comment">// 2. CSmileyContainer     - a compound control which contains</span>
<a name="l00023"></a>00023 <span class="comment">// two CSmiley controls, side by side.</span>
<a name="l00024"></a>00024 <span class="comment">// The user can move the keyboard focus</span>
<a name="l00025"></a>00025 <span class="comment">// from one CSmiley to the other using</span>
<a name="l00026"></a>00026 <span class="comment">// the arrow keys, or the pointer.</span>
<a name="l00027"></a>00027 <span class="comment">// 3. CMainWinControl      - a compound control which does nothing</span>
<a name="l00028"></a>00028 <span class="comment">// except act as a background window and a </span>
<a name="l00029"></a>00029 <span class="comment">// container for other controls in the </span>
<a name="l00030"></a>00030 <span class="comment">// application.</span>
<a name="l00031"></a>00031 <span class="comment">// When the application starts up, it creates a CMainWinControl to cover</span>
<a name="l00032"></a>00032 <span class="comment">// the entire screen, and a CSmileyContainer inside this main window.</span>
<a name="l00033"></a>00033 <span class="comment">// The application&#39;s menu contains just two options. One of them closes </span>
<a name="l00034"></a>00034 <span class="comment">// the application; the other creates a dialog which contains a </span>
<a name="l00035"></a>00035 <span class="comment">// CSmileyContainer. CSmileyContainer therefore illustrates how to write </span>
<a name="l00036"></a>00036 <span class="comment">// a control that can be created both in a dialog and within the</span>
<a name="l00037"></a>00037 <span class="comment">// application&#39;s main view.</span>
<a name="l00038"></a>00038 <span class="comment">//</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;CustomControls.h&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;eikstart.h&gt;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00045"></a>00045 <span class="comment">//</span>
<a name="l00046"></a>00046 <span class="comment">// -----&gt; CMainWinControl(implementation)</span>
<a name="l00047"></a>00047 <span class="comment">//</span>
<a name="l00049"></a>00049 <span class="comment"></span>CMainWinControl::CMainWinControl()
<a name="l00050"></a>00050         {
<a name="l00051"></a>00051         }
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 CMainWinControl::~CMainWinControl()
<a name="l00054"></a>00054         {
<a name="l00055"></a>00055         <span class="keyword">delete</span> iContainer;
<a name="l00056"></a>00056         }
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="comment">// CMainWinControl needs a ConstructL(), because it is a compound control</span>
<a name="l00059"></a>00059 <span class="comment">// (and a window-owning control).</span>
<a name="l00060"></a>00060 <span class="keywordtype">void</span> CMainWinControl::ConstructL(<span class="keyword">const</span> TRect&amp; rect)
<a name="l00061"></a>00061         {
<a name="l00062"></a>00062         <span class="comment">// Make this a window-owning control.</span>
<a name="l00063"></a>00063         CreateWindowL();
<a name="l00064"></a>00064         SetRect(rect);
<a name="l00065"></a>00065 
<a name="l00066"></a>00066         <span class="comment">// Create its only component, a CSmileyContainer</span>
<a name="l00067"></a>00067         iContainer = <span class="keyword">new</span>(ELeave) CSmileyContainer;
<a name="l00068"></a>00068         iContainer-&gt;SetContainerWindowL(*<span class="keyword">this</span>);
<a name="l00069"></a>00069         TRect containerRect=Rect();
<a name="l00070"></a>00070         iContainer-&gt;ConstructL(containerRect);
<a name="l00071"></a>00071         <span class="comment">// Activate the main window control - this will also activate the </span>
<a name="l00072"></a>00072         <span class="comment">// CSmileyContainer and its components.</span>
<a name="l00073"></a>00073         ActivateL();
<a name="l00074"></a>00074         DrawNow();
<a name="l00075"></a>00075         }
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="comment">// The following two functions have to be implemented for all compound controls.</span>
<a name="l00078"></a>00078 TInt CMainWinControl::CountComponentControls()<span class="keyword"> const</span>
<a name="l00079"></a>00079 <span class="keyword">        </span>{
<a name="l00080"></a>00080         <span class="keywordflow">return</span> 1;
<a name="l00081"></a>00081         }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 CCoeControl* CMainWinControl::ComponentControl(TInt <span class="comment">/*aIndex*/</span>)<span class="keyword"> const</span>
<a name="l00084"></a>00084 <span class="keyword">        </span>{
<a name="l00085"></a>00085         <span class="keywordflow">return</span> iContainer;
<a name="l00086"></a>00086         }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="comment">// Draw the main window.</span>
<a name="l00089"></a>00089 <span class="keywordtype">void</span> CMainWinControl::Draw(<span class="keyword">const</span> TRect&amp; <span class="comment">/*aRect*/</span>)<span class="keyword"> const</span>
<a name="l00090"></a>00090 <span class="keyword">        </span>{
<a name="l00091"></a>00091         CWindowGc&amp; gc=SystemGc();
<a name="l00092"></a>00092         gc.SetBrushColor(KRgbWhite);
<a name="l00093"></a>00093         gc.Clear(Rect());
<a name="l00094"></a>00094         }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 <span class="comment">// CSmileyContainer can&#39;t be put on the control stack, because it&#39;s a component of this </span>
<a name="l00097"></a>00097 <span class="comment">// control. The main window control goes on the stack and passes on any key events it gets</span>
<a name="l00098"></a>00098 <span class="comment">// to the CSmileyContainer.</span>
<a name="l00099"></a>00099 TKeyResponse CMainWinControl::OfferKeyEventL(<span class="keyword">const</span> TKeyEvent&amp; aKeyEvent, TEventCode aType)
<a name="l00100"></a>00100         {
<a name="l00101"></a>00101         <span class="keywordflow">return</span> (iContainer-&gt;OfferKeyEventL(aKeyEvent, aType));
<a name="l00102"></a>00102         }
<a name="l00103"></a>00103 
<a name="l00105"></a>00105 <span class="comment">//</span>
<a name="l00106"></a>00106 <span class="comment">// -----&gt; CSmileyContainer (implementation)</span>
<a name="l00107"></a>00107 <span class="comment">//</span>
<a name="l00109"></a>00109 <span class="comment"></span>CSmileyContainer::CSmileyContainer()
<a name="l00110"></a>00110         {}
<a name="l00111"></a>00111 
<a name="l00112"></a>00112         
<a name="l00113"></a>00113 CSmileyContainer::~CSmileyContainer()
<a name="l00114"></a>00114         {
<a name="l00115"></a>00115           <span class="comment">// Delete all the contained controls </span>
<a name="l00116"></a>00116         <span class="keyword">delete</span> iSmiley1;
<a name="l00117"></a>00117         <span class="keyword">delete</span> iSmiley2;
<a name="l00118"></a>00118         }
<a name="l00119"></a>00119 
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 <span class="comment">// Because CSmileyContainer is a compound control, it needs a</span>
<a name="l00122"></a>00122 <span class="comment">// ConstructL() for when it&#39;s created outside a dialog, and a</span>
<a name="l00123"></a>00123 <span class="comment">// ConstructFromResourceL() for when it&#39;s created inside a dialog.</span>
<a name="l00124"></a>00124 <span class="keywordtype">void</span> CSmileyContainer::ConstructL(<span class="keyword">const</span> TRect&amp; aRect)
<a name="l00125"></a>00125         {
<a name="l00126"></a>00126         TBool isSmiling=ETrue;
<a name="l00127"></a>00127 
<a name="l00128"></a>00128         <span class="comment">// Create the two CSmileys. Their size and position is </span>
<a name="l00129"></a>00129         <span class="comment">// set in CSmileyContainer::SizeChangedL().</span>
<a name="l00130"></a>00130         iSmiley1 = <span class="keyword">new</span>(ELeave) CSmiley(isSmiling);
<a name="l00131"></a>00131         iSmiley1-&gt;SetContainerWindowL(*<span class="keyword">this</span>);
<a name="l00132"></a>00132 
<a name="l00133"></a>00133         isSmiling=EFalse;
<a name="l00134"></a>00134 
<a name="l00135"></a>00135         iSmiley2 = <span class="keyword">new</span>(ELeave) CSmiley(isSmiling);
<a name="l00136"></a>00136         iSmiley2-&gt;SetContainerWindowL(*<span class="keyword">this</span>);
<a name="l00137"></a>00137 
<a name="l00138"></a>00138         iSmiley1-&gt;SetFocus(ETrue);
<a name="l00139"></a>00139 
<a name="l00140"></a>00140         <span class="comment">// Set the container as the observer of the two CSmileys. This </span>
<a name="l00141"></a>00141         <span class="comment">// is for handling keyboard focus. When an arrow key is pressed </span>
<a name="l00142"></a>00142         <span class="comment">// or the pointer is clicked on one of the CSmileys, an </span>
<a name="l00143"></a>00143         <span class="comment">// EEventRequestFocus event is sent to the container, and the</span>
<a name="l00144"></a>00144         <span class="comment">// container changes the focus if applicable.</span>
<a name="l00145"></a>00145         iSmiley1-&gt;SetObserver(<span class="keyword">this</span>);
<a name="l00146"></a>00146         iSmiley2-&gt;SetObserver(<span class="keyword">this</span>);
<a name="l00147"></a>00147 
<a name="l00148"></a>00148         <span class="comment">// Set the bounding rectangle of this control (this will result in </span>
<a name="l00149"></a>00149         <span class="comment">// a call to SizeChangedL(). The component controls must be </span>
<a name="l00150"></a>00150         <span class="comment">// created before calling this, because SizeChangedL() sets their</span>
<a name="l00151"></a>00151         <span class="comment">// sizes.</span>
<a name="l00152"></a>00152         SetRect(aRect);
<a name="l00153"></a>00153         }
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="comment">// This function is used when the CSmileyContainer is created inside a dialog.</span>
<a name="l00157"></a>00157 <span class="keywordtype">void</span> CSmileyContainer::ConstructFromResourceL(TResourceReader&amp; aReader)
<a name="l00158"></a>00158         {
<a name="l00159"></a>00159         <span class="comment">// Read the smiley mood from the resource file</span>
<a name="l00160"></a>00160         TBool isSmiling=(TBool)aReader.ReadInt8();
<a name="l00161"></a>00161         <span class="comment">// Read the width of the smiley container from the resource file.</span>
<a name="l00162"></a>00162         TInt width=aReader.ReadInt16();
<a name="l00163"></a>00163         <span class="comment">// Set the height of the container to be half its width</span>
<a name="l00164"></a>00164         TSize containerSize (width, width/2);
<a name="l00165"></a>00165 
<a name="l00166"></a>00166         iSmiley1 = <span class="keyword">new</span>(ELeave) CSmiley(isSmiling);
<a name="l00167"></a>00167         iSmiley1-&gt;SetContainerWindowL(*<span class="keyword">this</span>);
<a name="l00168"></a>00168 
<a name="l00169"></a>00169         iSmiley2 = <span class="keyword">new</span>(ELeave) CSmiley(isSmiling);
<a name="l00170"></a>00170         iSmiley2-&gt;SetContainerWindowL(*<span class="keyword">this</span>);
<a name="l00171"></a>00171 
<a name="l00172"></a>00172         iSmiley1-&gt;SetFocus(ETrue);
<a name="l00173"></a>00173 
<a name="l00174"></a>00174         iSmiley1-&gt;SetObserver(<span class="keyword">this</span>);
<a name="l00175"></a>00175         iSmiley2-&gt;SetObserver(<span class="keyword">this</span>);
<a name="l00176"></a>00176 
<a name="l00177"></a>00177         SetSize(containerSize);
<a name="l00178"></a>00178 
<a name="l00179"></a>00179         ActivateL();    
<a name="l00180"></a>00180         }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 <span class="comment">// The following two functions have to be implemented for all compound controls.</span>
<a name="l00183"></a>00183 TInt CSmileyContainer::CountComponentControls()<span class="keyword"> const</span>
<a name="l00184"></a>00184 <span class="keyword">        </span>{
<a name="l00185"></a>00185         <span class="keywordflow">return</span> 2;
<a name="l00186"></a>00186         }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 CCoeControl* CSmileyContainer::ComponentControl(TInt aIndex)<span class="keyword"> const</span>
<a name="l00189"></a>00189 <span class="keyword">        </span>{
<a name="l00190"></a>00190         <span class="keywordflow">if</span> (aIndex==0)
<a name="l00191"></a>00191                 <span class="keywordflow">return</span> iSmiley1;
<a name="l00192"></a>00192         <span class="keywordflow">else</span>
<a name="l00193"></a>00193                 <span class="keywordflow">return</span> iSmiley2;
<a name="l00194"></a>00194         }
<a name="l00195"></a>00195 
<a name="l00196"></a>00196 <span class="comment">// This function gets called whenever one of the size-setting functions is called.</span>
<a name="l00197"></a>00197 <span class="comment">// As this is a compound control, this function calculates and sets the size and  </span>
<a name="l00198"></a>00198 <span class="comment">// position for its components, based on its own size.</span>
<a name="l00199"></a>00199 <span class="keywordtype">void</span> CSmileyContainer::SizeChanged()
<a name="l00200"></a>00200     {
<a name="l00201"></a>00201         TInt containerWidth=Size().iWidth;
<a name="l00202"></a>00202         TInt containerHeight=Size().iHeight;
<a name="l00203"></a>00203         <span class="comment">// Find half of the greater - width or height</span>
<a name="l00204"></a>00204         TInt length=containerHeight&gt;containerWidth ? containerWidth/4 : containerHeight/4; 
<a name="l00205"></a>00205         TSize smileySize(length,length);
<a name="l00206"></a>00206 
<a name="l00207"></a>00207         <span class="comment">// Do some preliminary calculations so that Draw() is as short</span>
<a name="l00208"></a>00208         <span class="comment">// as possible.</span>
<a name="l00209"></a>00209         TInt xOffset=smileySize.iWidth/4; <span class="comment">// x offset from the center</span>
<a name="l00210"></a>00210         TInt yOffset=(containerHeight - smileySize.iHeight) / 2;
<a name="l00211"></a>00211         iSmiley1-&gt;SetPosition(Position() +
<a name="l00212"></a>00212                 TPoint(containerWidth/2 - smileySize.iWidth - xOffset, yOffset));
<a name="l00213"></a>00213         iSmiley2-&gt;SetPosition(Position() + 
<a name="l00214"></a>00214                 TPoint(containerWidth/2 + xOffset, yOffset));
<a name="l00215"></a>00215         <span class="comment">// Calling SetSizeL() causes the components&#39; SizeChanged() to be called.</span>
<a name="l00216"></a>00216         iSmiley1-&gt;SetSize(smileySize);
<a name="l00217"></a>00217         iSmiley2-&gt;SetSize(smileySize);
<a name="l00218"></a>00218         }
<a name="l00219"></a>00219         
<a name="l00220"></a>00220 <span class="keywordtype">void</span> CSmileyContainer::Draw(<span class="keyword">const</span> TRect&amp; aRect)<span class="keyword"> const</span>
<a name="l00221"></a>00221 <span class="keyword">        </span>{
<a name="l00222"></a>00222         <span class="comment">// Just draw a rectangle round the edge of the control.</span>
<a name="l00223"></a>00223         CWindowGc&amp; gc=SystemGc();
<a name="l00224"></a>00224         gc.Clear(aRect);
<a name="l00225"></a>00225         gc.SetClippingRect(aRect);
<a name="l00226"></a>00226         gc.DrawRect(Rect());
<a name="l00227"></a>00227         }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 <span class="comment">// This function is defined by MCoeControlObserver. It gets called whenever</span>
<a name="l00230"></a>00230 <span class="comment">// a control that this control is observing calls ReportEventL().</span>
<a name="l00231"></a>00231 <span class="comment">// In this example, the CSmileyContainer is the observer for both of the </span>
<a name="l00232"></a>00232 <span class="comment">// CSmileys.  CCoeControl::ProcessPointerEventL() calls ReportEvent(), </span>
<a name="l00233"></a>00233 <span class="comment">// sending an event of type EEventRequestFocus, whenever an EButton1Down event</span>
<a name="l00234"></a>00234 <span class="comment">// occurs in the CSmiley that doesn&#39;t currently have focus.</span>
<a name="l00235"></a>00235 <span class="keywordtype">void</span> CSmileyContainer::HandleControlEventL(CCoeControl* aControl,
<a name="l00236"></a>00236                                                                                 TCoeEvent aEventType)
<a name="l00237"></a>00237         {
<a name="l00238"></a>00238         <span class="keywordflow">switch</span> (aEventType)
<a name="l00239"></a>00239                 {
<a name="l00240"></a>00240                 <span class="keywordflow">case</span> EEventRequestFocus:
<a name="l00241"></a>00241                         {
<a name="l00242"></a>00242                         <span class="keywordflow">if</span> (aControl-&gt;IsFocused())
<a name="l00243"></a>00243                                 <span class="keywordflow">return</span>;
<a name="l00244"></a>00244                         SwapFocus(aControl);
<a name="l00245"></a>00245                         }
<a name="l00246"></a>00246                         <span class="keywordflow">break</span>;
<a name="l00247"></a>00247                 <span class="keywordflow">default</span>:
<a name="l00248"></a>00248                         <span class="keywordflow">break</span>;
<a name="l00249"></a>00249                 }
<a name="l00250"></a>00250         }
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 <span class="comment">// This function is called by the framework whenever a component in a dialog is </span>
<a name="l00253"></a>00253 <span class="comment">// about to lose focus. It checks that the data in ithe component is valid. In</span>
<a name="l00254"></a>00254 <span class="comment">// this example, there&#39;s a &quot;rule&quot; that both the CSmileys in the container can&#39;t</span>
<a name="l00255"></a>00255 <span class="comment">// be miserable! If they are, the function leaves. The framework issues the message </span>
<a name="l00256"></a>00256 <span class="comment">// we give it, and doesn&#39;t move focus away from the CSmileyContainer.</span>
<a name="l00257"></a>00257 <span class="keywordtype">void</span> CSmileyContainer::PrepareForFocusLossL()   
<a name="l00258"></a>00258         {
<a name="l00259"></a>00259         <span class="keywordflow">if</span> (!iSmiley1-&gt;IsSmiling() &amp;&amp; !iSmiley2-&gt;IsSmiling())
<a name="l00260"></a>00260                 {
<a name="l00261"></a>00261                 CEikonEnv::Static()-&gt;LeaveWithInfoMsg(R_EXAMPLE_TEXT_VALIDATE);
<a name="l00262"></a>00262                 }
<a name="l00263"></a>00263         }
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 <span class="comment">// This function gets called whenever the application calls SetFocus().</span>
<a name="l00266"></a>00266 <span class="comment">// It redraws the CSmileyContainer, so that they are updated to show </span>
<a name="l00267"></a>00267 <span class="comment">// which one now has focus.</span>
<a name="l00268"></a>00268 <span class="keywordtype">void</span> CSmileyContainer::FocusChanged(TDrawNow aDrawNow)
<a name="l00269"></a>00269         {
<a name="l00270"></a>00270         <span class="keywordflow">if</span> (IsFocused())
<a name="l00271"></a>00271                 {
<a name="l00272"></a>00272                 iSmiley1-&gt;SetFocus(ETrue, EDrawNow);
<a name="l00273"></a>00273                 }
<a name="l00274"></a>00274         <span class="keywordflow">else</span>
<a name="l00275"></a>00275                 {
<a name="l00276"></a>00276                         <span class="keywordflow">if</span> (iSmiley1-&gt;IsFocused())
<a name="l00277"></a>00277                         iSmiley1-&gt;SetFocus(EFalse, EDrawNow);
<a name="l00278"></a>00278                         <span class="keywordflow">else</span>
<a name="l00279"></a>00279                         iSmiley2-&gt;SetFocus(EFalse, EDrawNow);
<a name="l00280"></a>00280                 }
<a name="l00281"></a>00281         <span class="keywordflow">if</span> (aDrawNow)
<a name="l00282"></a>00282                 DrawNow();
<a name="l00283"></a>00283         }
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 
<a name="l00286"></a>00286 <span class="keywordtype">void</span> CSmileyContainer::SwapFocus(CCoeControl* aControl)
<a name="l00287"></a>00287         {
<a name="l00288"></a>00288         <span class="keywordflow">if</span> (aControl==iSmiley1)
<a name="l00289"></a>00289                 {
<a name="l00290"></a>00290                 iSmiley2-&gt;SetFocus(EFalse, EDrawNow);
<a name="l00291"></a>00291                 iSmiley1-&gt;SetFocus(ETrue, EDrawNow);
<a name="l00292"></a>00292                 }
<a name="l00293"></a>00293         <span class="keywordflow">else</span>
<a name="l00294"></a>00294                 {
<a name="l00295"></a>00295                 iSmiley1-&gt;SetFocus(EFalse, EDrawNow);
<a name="l00296"></a>00296                 iSmiley2-&gt;SetFocus(ETrue, EDrawNow);
<a name="l00297"></a>00297                 }
<a name="l00298"></a>00298         }
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 TKeyResponse CSmileyContainer::OfferKeyEventL(<span class="keyword">const</span> TKeyEvent&amp; aKeyEvent,TEventCode aType)
<a name="l00301"></a>00301         {
<a name="l00302"></a>00302         <span class="comment">// Use the arrow keys to move focus between the two CSmileys.</span>
<a name="l00303"></a>00303         <span class="keywordflow">switch</span> (aKeyEvent.iScanCode)
<a name="l00304"></a>00304                 {
<a name="l00305"></a>00305                 <span class="keywordflow">case</span> EStdKeySpace:
<a name="l00306"></a>00306                         <span class="keywordflow">if</span> (iSmiley1-&gt;IsFocused())
<a name="l00307"></a>00307                                 <span class="keywordflow">return</span> iSmiley1-&gt;OfferKeyEventL(aKeyEvent, aType);
<a name="l00308"></a>00308                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (iSmiley2-&gt;IsFocused())
<a name="l00309"></a>00309                                 <span class="keywordflow">return</span> iSmiley2-&gt;OfferKeyEventL(aKeyEvent, aType);
<a name="l00310"></a>00310                         <span class="keywordflow">break</span>;
<a name="l00311"></a>00311                 <span class="keywordflow">case</span> EStdKeyRightArrow:
<a name="l00312"></a>00312                         <span class="keywordflow">if</span> (iSmiley1-&gt;IsFocused())
<a name="l00313"></a>00313                                 SwapFocus(iSmiley2);
<a name="l00314"></a>00314                         <span class="keywordflow">else</span>
<a name="l00315"></a>00315                         <span class="keywordflow">return</span> EKeyWasConsumed;
<a name="l00316"></a>00316                         <span class="keywordflow">break</span>;
<a name="l00317"></a>00317                 <span class="keywordflow">case</span> EStdKeyLeftArrow:
<a name="l00318"></a>00318                         <span class="keywordflow">if</span> (iSmiley2-&gt;IsFocused())
<a name="l00319"></a>00319                                 SwapFocus(iSmiley1);
<a name="l00320"></a>00320                         <span class="keywordflow">else</span>
<a name="l00321"></a>00321                         <span class="keywordflow">return</span> EKeyWasConsumed;
<a name="l00322"></a>00322                         <span class="keywordflow">break</span>;
<a name="l00323"></a>00323                 <span class="keywordflow">default</span>:
<a name="l00324"></a>00324                         <span class="keywordflow">break</span>;
<a name="l00325"></a>00325                 }
<a name="l00326"></a>00326         <span class="comment">// If the CSmileyContainer didn&#39;t use the key event, it must return EKeyWasNotConsumed,</span>
<a name="l00327"></a>00327         <span class="comment">// so that the key event is passed to other controls on the stack.</span>
<a name="l00328"></a>00328         <span class="keywordflow">return</span> EKeyWasNotConsumed;
<a name="l00329"></a>00329         }
<a name="l00330"></a>00330 
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 
<a name="l00333"></a>00333 
<a name="l00335"></a>00335 <span class="comment">//</span>
<a name="l00336"></a>00336 <span class="comment">// -----&gt; CSmiley (implementation)</span>
<a name="l00337"></a>00337 <span class="comment">//</span>
<a name="l00339"></a>00339 <span class="comment"></span>
<a name="l00340"></a>00340 <span class="comment">// CSmiley doesn&#39;t need a ConstructL() because it&#39;s a simple control.</span>
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 CSmiley::CSmiley(TBool aSmiling) : iSmiling(aSmiling)
<a name="l00343"></a>00343         {
<a name="l00344"></a>00344         }
<a name="l00345"></a>00345 
<a name="l00346"></a>00346 CSmiley::~CSmiley()
<a name="l00347"></a>00347         {
<a name="l00348"></a>00348         }
<a name="l00349"></a>00349 
<a name="l00350"></a>00350 TBool CSmiley::IsSmiling()
<a name="l00351"></a>00351         {
<a name="l00352"></a>00352         <span class="keywordflow">return</span> iSmiling;
<a name="l00353"></a>00353         }
<a name="l00354"></a>00354 
<a name="l00355"></a>00355 <span class="keywordtype">void</span> CSmiley::Draw(<span class="keyword">const</span> TRect&amp; aRect)<span class="keyword"> const</span>
<a name="l00356"></a>00356 <span class="keyword">        </span>{
<a name="l00357"></a>00357         CWindowGc&amp; gc=SystemGc();
<a name="l00358"></a>00358         <span class="keywordflow">if</span> (IsFocused())
<a name="l00359"></a>00359                 {
<a name="l00360"></a>00360                 gc.SetPenColor(KRgbBlack);
<a name="l00361"></a>00361                 }
<a name="l00362"></a>00362         <span class="keywordflow">else</span>
<a name="l00363"></a>00363                 {
<a name="l00364"></a>00364                 gc.SetPenColor(KRgbWhite);
<a name="l00365"></a>00365                 }
<a name="l00366"></a>00366         gc.SetBrushColor(KRgbWhite);
<a name="l00367"></a>00367         gc.Clear(Rect());
<a name="l00368"></a>00368         gc.DrawRect(Rect());
<a name="l00369"></a>00369 
<a name="l00370"></a>00370         gc.SetClippingRect(aRect);
<a name="l00371"></a>00371 
<a name="l00372"></a>00372         <span class="comment">// Draw the smiley face, smiling or looking sad</span>
<a name="l00373"></a>00373         gc.SetPenColor(KRgbBlack);
<a name="l00374"></a>00374         <span class="comment">// Draw a circle for the face</span>
<a name="l00375"></a>00375         gc.DrawEllipse(iSmileyRect);
<a name="l00376"></a>00376         <span class="comment">// Draw the eyes</span>
<a name="l00377"></a>00377         TPoint leftEye(iSmileyWidth/3, iSmileyHeight/3);
<a name="l00378"></a>00378         TPoint rightEye(iSmileyWidth*2/3, iSmileyHeight/3);
<a name="l00379"></a>00379         gc.SetPenSize(TSize(5,5));
<a name="l00380"></a>00380         gc.Plot(iSmileyRect.iTl+leftEye);
<a name="l00381"></a>00381         gc.Plot(iSmileyRect.iTl+rightEye);
<a name="l00382"></a>00382         <span class="comment">//Draw the mouth, smiling or looking sad.</span>
<a name="l00383"></a>00383         gc.SetPenSize(TSize(1,1));
<a name="l00384"></a>00384         gc.SetPenColor(KRgbWhite);
<a name="l00385"></a>00385         <span class="keywordflow">if</span> (iSmiling)
<a name="l00386"></a>00386                 gc.DrawArc(iFrownRect, iFrownRect.iTl+TPoint(iSmileyWidth/2,iFrownRect.Height()/2), 
<a name="l00387"></a>00387                                                           iFrownRect.iTl+TPoint(0,iFrownRect.Height()/2));
<a name="l00388"></a>00388         <span class="keywordflow">else</span>
<a name="l00389"></a>00389                 gc.DrawArc(iSmileRect, iSmileRect.iTl+TPoint(0,iSmileRect.Height()/2), 
<a name="l00390"></a>00390                                                           iSmileRect.iTl+TPoint(iSmileyWidth/2,iSmileRect.Height()/2));
<a name="l00391"></a>00391         gc.SetPenColor(KRgbBlack);
<a name="l00392"></a>00392         <span class="keywordflow">if</span> (iSmiling)
<a name="l00393"></a>00393                 gc.DrawArc(iSmileRect, iSmileRect.iTl+TPoint(0,iSmileRect.Height()/2), 
<a name="l00394"></a>00394                                                           iSmileRect.iTl+TPoint(iSmileyWidth/2,iSmileRect.Height()/2));
<a name="l00395"></a>00395         <span class="keywordflow">else</span>
<a name="l00396"></a>00396                 gc.DrawArc(iFrownRect, iFrownRect.iTl+TPoint(iSmileyWidth/2,iFrownRect.Height()/2), 
<a name="l00397"></a>00397                                                           iFrownRect.iTl+TPoint(0,iFrownRect.Height()/2));
<a name="l00398"></a>00398         }
<a name="l00399"></a>00399 
<a name="l00400"></a>00400 <span class="keywordtype">void</span> CSmiley::SizeChanged()
<a name="l00401"></a>00401         {
<a name="l00402"></a>00402         <span class="comment">// Calculate sizes of rectangles for drawing face and mouth</span>
<a name="l00403"></a>00403         iSmileyRect=Rect();
<a name="l00404"></a>00404         <span class="comment">// Allow room for the focus rectangle round the outside</span>
<a name="l00405"></a>00405         iSmileyRect.Shrink(3,3);
<a name="l00406"></a>00406         iSmileyWidth=iSmileyRect.Width();
<a name="l00407"></a>00407         iSmileyHeight=iSmileyRect.Height();
<a name="l00408"></a>00408         iSmileRect.SetRect(iSmileyRect.iTl+TPoint(iSmileyWidth/4, iSmileyHeight/2),
<a name="l00409"></a>00409                                         TSize(iSmileyWidth/2, iSmileyHeight/3));
<a name="l00410"></a>00410         iFrownRect.SetRect(iSmileyRect.iTl+TPoint(iSmileyWidth/4, iSmileyHeight*2/3),
<a name="l00411"></a>00411                                         TSize(iSmileyWidth/2, iSmileyHeight/3));
<a name="l00412"></a>00412         }
<a name="l00413"></a>00413 
<a name="l00414"></a>00414 <span class="keywordtype">void</span> CSmiley::FocusChanged(TDrawNow aDrawNow)
<a name="l00415"></a>00415         {
<a name="l00416"></a>00416         <span class="keywordflow">if</span> (aDrawNow)
<a name="l00417"></a>00417                 DrawNow();
<a name="l00418"></a>00418         }
<a name="l00419"></a>00419 
<a name="l00420"></a>00420 <span class="keywordtype">void</span> CSmiley::HandlePointerEventL(<span class="keyword">const</span> TPointerEvent&amp; aPointerEvent)
<a name="l00421"></a>00421         {
<a name="l00422"></a>00422         <span class="keywordflow">if</span> (aPointerEvent.iType==TPointerEvent::EButton1Down)
<a name="l00423"></a>00423                 {
<a name="l00424"></a>00424                 iSmiling = !iSmiling;
<a name="l00425"></a>00425                 DrawNow();
<a name="l00426"></a>00426                 }
<a name="l00427"></a>00427         }
<a name="l00428"></a>00428 
<a name="l00429"></a>00429 TKeyResponse CSmiley::OfferKeyEventL(<span class="keyword">const</span> TKeyEvent&amp; aKeyEvent,TEventCode aType)
<a name="l00430"></a>00430         {
<a name="l00431"></a>00431         <span class="comment">// The space bar changes the &quot;mood&quot; of the CSmiley.</span>
<a name="l00432"></a>00432         <span class="keywordflow">if</span> (aType==EEventKey &amp;&amp; aKeyEvent.iScanCode==EStdKeySpace)
<a name="l00433"></a>00433                 {
<a name="l00434"></a>00434                 iSmiling = !iSmiling;
<a name="l00435"></a>00435                 DrawNow();
<a name="l00436"></a>00436                 <span class="keywordflow">return</span> EKeyWasConsumed;
<a name="l00437"></a>00437                 }
<a name="l00438"></a>00438         <span class="keywordflow">else</span>
<a name="l00439"></a>00439                 {
<a name="l00440"></a>00440                 <span class="keywordflow">return</span> EKeyWasNotConsumed;
<a name="l00441"></a>00441                 }
<a name="l00442"></a>00442         }
<a name="l00443"></a>00443 
<a name="l00445"></a>00445 <span class="comment">//</span>
<a name="l00446"></a>00446 <span class="comment">// -----&gt; CSmileyDialog(implementation)</span>
<a name="l00447"></a>00447 <span class="comment">//</span>
<a name="l00449"></a>00449 <span class="comment"></span>TBool CSmileyDialog::RunDlgLD()
<a name="l00450"></a>00450         {
<a name="l00451"></a>00451         CEikDialog* dialog = <span class="keyword">new</span> (ELeave) CSmileyDialog();
<a name="l00452"></a>00452         <span class="keywordflow">return</span> (dialog-&gt;ExecuteLD(R_SMILEY_DIALOG));
<a name="l00453"></a>00453         }
<a name="l00454"></a>00454 
<a name="l00455"></a>00455 <span class="comment">// This function is used by CEikForm::ConstructByTypeL() to create the custom </span>
<a name="l00456"></a>00456 <span class="comment">// control within the dialog.</span>
<a name="l00457"></a>00457 SEikControlInfo CSmileyDialog::CreateCustomControlL(TInt aControlType)
<a name="l00458"></a>00458         {
<a name="l00459"></a>00459         SEikControlInfo controlInfo;
<a name="l00460"></a>00460         controlInfo.iControl = NULL;
<a name="l00461"></a>00461         controlInfo.iTrailerTextId = 0;
<a name="l00462"></a>00462         controlInfo.iFlags = 0;
<a name="l00463"></a>00463 
<a name="l00464"></a>00464     <span class="keywordflow">switch</span> (aControlType)
<a name="l00465"></a>00465         {
<a name="l00466"></a>00466     <span class="keywordflow">case</span> ESmileyControl:
<a name="l00467"></a>00467                 controlInfo.iControl = <span class="keyword">new</span>(ELeave) CSmileyContainer;
<a name="l00468"></a>00468                 <span class="keywordflow">break</span>;
<a name="l00469"></a>00469         <span class="keywordflow">default</span>:
<a name="l00470"></a>00470                 <span class="keywordflow">break</span>;
<a name="l00471"></a>00471                 }
<a name="l00472"></a>00472     <span class="keywordflow">return</span> controlInfo;
<a name="l00473"></a>00473         }
<a name="l00474"></a>00474 
<a name="l00476"></a>00476 <span class="comment">//</span>
<a name="l00477"></a>00477 <span class="comment">// -----&gt; CExampleAppUi (implementation)</span>
<a name="l00478"></a>00478 <span class="comment">//</span>
<a name="l00480"></a>00480 <span class="comment"></span><span class="keywordtype">void</span> CExampleAppUi::ConstructL()
<a name="l00481"></a>00481         {
<a name="l00482"></a>00482           <span class="comment">// Allow base class (CEikAppUi) to perform necessary construction</span>
<a name="l00483"></a>00483         BaseConstructL();
<a name="l00484"></a>00484         <span class="comment">// Construct the CMainWinControl which forms the main view</span>
<a name="l00485"></a>00485         <span class="comment">// for this application.</span>
<a name="l00486"></a>00486         iMainWinControl=<span class="keyword">new</span>(ELeave) CMainWinControl;
<a name="l00487"></a>00487         iMainWinControl-&gt;ConstructL(ClientRect());
<a name="l00488"></a>00488         <span class="comment">// The main window is added to the control stack (for key event</span>
<a name="l00489"></a>00489         <span class="comment">// handling).   </span>
<a name="l00490"></a>00490         AddToStackL(iMainWinControl);
<a name="l00491"></a>00491         }
<a name="l00492"></a>00492         
<a name="l00493"></a>00493 
<a name="l00494"></a>00494 CExampleAppUi::~CExampleAppUi()
<a name="l00495"></a>00495         {
<a name="l00496"></a>00496         RemoveFromStack(iMainWinControl);
<a name="l00497"></a>00497           <span class="comment">// Delete the main window</span>
<a name="l00498"></a>00498         <span class="keyword">delete</span> iMainWinControl;
<a name="l00499"></a>00499         }
<a name="l00500"></a>00500 
<a name="l00501"></a>00501 <span class="keywordtype">void</span> CExampleAppUi::HandleCommandL(TInt aCommand)
<a name="l00502"></a>00502         {
<a name="l00503"></a>00503           <span class="comment">// Handle the command generated by:</span>
<a name="l00504"></a>00504           <span class="comment">//   1. menu item selection</span>
<a name="l00505"></a>00505           <span class="comment">//   2. short-cut key press</span>
<a name="l00506"></a>00506         <span class="keywordflow">switch</span> (aCommand)
<a name="l00507"></a>00507                 {
<a name="l00508"></a>00508         <span class="comment">// EXIT comand</span>
<a name="l00509"></a>00509         <span class="keywordflow">case</span> EEikCmdExit:
<a name="l00510"></a>00510                 OnCmdExit();
<a name="l00511"></a>00511                 <span class="keywordflow">break</span>;
<a name="l00512"></a>00512         <span class="keywordflow">case</span> ECreateSmileyDialog:
<a name="l00513"></a>00513                 CSmileyDialog::RunDlgLD();
<a name="l00514"></a>00514                 <span class="keywordflow">break</span>;
<a name="l00515"></a>00515         <span class="keywordflow">default</span> :
<a name="l00516"></a>00516                 <span class="keywordflow">break</span>;
<a name="l00517"></a>00517                 }
<a name="l00518"></a>00518         }
<a name="l00519"></a>00519 
<a name="l00520"></a>00520 <span class="keywordtype">void</span> CExampleAppUi::OnCmdExit()
<a name="l00521"></a>00521         {
<a name="l00522"></a>00522         CBaActiveScheduler::Exit();
<a name="l00523"></a>00523         }
<a name="l00524"></a>00524 
<a name="l00525"></a>00525 <span class="keywordtype">void</span> CExampleAppUi::HandleModelChangeL()
<a name="l00526"></a>00526         {
<a name="l00527"></a>00527         }
<a name="l00528"></a>00528 
<a name="l00530"></a>00530 <span class="comment">//</span>
<a name="l00531"></a>00531 <span class="comment">// -----&gt; CExampleDocument (implementation)</span>
<a name="l00532"></a>00532 <span class="comment">//</span>
<a name="l00534"></a>00534 <span class="comment"></span>
<a name="l00535"></a>00535 CExampleDocument::CExampleDocument(CEikApplication&amp; aApp)
<a name="l00536"></a>00536          : CEikDocument(aApp)
<a name="l00537"></a>00537         {}
<a name="l00538"></a>00538 
<a name="l00539"></a>00539 CExampleDocument::~CExampleDocument()
<a name="l00540"></a>00540         {
<a name="l00541"></a>00541         }
<a name="l00542"></a>00542 
<a name="l00543"></a>00543 <a class="code" href="class_c_example_document.html">CExampleDocument</a>* CExampleDocument::NewL(CEikApplication&amp; aApp)
<a name="l00544"></a>00544         {
<a name="l00545"></a>00545         <a class="code" href="class_c_example_document.html">CExampleDocument</a>* <span class="keyword">self</span>=<span class="keyword">new</span>(ELeave) <a class="code" href="class_c_example_document.html">CExampleDocument</a>(aApp);
<a name="l00546"></a>00546         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00547"></a>00547         <span class="keyword">self</span>-&gt;CreateModelL();
<a name="l00548"></a>00548         CleanupStack::Pop();
<a name="l00549"></a>00549         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00550"></a>00550         }
<a name="l00551"></a>00551 
<a name="l00552"></a>00552 <span class="keywordtype">void</span> CExampleDocument::ResetModelL()
<a name="l00553"></a>00553         {
<a name="l00554"></a>00554         CreateModelL();
<a name="l00555"></a>00555         }
<a name="l00556"></a>00556 
<a name="l00557"></a>00557 <span class="keywordtype">void</span> CExampleDocument::CreateModelL()
<a name="l00558"></a>00558         {
<a name="l00559"></a>00559         }
<a name="l00560"></a>00560 
<a name="l00561"></a>00561 CEikAppUi* CExampleDocument::CreateAppUiL()
<a name="l00562"></a>00562         {
<a name="l00563"></a>00563     <span class="keywordflow">return</span>(<span class="keyword">new</span>(ELeave) <a class="code" href="class_c_example_app_ui.html">CExampleAppUi</a>);
<a name="l00564"></a>00564         }
<a name="l00565"></a>00565 
<a name="l00566"></a>00566 <span class="keywordtype">void</span> CExampleDocument::NewDocumentL()
<a name="l00567"></a>00567         {
<a name="l00568"></a>00568         ResetModelL();
<a name="l00569"></a>00569         }
<a name="l00570"></a>00570 
<a name="l00571"></a>00571 <span class="keywordtype">void</span> CExampleDocument::StoreL(CStreamStore&amp; <span class="comment">/*aStore*/</span>,CStreamDictionary&amp; <span class="comment">/*aStreamDic*/</span>)<span class="keyword"> const</span>
<a name="l00572"></a>00572 <span class="keyword">        </span>{
<a name="l00573"></a>00573         }
<a name="l00574"></a>00574 
<a name="l00575"></a>00575 <span class="keywordtype">void</span> CExampleDocument::RestoreL(<span class="keyword">const</span> CStreamStore&amp; <span class="comment">/*aStore*/</span>,<span class="keyword">const</span> CStreamDictionary&amp; <span class="comment">/*aStreamDic*/</span>)
<a name="l00576"></a>00576         {
<a name="l00577"></a>00577         }
<a name="l00578"></a>00578 
<a name="l00579"></a>00579 
<a name="l00581"></a>00581 <span class="comment">//</span>
<a name="l00582"></a>00582 <span class="comment">// -----&gt; CExampleApplication (implementation)</span>
<a name="l00583"></a>00583 <span class="comment">//</span>
<a name="l00585"></a>00585 <span class="comment"></span>TUid CExampleApplication::AppDllUid()<span class="keyword"> const</span>
<a name="l00586"></a>00586 <span class="keyword">        </span>{
<a name="l00587"></a>00587         <span class="keywordflow">return</span>(KUidExampleApp);
<a name="l00588"></a>00588         }
<a name="l00589"></a>00589 
<a name="l00590"></a>00590 
<a name="l00591"></a>00591 CApaDocument* CExampleApplication::CreateDocumentL()
<a name="l00592"></a>00592         {
<a name="l00593"></a>00593         <span class="keywordflow">return</span> CExampleDocument::NewL(*<span class="keyword">this</span>);
<a name="l00594"></a>00594         }
<a name="l00595"></a>00595 
<a name="l00596"></a>00596 
<a name="l00597"></a>00597 <span class="comment">//</span>
<a name="l00598"></a>00598 <span class="comment">// EXPORTed functions</span>
<a name="l00599"></a>00599 <span class="comment">//</span>
<a name="l00600"></a>00600 
<a name="l00601"></a>00601 
<a name="l00602"></a>00602 LOCAL_C CApaApplication* NewApplication()
<a name="l00603"></a>00603         {
<a name="l00604"></a>00604         <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_c_example_application.html">CExampleApplication</a>;
<a name="l00605"></a>00605         }
<a name="l00606"></a>00606         
<a name="l00607"></a>00607 GLDEF_C TInt E32Main()
<a name="l00608"></a>00608         {
<a name="l00609"></a>00609         <span class="keywordflow">return</span> EikStart::RunApplication(NewApplication);
<a name="l00610"></a>00610         }
<a name="l00611"></a>00611 
<a name="l00612"></a>00612 
<a name="l00613"></a>00613 
<a name="l00614"></a>00614 
<a name="l00615"></a>00615 
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

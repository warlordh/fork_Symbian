<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Base/IPC/Async/AcceptPrintInput/AcceptPrintInput.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Base/IPC/Async/AcceptPrintInput/AcceptPrintInput.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2000-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// Asynchronous keyboard processing with messenger program.</span>
<a name="l00015"></a>00015 <span class="comment">// A single CWriteKeyProcessor active object (derived from </span>
<a name="l00016"></a>00016 <span class="comment">// class CActiveConsole) which accepts and prints keyboard</span>
<a name="l00017"></a>00017 <span class="comment">// input to a console.</span>
<a name="l00018"></a>00018 <span class="comment">//</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;CommonFramework.h&quot;</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">// panics</span>
<a name="l00023"></a>00023 <span class="keyword">enum</span>
<a name="l00024"></a>00024         {
<a name="l00025"></a>00025         EPanicAlreadyActive=1000,
<a name="l00026"></a>00026         };
<a name="l00027"></a>00027 
<a name="l00029"></a>00029 <span class="comment">//</span>
<a name="l00030"></a>00030 <span class="comment">// -----&gt; CTimedMessenger (definition)</span>
<a name="l00031"></a>00031 <span class="comment">//</span>
<a name="l00033"></a>00033 <span class="comment"></span><span class="keyword">class </span>CTimedMessenger : <span class="keyword">public</span> CTimer
<a name="l00034"></a>00034         {
<a name="l00035"></a>00035 <span class="keyword">public</span>:
<a name="l00036"></a>00036           <span class="comment">// Construction</span>
<a name="l00037"></a>00037         CTimedMessenger();
<a name="l00038"></a>00038       <span class="comment">// Destruction</span>
<a name="l00039"></a>00039         ~CTimedMessenger();
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="keyword">public</span>:
<a name="l00042"></a>00042           <span class="comment">// Static construction</span>
<a name="l00043"></a>00043         <span class="keyword">static</span> CTimedMessenger* NewLC(<span class="keyword">const</span> TDesC&amp; aGreeting,
<a name="l00044"></a>00044                                           TInt aTicksRequested,
<a name="l00045"></a>00045                                                                   TInt aTicksInterval
<a name="l00046"></a>00046                                                                  );
<a name="l00047"></a>00047         <span class="keyword">static</span> CTimedMessenger* NewL(<span class="keyword">const</span> TDesC&amp; aGreeting,
<a name="l00048"></a>00048                                          TInt aTicksRequested,
<a name="l00049"></a>00049                                                                  TInt aTicksInterval
<a name="l00050"></a>00050                                                                 );
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="keyword">public</span>:
<a name="l00053"></a>00053           <span class="comment">// Second phase construction</span>
<a name="l00054"></a>00054         <span class="keywordtype">void</span> ConstructL(<span class="keyword">const</span> TDesC&amp; aGreeting,
<a name="l00055"></a>00055                             TInt aTicksRequested,
<a name="l00056"></a>00056                                         TInt aTicksInterval
<a name="l00057"></a>00057                                    );
<a name="l00058"></a>00058 
<a name="l00059"></a>00059           <span class="comment">// issue request</span>
<a name="l00060"></a>00060         <span class="keywordtype">void</span> IssueRequest(); 
<a name="l00061"></a>00061 
<a name="l00062"></a>00062           <span class="comment">// Cancel request</span>
<a name="l00063"></a>00063           <span class="comment">// Defined as pure virtual by CActive;</span>
<a name="l00064"></a>00064           <span class="comment">// implementation provided by this class.</span>
<a name="l00065"></a>00065         <span class="keywordtype">void</span> DoCancel();
<a name="l00066"></a>00066 
<a name="l00067"></a>00067           <span class="comment">// service completed request.</span>
<a name="l00068"></a>00068           <span class="comment">// Defined as pure virtual by CActive;</span>
<a name="l00069"></a>00069           <span class="comment">// implementation provided by this class.</span>
<a name="l00070"></a>00070         <span class="keywordtype">void</span> RunL();
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="keyword">public</span>:
<a name="l00073"></a>00073           <span class="comment">// data members defined by this class</span>
<a name="l00074"></a>00074         TBufC&lt;20&gt; iGreeting;   <span class="comment">// Text of the greeting.</span>
<a name="l00075"></a>00075         TInt iTicksRequested;  <span class="comment">// Total number of greetings CTimedMessenger</span>
<a name="l00076"></a>00076                                <span class="comment">// will emit.</span>
<a name="l00077"></a>00077         TInt iTicksInterval;   <span class="comment">// Number of seconds between each greeting.</span>
<a name="l00078"></a>00078         TInt iTicksDone;       <span class="comment">// Number of greetings issued so far.</span>
<a name="l00079"></a>00079         };
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 
<a name="l00083"></a>00083 <span class="comment">//</span>
<a name="l00084"></a>00084 <span class="comment">// -----&gt; CExampleScheduler (definition)</span>
<a name="l00085"></a>00085 <span class="comment">//</span>
<a name="l00087"></a>00087 <span class="comment"></span><span class="keyword">class </span>CExampleScheduler : <span class="keyword">public</span> CActiveScheduler
<a name="l00088"></a>00088         {
<a name="l00089"></a>00089 <span class="keyword">public</span>:
<a name="l00090"></a>00090         <span class="keywordtype">void</span> Error (TInt aError) <span class="keyword">const</span>;
<a name="l00091"></a>00091         };
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 
<a name="l00095"></a>00095 <span class="comment">//</span>
<a name="l00096"></a>00096 <span class="comment">// -----&gt; CActiveConsole (definition)</span>
<a name="l00097"></a>00097 <span class="comment">//</span>
<a name="l00098"></a>00098 <span class="comment">// An abstract class which provides the facility to issue key requests. </span>
<a name="l00099"></a>00099 <span class="comment">//</span>
<a name="l00101"></a>00101 <span class="comment"></span><span class="keyword">class </span>CActiveConsole : <span class="keyword">public</span> CActive
<a name="l00102"></a>00102         {
<a name="l00103"></a>00103 <span class="keyword">public</span>:
<a name="l00104"></a>00104           <span class="comment">// Construction</span>
<a name="l00105"></a>00105         CActiveConsole(CConsoleBase* aConsole);
<a name="l00106"></a>00106         <span class="keywordtype">void</span> ConstructL();
<a name="l00107"></a>00107 
<a name="l00108"></a>00108           <span class="comment">// Destruction</span>
<a name="l00109"></a>00109         ~CActiveConsole();
<a name="l00110"></a>00110 
<a name="l00111"></a>00111           <span class="comment">// Issue request</span>
<a name="l00112"></a>00112         <span class="keywordtype">void</span> RequestCharacter();
<a name="l00113"></a>00113         
<a name="l00114"></a>00114           <span class="comment">// Cancel request.</span>
<a name="l00115"></a>00115           <span class="comment">// Defined as pure virtual by CActive;</span>
<a name="l00116"></a>00116           <span class="comment">// implementation provided by this class.</span>
<a name="l00117"></a>00117         <span class="keywordtype">void</span> DoCancel();
<a name="l00118"></a>00118 
<a name="l00119"></a>00119           <span class="comment">// Service completed request.</span>
<a name="l00120"></a>00120           <span class="comment">// Defined as pure virtual by CActive;</span>
<a name="l00121"></a>00121           <span class="comment">// implementation provided by this class,</span>
<a name="l00122"></a>00122         <span class="keywordtype">void</span> RunL();
<a name="l00123"></a>00123 
<a name="l00124"></a>00124           <span class="comment">// Called from RunL() - an implementation must be provided</span>
<a name="l00125"></a>00125           <span class="comment">// by derived classes to handle the completed request</span>
<a name="l00126"></a>00126         <span class="keyword">virtual</span> <span class="keywordtype">void</span> ProcessKeyPress(TChar aChar) = 0; 
<a name="l00127"></a>00127           
<a name="l00128"></a>00128 <span class="keyword">protected</span>:
<a name="l00129"></a>00129           <span class="comment">// Data members defined by this class</span>
<a name="l00130"></a>00130         CConsoleBase* iConsole; <span class="comment">// A console for reading from</span>
<a name="l00131"></a>00131         };
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 
<a name="l00135"></a>00135 <span class="comment">//</span>
<a name="l00136"></a>00136 <span class="comment">// -----&gt; CWriteKeyProcessor (definition)</span>
<a name="l00137"></a>00137 <span class="comment">//</span>
<a name="l00138"></a>00138 <span class="comment">// This class is derived from CActiveConsole. </span>
<a name="l00139"></a>00139 <span class="comment">// Request handling: accepts input from the keyboard and outputs it </span>
<a name="l00140"></a>00140 <span class="comment">// to the console.</span>
<a name="l00141"></a>00141 <span class="comment">//</span>
<a name="l00143"></a>00143 <span class="comment"></span><span class="keyword">class </span>CWriteKeyProcessor : <span class="keyword">public</span> CActiveConsole
<a name="l00144"></a>00144         {
<a name="l00145"></a>00145 <span class="keyword">public</span>:
<a name="l00146"></a>00146           <span class="comment">// Construction</span>
<a name="l00147"></a>00147         CWriteKeyProcessor(CConsoleBase* aConsole);
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 <span class="keyword">public</span>:
<a name="l00150"></a>00150           <span class="comment">// Static constuction</span>
<a name="l00151"></a>00151         <span class="keyword">static</span> CWriteKeyProcessor *NewLC (CConsoleBase* aConsole);
<a name="l00152"></a>00152         <span class="keyword">static</span> CWriteKeyProcessor *NewL(CConsoleBase* aConsole);
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 <span class="keyword">public</span>:
<a name="l00155"></a>00155           <span class="comment">// Service request</span>
<a name="l00156"></a>00156         <span class="keywordtype">void</span> ProcessKeyPress(TChar aChar);
<a name="l00157"></a>00157         };
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 
<a name="l00161"></a>00161 <span class="comment">//</span>
<a name="l00162"></a>00162 <span class="comment">// -----&gt; CTimedMessenger (implementation)</span>
<a name="l00163"></a>00163 <span class="comment">//</span>
<a name="l00165"></a>00165 <span class="comment"></span>CTimedMessenger::CTimedMessenger()
<a name="l00166"></a>00166         : CTimer(CActive::EPriorityStandard)
<a name="l00167"></a>00167           <span class="comment">// Construct standard-priority active object</span>
<a name="l00168"></a>00168         {};
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 CTimedMessenger* CTimedMessenger::NewLC(<span class="keyword">const</span> TDesC&amp; aGreeting,
<a name="l00171"></a>00171                                                                                 TInt aTicksRequested,
<a name="l00172"></a>00172                                                                                 TInt aTicksInterval
<a name="l00173"></a>00173                                                                            )
<a name="l00174"></a>00174         {
<a name="l00175"></a>00175         CTimedMessenger* <span class="keyword">self</span>=<span class="keyword">new</span> (ELeave) CTimedMessenger;
<a name="l00176"></a>00176         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00177"></a>00177         <span class="keyword">self</span>-&gt;ConstructL(aGreeting,aTicksRequested,aTicksInterval);
<a name="l00178"></a>00178         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00179"></a>00179         }
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 CTimedMessenger* CTimedMessenger::NewL(<span class="keyword">const</span> TDesC&amp; aGreeting,
<a name="l00182"></a>00182                                                                    TInt aTicksRequested,
<a name="l00183"></a>00183                                                                            TInt aTicksInterval
<a name="l00184"></a>00184                                                                           )
<a name="l00185"></a>00185         {
<a name="l00186"></a>00186         CTimedMessenger* <span class="keyword">self</span> = <a class="code" href="class_c_thread_server.html#a7c41592480f2c412599c332f52a61347">NewLC</a>(aGreeting,aTicksRequested,aTicksInterval);
<a name="l00187"></a>00187         CleanupStack::Pop();
<a name="l00188"></a>00188         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00189"></a>00189         }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 <span class="keywordtype">void</span> CTimedMessenger::ConstructL(<span class="keyword">const</span> TDesC&amp; aGreeting,
<a name="l00192"></a>00192                                                                  TInt aTicksRequested,
<a name="l00193"></a>00193                                                                  TInt aTicksInterval
<a name="l00194"></a>00194                                                                 )
<a name="l00195"></a>00195         {
<a name="l00196"></a>00196           <span class="comment">// Base class second-phase construction.</span>
<a name="l00197"></a>00197         CTimer::ConstructL();
<a name="l00198"></a>00198           <span class="comment">// Set members from arguments</span>
<a name="l00199"></a>00199         iGreeting       = aGreeting;       <span class="comment">// Set greeting text.</span>
<a name="l00200"></a>00200         iTicksRequested = aTicksRequested; <span class="comment">// Ticks requested</span>
<a name="l00201"></a>00201         iTicksInterval  = aTicksInterval;  <span class="comment">// Interval between ticks</span>
<a name="l00202"></a>00202           <span class="comment">// Add active object to active scheduler</span>
<a name="l00203"></a>00203         CActiveScheduler::Add(<span class="keyword">this</span>); 
<a name="l00204"></a>00204         }
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 CTimedMessenger::~CTimedMessenger()
<a name="l00208"></a>00208         {
<a name="l00209"></a>00209           <span class="comment">// Make sure we&#39;re cancelled</span>
<a name="l00210"></a>00210         Cancel();
<a name="l00211"></a>00211         }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 <span class="keywordtype">void</span> CTimedMessenger::DoCancel()
<a name="l00214"></a>00214         {
<a name="l00215"></a>00215           <span class="comment">// Base class</span>
<a name="l00216"></a>00216         CTimer::DoCancel(); 
<a name="l00217"></a>00217           <span class="comment">// Reset this variable - needed if the object is re-activated later</span>
<a name="l00218"></a>00218         iTicksDone = 0;
<a name="l00219"></a>00219           <span class="comment">// Tell user</span>
<a name="l00220"></a>00220         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgCancelled,<span class="stringliteral">&quot;Outstanding Messenger request cancelled\n&quot;</span>);
<a name="l00221"></a>00221         console-&gt;Printf(KMsgCancelled); 
<a name="l00222"></a>00222         }
<a name="l00223"></a>00223 
<a name="l00224"></a>00224 <span class="keywordtype">void</span> CTimedMessenger::IssueRequest()
<a name="l00225"></a>00225         {
<a name="l00226"></a>00226           <span class="comment">// There should never be an outstanding request at this point.</span>
<a name="l00227"></a>00227         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgAlreadyActive,<span class="stringliteral">&quot;Is already Active&quot;</span>);
<a name="l00228"></a>00228         __ASSERT_ALWAYS(!IsActive(),User::Panic(KMsgAlreadyActive,EPanicAlreadyActive));
<a name="l00229"></a>00229           <span class="comment">// Request another wait</span>
<a name="l00230"></a>00230         CTimer::After( iTicksInterval*1000000);
<a name="l00231"></a>00231         }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 <span class="keywordtype">void</span> CTimedMessenger::RunL()
<a name="l00234"></a>00234         {
<a name="l00235"></a>00235           <span class="comment">// Handle request completion</span>
<a name="l00236"></a>00236           <span class="comment">// One more tick done</span>
<a name="l00237"></a>00237         iTicksDone++;
<a name="l00238"></a>00238           <span class="comment">// Print greeting</span>
<a name="l00239"></a>00239         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatString1,<span class="stringliteral">&quot;%S \n&quot;</span>);
<a name="l00240"></a>00240         console-&gt;Printf(KFormatString1,&amp;iGreeting);
<a name="l00241"></a>00241           <span class="comment">// Issue new request, or stop if we have reached the limit</span>
<a name="l00242"></a>00242         <span class="keywordflow">if</span> (iTicksDone  &lt; iTicksRequested)
<a name="l00243"></a>00243                 {
<a name="l00244"></a>00244                 IssueRequest();
<a name="l00245"></a>00245                 }
<a name="l00246"></a>00246         <span class="keywordflow">else</span>
<a name="l00247"></a>00247                 {
<a name="l00248"></a>00248                 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgFinished,<span class="stringliteral">&quot;Messenger finished \n&quot;</span>);
<a name="l00249"></a>00249                 console-&gt;Printf(KMsgFinished);
<a name="l00250"></a>00250                   <span class="comment">// Reset this variable - needed if the object is re-activated later</span>
<a name="l00251"></a>00251                 iTicksDone=0;
<a name="l00252"></a>00252                   <span class="comment">// Can now stop the active scheduler</span>
<a name="l00253"></a>00253                 CActiveScheduler::Stop();
<a name="l00254"></a>00254                 }
<a name="l00255"></a>00255         }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 
<a name="l00259"></a>00259 <span class="comment">//</span>
<a name="l00260"></a>00260 <span class="comment">// -----&gt; CExampleScheduler (implementation)</span>
<a name="l00261"></a>00261 <span class="comment">//</span>
<a name="l00263"></a>00263 <span class="comment"></span><span class="keywordtype">void</span> CExampleScheduler::Error(TInt aError)<span class="keyword"> const</span>
<a name="l00264"></a>00264 <span class="keyword">        </span>{
<a name="l00265"></a>00265         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgSchedErr,<span class="stringliteral">&quot;CExampleScheduler-error&quot;</span>);
<a name="l00266"></a>00266         User::Panic(KMsgSchedErr,aError);
<a name="l00267"></a>00267         }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269 
<a name="l00271"></a>00271 <span class="comment">//</span>
<a name="l00272"></a>00272 <span class="comment">// -----&gt; CActiveConsole (implementation)</span>
<a name="l00273"></a>00273 <span class="comment">//</span>
<a name="l00275"></a>00275 <span class="comment"></span>CActiveConsole::CActiveConsole( CConsoleBase* aConsole) 
<a name="l00276"></a>00276         : CActive(CActive::EPriorityUserInput)
<a name="l00277"></a>00277           <span class="comment">// Construct high-priority active object</span>
<a name="l00278"></a>00278         {
<a name="l00279"></a>00279         iConsole = aConsole;
<a name="l00280"></a>00280         }
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 <span class="keywordtype">void</span> CActiveConsole::ConstructL()
<a name="l00283"></a>00283         {
<a name="l00284"></a>00284           <span class="comment">// Add to active scheduler</span>
<a name="l00285"></a>00285         CActiveScheduler::Add(<span class="keyword">this</span>);
<a name="l00286"></a>00286         }
<a name="l00287"></a>00287 
<a name="l00288"></a>00288 CActiveConsole::~CActiveConsole()
<a name="l00289"></a>00289         {
<a name="l00290"></a>00290         <span class="comment">// Make sure we&#39;re cancelled</span>
<a name="l00291"></a>00291         Cancel();
<a name="l00292"></a>00292         }
<a name="l00293"></a>00293 
<a name="l00294"></a>00294 <span class="keywordtype">void</span>  CActiveConsole::DoCancel()
<a name="l00295"></a>00295         {
<a name="l00296"></a>00296         iConsole-&gt;ReadCancel();
<a name="l00297"></a>00297         }
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 <span class="keywordtype">void</span>  CActiveConsole::RunL()
<a name="l00300"></a>00300         {
<a name="l00301"></a>00301           <span class="comment">// Handle completed request</span>
<a name="l00302"></a>00302         ProcessKeyPress(TChar(iConsole-&gt;KeyCode()));
<a name="l00303"></a>00303         }
<a name="l00304"></a>00304 
<a name="l00305"></a>00305 <span class="keywordtype">void</span> CActiveConsole::RequestCharacter()
<a name="l00306"></a>00306         {
<a name="l00307"></a>00307           <span class="comment">// A request is issued to the CConsoleBase to accept a</span>
<a name="l00308"></a>00308           <span class="comment">// character from the keyboard.</span>
<a name="l00309"></a>00309         iConsole-&gt;Read(iStatus); 
<a name="l00310"></a>00310         SetActive();
<a name="l00311"></a>00311         }
<a name="l00312"></a>00312 
<a name="l00313"></a>00313 
<a name="l00315"></a>00315 <span class="comment">//</span>
<a name="l00316"></a>00316 <span class="comment">// -----&gt; CWriteKeyProcessor (implementation)</span>
<a name="l00317"></a>00317 <span class="comment">//</span>
<a name="l00319"></a>00319 <span class="comment"></span>CWriteKeyProcessor::CWriteKeyProcessor(CConsoleBase* aConsole)
<a name="l00320"></a>00320         : CActiveConsole(aConsole)
<a name="l00321"></a>00321           
<a name="l00322"></a>00322         {};
<a name="l00323"></a>00323 
<a name="l00324"></a>00324 CWriteKeyProcessor* CWriteKeyProcessor::NewLC(CConsoleBase* aConsole)
<a name="l00325"></a>00325         {
<a name="l00326"></a>00326         CWriteKeyProcessor* <span class="keyword">self</span>=<span class="keyword">new</span> (ELeave) CWriteKeyProcessor(aConsole);
<a name="l00327"></a>00327         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00328"></a>00328         <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00329"></a>00329         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00330"></a>00330         }
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 CWriteKeyProcessor* CWriteKeyProcessor::NewL(CConsoleBase* aConsole)
<a name="l00333"></a>00333         {
<a name="l00334"></a>00334         CWriteKeyProcessor* <span class="keyword">self</span>=<a class="code" href="class_c_thread_server.html#a7c41592480f2c412599c332f52a61347">NewLC</a>(aConsole);
<a name="l00335"></a>00335         CleanupStack::Pop();
<a name="l00336"></a>00336         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00337"></a>00337         }
<a name="l00338"></a>00338 
<a name="l00339"></a>00339 <span class="keywordtype">void</span> CWriteKeyProcessor::ProcessKeyPress(TChar aChar)
<a name="l00340"></a>00340         {
<a name="l00341"></a>00341           <span class="comment">// &quot;Esc&quot; character prints a new line and stops the scheduler</span>
<a name="l00342"></a>00342         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextEsc,<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00343"></a>00343         <span class="keywordflow">if</span> (aChar == EKeyEscape)
<a name="l00344"></a>00344                 {
<a name="l00345"></a>00345                 iConsole-&gt;Printf(KTextEsc);
<a name="l00346"></a>00346                 CActiveScheduler::Stop();
<a name="l00347"></a>00347                 <span class="keywordflow">return</span>;
<a name="l00348"></a>00348                 }
<a name="l00349"></a>00349 
<a name="l00350"></a>00350           <span class="comment">// &quot;Enter&quot; prints a new line character</span>
<a name="l00351"></a>00351           <span class="comment">// An alphabetic or space is printed as a character;</span>
<a name="l00352"></a>00352           <span class="comment">// anything else is printed as an integer.</span>
<a name="l00353"></a>00353         <span class="keywordflow">if</span> (aChar == EKeyEnter)
<a name="l00354"></a>00354                 iConsole-&gt;Printf(KTextEsc);
<a name="l00355"></a>00355         <span class="keywordflow">else</span>
<a name="l00356"></a>00356                 {
<a name="l00357"></a>00357                 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatString2,<span class="stringliteral">&quot;%c&quot;</span>);
<a name="l00358"></a>00358                 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatString3,<span class="stringliteral">&quot;%d&quot;</span>);
<a name="l00359"></a>00359                 <span class="keywordflow">if</span> (aChar.IsAlphaDigit()|| aChar.IsSpace())
<a name="l00360"></a>00360                         iConsole-&gt;Printf(KFormatString2,TUint(aChar));
<a name="l00361"></a>00361                 <span class="keywordflow">else</span>
<a name="l00362"></a>00362                         iConsole-&gt;Printf(KFormatString3,TUint(aChar));
<a name="l00363"></a>00363                 }
<a name="l00364"></a>00364 
<a name="l00365"></a>00365           <span class="comment">// Issue another request </span>
<a name="l00366"></a>00366         RequestCharacter();
<a name="l00367"></a>00367         }
<a name="l00368"></a>00368 
<a name="l00369"></a>00369 
<a name="l00371"></a>00371 <span class="comment">//</span>
<a name="l00372"></a>00372 <span class="comment">// Do the example</span>
<a name="l00373"></a>00373 <span class="comment">//</span>
<a name="l00375"></a>00375 <span class="comment"></span>LOCAL_C <span class="keywordtype">void</span> doExampleL()
<a name="l00376"></a>00376     {
<a name="l00377"></a>00377           <span class="comment">// Construct and install the active scheduler</span>
<a name="l00378"></a>00378         CExampleScheduler*  exampleScheduler = <span class="keyword">new</span> (ELeave) CExampleScheduler;
<a name="l00379"></a>00379 
<a name="l00380"></a>00380           <span class="comment">// Push onto the cleanup stack</span>
<a name="l00381"></a>00381         CleanupStack::PushL(exampleScheduler);
<a name="l00382"></a>00382          
<a name="l00383"></a>00383           <span class="comment">// Install as the active scheduler</span>
<a name="l00384"></a>00384         CActiveScheduler::Install(exampleScheduler);
<a name="l00385"></a>00385 
<a name="l00386"></a>00386           <span class="comment">// Create a CWriteKeyProcessor active object</span>
<a name="l00387"></a>00387         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTitleMsg,<span class="stringliteral">&quot;A single CWriteKeyProcessor active object.\nIt accepts and prints keyboard input to the console.\nPress ESC to end.\n\n&quot;</span>);
<a name="l00388"></a>00388         console-&gt;Printf(KTitleMsg);
<a name="l00389"></a>00389         CWriteKeyProcessor* keyProcesser = CWriteKeyProcessor::NewLC(console);
<a name="l00390"></a>00390 
<a name="l00391"></a>00391           <span class="comment">// Issue the first request</span>
<a name="l00392"></a>00392         keyProcesser-&gt;RequestCharacter();
<a name="l00393"></a>00393 
<a name="l00394"></a>00394           <span class="comment">// Main part of program is a wait loop</span>
<a name="l00395"></a>00395           <span class="comment">// This function completes when the scheduler stops</span>
<a name="l00396"></a>00396         CActiveScheduler::Start();
<a name="l00397"></a>00397 
<a name="l00398"></a>00398           <span class="comment">// Remove from the cleanup stack and destroy:</span>
<a name="l00399"></a>00399           <span class="comment">// 1. the CWriteKeyProcessor active object</span>
<a name="l00400"></a>00400           <span class="comment">// 2. exampleScheduler</span>
<a name="l00401"></a>00401         CleanupStack::PopAndDestroy(2); 
<a name="l00402"></a>00402         }
<a name="l00403"></a>00403 
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

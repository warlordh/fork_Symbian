<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Base/IPC/pubsub/subscribestd.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Base/IPC/pubsub/subscribestd.cpp</h1><a href="subscribestd_8cpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2008-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// Demonstrates the standard state pattern of subscribing to a byte-array property</span>
<a name="l00015"></a>00015 <span class="comment">//</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="subscribe_8h.html">subscribe.h</a>&quot;</span>
<a name="l00024"></a>00024 LOCAL_D CConsoleBase* console;
<a name="l00025"></a>00025 
<a name="l00029"></a>00029 CArrayPropertyWatch::CArrayPropertyWatch():CActive(EPriority)
<a name="l00030"></a>00030         {
<a name="l00031"></a>00031         }
<a name="l00032"></a>00032 
<a name="l00037"></a>00037 <span class="keywordtype">void</span> CArrayPropertyWatch::ConstructL(CConsoleBase* aConsole)
<a name="l00038"></a>00038         {
<a name="l00039"></a>00039         User::LeaveIfError(iProperty.Attach(KMyPropertyCat,KMyPropertyName));
<a name="l00040"></a>00040         iConsole = aConsole;
<a name="l00041"></a>00041         CActiveScheduler::Add(<span class="keyword">this</span>);
<a name="l00042"></a>00042         }
<a name="l00043"></a>00043 
<a name="l00049"></a>00049 <a class="code" href="class_c_array_property_watch.html">CArrayPropertyWatch</a>* <a class="code" href="class_c_array_property_watch.html#a54b576da65400b50b8845f0ea8ad5c8e">CArrayPropertyWatch::NewL</a>(CConsoleBase* aConsole)
<a name="l00050"></a>00050         {
<a name="l00051"></a>00051         <a class="code" href="class_c_array_property_watch.html">CArrayPropertyWatch</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_array_property_watch.html">CArrayPropertyWatch</a>;
<a name="l00052"></a>00052         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00053"></a>00053         <span class="keyword">self</span>-&gt;ConstructL(aConsole);
<a name="l00054"></a>00054         CleanupStack::Pop(<span class="keyword">self</span>);
<a name="l00055"></a>00055         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00056"></a>00056         }
<a name="l00057"></a>00057 
<a name="l00061"></a>00061 CArrayPropertyWatch::~CArrayPropertyWatch()
<a name="l00062"></a>00062         {
<a name="l00063"></a>00063         iProperty.Close();
<a name="l00064"></a>00064         Cancel();
<a name="l00065"></a>00065         }
<a name="l00066"></a>00066 
<a name="l00070"></a>00070 <span class="keywordtype">void</span> CArrayPropertyWatch::DoCancel()
<a name="l00071"></a>00071         {
<a name="l00072"></a>00072         iProperty.Cancel();
<a name="l00073"></a>00073         }
<a name="l00074"></a>00074 
<a name="l00079"></a>00079 <span class="keywordtype">void</span> CArrayPropertyWatch::RunL()
<a name="l00080"></a>00080         {
<a name="l00081"></a>00081         <span class="comment">// Get the value of the property</span>
<a name="l00082"></a>00082         TBuf16&lt;KArraySize&gt; buf;
<a name="l00083"></a>00083         TInt err = iProperty.Get(buf);
<a name="l00084"></a>00084         <span class="keywordflow">if</span>(err == KErrNotFound)
<a name="l00085"></a>00085                 {
<a name="l00086"></a>00086                 <span class="comment">// Leave the function if the property is not defined</span>
<a name="l00087"></a>00087                 CActiveScheduler::Stop();
<a name="l00088"></a>00088                 User::Leave(err);
<a name="l00089"></a>00089                 }
<a name="l00090"></a>00090         <span class="keywordflow">else</span>
<a name="l00091"></a>00091                 {
<a name="l00092"></a>00092                 <span class="keywordflow">if</span>(buf == KStop)
<a name="l00093"></a>00093                         {
<a name="l00094"></a>00094                         CActiveScheduler::Stop();
<a name="l00095"></a>00095                         }
<a name="l00096"></a>00096                 <span class="keywordflow">else</span>
<a name="l00097"></a>00097                         {
<a name="l00098"></a>00098                         <span class="comment">// Re-subscribe to the property</span>
<a name="l00099"></a>00099                         <a class="code" href="class_c_array_property_watch.html#afd703433c800398b4e9b82aa348a3164">WatchL</a>();
<a name="l00100"></a>00100                         }
<a name="l00101"></a>00101                 }
<a name="l00102"></a>00102         }
<a name="l00103"></a>00103 
<a name="l00108"></a>00108 <span class="keywordtype">void</span> CArrayPropertyWatch::PrintProperty(TDes16&amp; aBuf)
<a name="l00109"></a>00109         {
<a name="l00110"></a>00110         iConsole-&gt;Printf(KTxtArray);
<a name="l00111"></a>00111         TInt bufLength = aBuf.Length();
<a name="l00112"></a>00112         <span class="keywordflow">for</span>(TInt ix = 0; ix &lt; bufLength;ix++)
<a name="l00113"></a>00113                 {
<a name="l00114"></a>00114                 iConsole-&gt;Printf(KTxtArrayElement,aBuf[ix]);
<a name="l00115"></a>00115                 }
<a name="l00116"></a>00116         iConsole-&gt;Printf(KTxtNewLine);
<a name="l00117"></a>00117         }
<a name="l00118"></a>00118 
<a name="l00122"></a><a class="code" href="class_c_array_property_watch.html#afd703433c800398b4e9b82aa348a3164">00122</a> <span class="keywordtype">void</span> <a class="code" href="class_c_array_property_watch.html#afd703433c800398b4e9b82aa348a3164">CArrayPropertyWatch::WatchL</a>()
<a name="l00123"></a>00123         {
<a name="l00124"></a>00124         <span class="comment">// Get the value of the property</span>
<a name="l00125"></a>00125         TBuf16&lt;KArraySize&gt; buf;
<a name="l00126"></a>00126         TInt err = iProperty.Get(buf);
<a name="l00127"></a>00127         <span class="keywordflow">if</span>(err == KErrNotFound)
<a name="l00128"></a>00128                 {
<a name="l00129"></a>00129                 <span class="comment">// Leave if the property is not found</span>
<a name="l00130"></a>00130                 User::Leave(err);
<a name="l00131"></a>00131                 }
<a name="l00132"></a>00132         PrintProperty(buf);
<a name="l00133"></a>00133         <span class="comment">// Subscribe to the property</span>
<a name="l00134"></a>00134         iProperty.Subscribe(iStatus);
<a name="l00135"></a>00135         <span class="comment">// Issue an outstanding request</span>
<a name="l00136"></a>00136         SetActive();
<a name="l00137"></a>00137         }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 <span class="keywordtype">void</span> DoExampleL()
<a name="l00140"></a>00140         {
<a name="l00141"></a>00141         CActiveScheduler* scheduler = <span class="keyword">new</span> (ELeave) CActiveScheduler();
<a name="l00142"></a>00142         CleanupStack::PushL(scheduler);
<a name="l00143"></a>00143         CActiveScheduler::Install(scheduler);
<a name="l00144"></a>00144 
<a name="l00145"></a>00145         console-&gt;Printf(KTxtSpecSt);
<a name="l00146"></a>00146 
<a name="l00147"></a>00147         <span class="comment">// Create the byte-array property watch active object</span>
<a name="l00148"></a>00148         <a class="code" href="class_c_array_property_watch.html">CArrayPropertyWatch</a>* obj = <a class="code" href="class_c_array_property_watch.html#a54b576da65400b50b8845f0ea8ad5c8e">CArrayPropertyWatch::NewL</a>(console);
<a name="l00149"></a>00149         CleanupStack::PushL(obj);
<a name="l00150"></a>00150 
<a name="l00151"></a>00151         <span class="comment">// Subscribe to the property and start the scheduler</span>
<a name="l00152"></a>00152         obj-&gt;<a class="code" href="class_c_array_property_watch.html#afd703433c800398b4e9b82aa348a3164">WatchL</a>();
<a name="l00153"></a>00153         CActiveScheduler::Start();
<a name="l00154"></a>00154 
<a name="l00155"></a>00155         CleanupStack::PopAndDestroy(obj);
<a name="l00156"></a>00156         CleanupStack::PopAndDestroy(scheduler);
<a name="l00157"></a>00157         }
<a name="l00158"></a>00158 
<a name="l00159"></a><a class="code" href="subscribestd_8cpp.html#a0f358e9c4355138f629b8c4f37310295">00159</a> GLDEF_C TInt E32Main()
<a name="l00160"></a>00160         {
<a name="l00161"></a>00161         __UHEAP_MARK;
<a name="l00162"></a>00162         CTrapCleanup* cleanup = CTrapCleanup::New();
<a name="l00163"></a>00163 
<a name="l00164"></a>00164         TRAPD(createError, console = Console::NewL(KTextConsoleTitle, TSize(KConsFullScreen,KConsFullScreen)));
<a name="l00165"></a>00165         <span class="keywordflow">if</span> (createError)
<a name="l00166"></a>00166                 <span class="keywordflow">return</span> createError;
<a name="l00167"></a>00167 
<a name="l00168"></a>00168         TRAPD(mainError, DoExampleL());
<a name="l00169"></a>00169         <span class="keywordflow">if</span> (mainError)
<a name="l00170"></a>00170                 console-&gt;Printf(KTextFailed, mainError);
<a name="l00171"></a>00171         console-&gt;Printf(KTextPressAnyKey);
<a name="l00172"></a>00172         console-&gt;Getch();
<a name="l00173"></a>00173 
<a name="l00174"></a>00174         <span class="keyword">delete</span> console;
<a name="l00175"></a>00175         <span class="keyword">delete</span> cleanup;
<a name="l00176"></a>00176         __UHEAP_MARKEND;
<a name="l00177"></a>00177         <span class="keywordflow">return</span> KErrNone;
<a name="l00178"></a>00178         }
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

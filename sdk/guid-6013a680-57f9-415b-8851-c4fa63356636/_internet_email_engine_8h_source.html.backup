<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/ForumNokia/InternetEmail/inc/InternetEmailEngine.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/ForumNokia/InternetEmail/inc/InternetEmailEngine.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright © 2008 Nokia Corporation.</span>
<a name="l00003"></a>00003 <span class="comment"> */</span>
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 
<a name="l00006"></a>00006 <span class="preprocessor">#ifndef INTERNETEMAILENGINE_H</span>
<a name="l00007"></a>00007 <span class="preprocessor"></span><span class="preprocessor">#define INTERNETEMAILENGINE_H</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span>
<a name="l00009"></a>00009 <span class="comment">// INCLUDES</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;e32std.h&gt;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;e32base.h&gt;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;msvapi.h&gt;</span>     <span class="comment">//of MsvSession</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &lt;imapset.h&gt;</span>
<a name="l00014"></a>00014 <span class="preprocessor">#include &lt;pop3set.h&gt;</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;msventry.h&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;msvids.h&gt;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;mtclreg.h&gt;</span>    <span class="comment">// for CClientMtmRegistry</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;mtclbase.h&gt;</span>   <span class="comment">// for CBaseMtm</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;mtmuibas.h&gt;</span>   <span class="comment">// for CBaseMtmUi</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;mtuireg.h&gt;</span>        <span class="comment">// for CMtmUiRegistry</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;miutset.h&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;popcmtm.h&gt;</span>    <span class="comment">// for POP( commmands )</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;impcmtm.h&gt;</span>    <span class="comment">// for IMAP( commands )</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;internetemail.hrh&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="comment">// FORWARD DECLARATIONS</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">// CONSTANTS</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="comment">// not needed in one protocol implementation</span>
<a name="l00034"></a>00034 <span class="keyword">enum</span> TProtocolType
<a name="l00035"></a>00035     {
<a name="l00036"></a>00036     EProtocolNULL,
<a name="l00037"></a>00037     EProtocolPop3,
<a name="l00038"></a>00038     EProtocolImap4
<a name="l00039"></a>00039     };
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="keyword">enum</span> TInternetEmailEngineEvent
<a name="l00042"></a>00042     {
<a name="l00043"></a>00043     ERemoteCountChanged,
<a name="l00044"></a>00044     };
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="comment">// CLASS DECLARATION</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="comment">/*</span>
<a name="l00049"></a>00049 <span class="comment">* ============================================================================</span>
<a name="l00050"></a>00050 <span class="comment">*  Name     : MInternetEmailEngineObserver from InternetEmailEngine.h</span>
<a name="l00051"></a>00051 <span class="comment">*  Part of  : InternetEmail</span>
<a name="l00052"></a>00052 <span class="comment">*  Created  : 09/11/2003 by Forum Nokia</span>
<a name="l00053"></a>00053 <span class="comment">*  Implementation notes:</span>
<a name="l00054"></a>00054 <span class="comment">*       Common observer which issues events to listening UI elements</span>
<a name="l00055"></a>00055 <span class="comment">*</span>
<a name="l00056"></a>00056 <span class="comment">*  Version  : 1.0</span>
<a name="l00057"></a>00057 <span class="comment">*  Copyright: Nokia Corporation</span>
<a name="l00058"></a>00058 <span class="comment">* ============================================================================</span>
<a name="l00059"></a>00059 <span class="comment">*/</span>
<a name="l00060"></a>00060 
<a name="l00061"></a><a class="code" href="class_m_internet_email_engine_observer.html">00061</a> <span class="keyword">class </span><a class="code" href="class_m_internet_email_engine_observer.html">MInternetEmailEngineObserver</a>
<a name="l00062"></a>00062     {
<a name="l00063"></a>00063 <span class="keyword">public</span>:
<a name="l00064"></a>00064     <span class="keyword">virtual</span> <span class="keywordtype">void</span> HandleEngineChangedEventL(TInternetEmailEngineEvent aEvent)=0;
<a name="l00065"></a>00065     };
<a name="l00066"></a>00066 <span class="comment">/*</span>
<a name="l00067"></a>00067 <span class="comment">* ============================================================================</span>
<a name="l00068"></a>00068 <span class="comment">*  Name     : CInternetEmailEngine from InternetEmailEngine.h</span>
<a name="l00069"></a>00069 <span class="comment">*  Part of  : InternetEmail</span>
<a name="l00070"></a>00070 <span class="comment">*  Created  : 09/11/2003 by Forum Nokia</span>
<a name="l00071"></a>00071 <span class="comment">*  Implementation notes:</span>
<a name="l00072"></a>00072 <span class="comment">*       Statemachine which handles events common for both</span>
<a name="l00073"></a>00073 <span class="comment">*       implemented protocols IMAP and POP. Note the selection</span>
<a name="l00074"></a>00074 <span class="comment">*       which protocol to use is one time only and load and store</span>
<a name="l00075"></a>00075 <span class="comment">*       functionality have been cutted off for maintaining focus</span>
<a name="l00076"></a>00076 <span class="comment">*       on basic receive-and-handle-with-mtm-generic-view functionality.</span>
<a name="l00077"></a>00077 <span class="comment">*</span>
<a name="l00078"></a>00078 <span class="comment">*  Version  : 1.0</span>
<a name="l00079"></a>00079 <span class="comment">*  Copyright: Nokia Corporation</span>
<a name="l00080"></a>00080 <span class="comment">* ============================================================================</span>
<a name="l00081"></a>00081 <span class="comment">*/</span>
<a name="l00082"></a><a class="code" href="class_c_internet_email_engine.html">00082</a> <span class="keyword">class </span><a class="code" href="class_c_internet_email_engine.html">CInternetEmailEngine</a> : <span class="keyword">public</span> CActive, <span class="keyword">public</span> MMsvSessionObserver
<a name="l00083"></a>00083     {
<a name="l00084"></a>00084     <span class="keyword">public</span>: <span class="comment">// // Constructors and destructor</span>
<a name="l00085"></a>00085         <span class="keyword">static</span> <a class="code" href="class_c_internet_email_engine.html">CInternetEmailEngine</a>* NewL(<a class="code" href="class_m_internet_email_engine_observer.html">MInternetEmailEngineObserver</a>&amp; aObserver);
<a name="l00086"></a>00086         <span class="comment">//static CInternetEmailEngine* NewLC();</span>
<a name="l00087"></a>00087         ~<a class="code" href="class_c_internet_email_engine.html">CInternetEmailEngine</a>();
<a name="l00088"></a>00088 
<a name="l00089"></a>00089     <span class="keyword">public</span>: <span class="comment">// New functions</span>
<a name="l00090"></a>00090         <span class="comment">// MAIN USER API</span>
<a name="l00091"></a>00091 
<a name="l00092"></a>00092         <span class="comment">/*</span>
<a name="l00093"></a>00093 <span class="comment">        * RemoteOpenEmailL(TInt aIndex)</span>
<a name="l00094"></a>00094 <span class="comment">        *</span>
<a name="l00095"></a>00095 <span class="comment">        * Uses generic messaging architecture and opens selected message entry.</span>
<a name="l00096"></a>00096 <span class="comment">        * May generate dial-up connection to fetch message body.</span>
<a name="l00097"></a>00097 <span class="comment">        *</span>
<a name="l00098"></a>00098 <span class="comment">        * @param TInt aIndex        index to message entry to be opened</span>
<a name="l00099"></a>00099 <span class="comment">        *</span>
<a name="l00100"></a>00100 <span class="comment">        */</span>
<a name="l00101"></a>00101         <span class="keywordtype">void</span>  RemoteOpenEmailL( <span class="keyword">const</span> TInt aIndex);
<a name="l00102"></a>00102 
<a name="l00103"></a>00103         <span class="comment">/*</span>
<a name="l00104"></a>00104 <span class="comment">        * void  RemoteFetchL()</span>
<a name="l00105"></a>00105 <span class="comment">        *</span>
<a name="l00106"></a>00106 <span class="comment">        * Initiates remote mailbox fetch process</span>
<a name="l00107"></a>00107 <span class="comment">        *</span>
<a name="l00108"></a>00108 <span class="comment">        */</span>
<a name="l00109"></a>00109         <span class="keywordtype">void</span>  RemoteFetchL();
<a name="l00110"></a>00110 
<a name="l00111"></a>00111         <span class="comment">/*</span>
<a name="l00112"></a>00112 <span class="comment">        * void  SetProtocolL( const TInt aType );</span>
<a name="l00113"></a>00113 <span class="comment">        *</span>
<a name="l00114"></a>00114 <span class="comment">        * @param TInt aType type enumeration of selected type</span>
<a name="l00115"></a>00115 <span class="comment">        */</span>
<a name="l00116"></a>00116         <span class="keywordtype">void</span>  SetProtocolL( <span class="keyword">const</span> TInt aType ); <span class="comment">// not needed in one protocol implementation</span>
<a name="l00117"></a>00117         TBool IsProtocolSet();                  <span class="comment">// not needed in one protocol implementation</span>
<a name="l00118"></a>00118 
<a name="l00119"></a>00119         <span class="comment">// For view handling( see InternetEmailContainer )</span>
<a name="l00120"></a>00120         TPtrC RemoteEmailTextL( <span class="keyword">const</span> TInt aIndex);
<a name="l00121"></a>00121         TPtrC RemoteEmailSenderL( <span class="keyword">const</span> TInt aIndex);
<a name="l00122"></a>00122         TInt  RemoteEmailCount();
<a name="l00123"></a>00123 
<a name="l00124"></a>00124         TBool IsEngineReady();
<a name="l00125"></a>00125 
<a name="l00126"></a>00126         <span class="comment">/*</span>
<a name="l00127"></a>00127 <span class="comment">        * TBool CheckIfExistsL( const TInt typeenum )</span>
<a name="l00128"></a>00128 <span class="comment">        *   Checks if service entry( Email settings ) exists for</span>
<a name="l00129"></a>00129 <span class="comment">        *   given internet email protocol type.</span>
<a name="l00130"></a>00130 <span class="comment">        *</span>
<a name="l00131"></a>00131 <span class="comment">        * @param const TInt aTypeEnum   type enumeration of given protocol type</span>
<a name="l00132"></a>00132 <span class="comment">        * @return TBool ETrue           if protocol of given type exists</span>
<a name="l00133"></a>00133 <span class="comment">        *</span>
<a name="l00134"></a>00134 <span class="comment">        */</span>
<a name="l00135"></a>00135         TBool CheckIfExistsL( <span class="keyword">const</span> TInt aTypeEnum );
<a name="l00136"></a>00136 
<a name="l00137"></a>00137         <span class="keywordtype">void</span> CancelOperation();
<a name="l00138"></a>00138         <span class="keywordtype">void</span> Queue();
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="keyword">public</span>: <span class="comment">// Functions from base classes</span>
<a name="l00141"></a>00141         <span class="comment">// from CActive</span>
<a name="l00142"></a>00142         <span class="keywordtype">void</span> RunL();
<a name="l00143"></a>00143         <span class="keywordtype">void</span> DoCancel();
<a name="l00144"></a>00144         TInt RunError( <span class="keyword">const</span> TInt aError);
<a name="l00145"></a>00145 
<a name="l00146"></a>00146         <span class="comment">// from MMsvSessionObserver</span>
<a name="l00147"></a>00147         <span class="keywordtype">void</span> HandleSessionEventL(TMsvSessionEvent aEvent,TAny* aArg1,TAny* aArg2,TAny* aArg3);
<a name="l00148"></a>00148 
<a name="l00149"></a>00149     <span class="comment">// private</span>
<a name="l00150"></a>00150     <span class="keyword">private</span>:
<a name="l00151"></a>00151         <a class="code" href="class_c_internet_email_engine.html">CInternetEmailEngine</a>( <a class="code" href="class_m_internet_email_engine_observer.html">MInternetEmailEngineObserver</a>&amp; aObserver );
<a name="l00152"></a>00152         <span class="keywordtype">void</span> ConstructL();
<a name="l00153"></a>00153         <span class="keywordtype">void</span> CompleteConstructL();
<a name="l00154"></a>00154         <span class="keywordtype">void</span> DisplayMessageL( <span class="keyword">const</span> TMsvId &amp;aId );
<a name="l00155"></a>00155         TMsvId FindServiceL( <span class="keyword">const</span> TUid aType );
<a name="l00156"></a>00156         TMsvId FindFolderThenServiceL( <span class="keyword">const</span> TUid aType ); <span class="comment">// not needed in one protocol implementation</span>
<a name="l00157"></a>00157         <span class="keywordtype">void</span> MailCommandL( <span class="keyword">const</span> TInt aCommand, TDes8&amp; aParams );
<a name="l00158"></a>00158         <span class="keywordtype">void</span> LoadMtmL();
<a name="l00159"></a>00159         CBaseMtm* InstantiateClientMtmL( TMsvId aService, <span class="keyword">const</span> TUid aType );
<a name="l00160"></a>00160 
<a name="l00161"></a>00161         <span class="comment">//for update</span>
<a name="l00162"></a>00162         CMsvEntrySelection* UpdateEntriesL(<span class="keyword">const</span> TMsvId&amp; aServiceId);
<a name="l00163"></a>00163         <span class="keywordtype">void</span> UpdateRemoteCountL();
<a name="l00164"></a>00164 
<a name="l00165"></a>00165     <span class="comment">// private types</span>
<a name="l00166"></a>00166     <span class="keyword">private</span>:
<a name="l00167"></a>00167 
<a name="l00168"></a>00168     <span class="comment">// internal state indication</span>
<a name="l00169"></a>00169     <span class="keyword">enum</span> TInternalState
<a name="l00170"></a>00170         {
<a name="l00171"></a>00171         EInitialising,
<a name="l00172"></a>00172         EReadyButNeedsProtocol,
<a name="l00173"></a>00173         EReady,
<a name="l00174"></a>00174         EConnecting,
<a name="l00175"></a>00175         EFetching,      
<a name="l00176"></a>00176         EDisconnecting,
<a name="l00177"></a>00177         EDone,
<a name="l00178"></a>00178         ECanceling
<a name="l00179"></a>00179         };
<a name="l00180"></a>00180 
<a name="l00181"></a>00181     <span class="keyword">private</span>: <span class="comment">//Data</span>
<a name="l00182"></a>00182     <a class="code" href="class_m_internet_email_engine_observer.html">MInternetEmailEngineObserver</a>&amp; iObserver; <span class="comment">//informs ui when to react to entry changes</span>
<a name="l00183"></a>00183 
<a name="l00184"></a>00184     CMsvSession* iMsvSession; <span class="comment">//the server session itself, our highway to kernel space </span>
<a name="l00185"></a>00185     CClientMtmRegistry* iClientReg; <span class="comment">//registry used to find client mtm of given protocol type</span>
<a name="l00186"></a>00186     CMtmUiRegistry* iUiReg; <span class="comment">//registry used to instantiante views of given mtm</span>
<a name="l00187"></a>00187     CMsvOperation* iMsvOp;  <span class="comment">//long lasting email operation object, used e.g. for cancelling requests</span>
<a name="l00188"></a>00188 
<a name="l00189"></a>00189     TMsvId iServiceId;      <span class="comment">//service id of either protocol used e.g. as </span>
<a name="l00190"></a>00190     TMsvId iId;             <span class="comment">//id of the mailbox( POP ) or inbox( IMAP ) used as a root of messagelist</span>
<a name="l00191"></a>00191     TInternalState iState;  <span class="comment">//the state of the statemachine we implement by this engine</span>
<a name="l00192"></a>00192 
<a name="l00193"></a>00193     CMsvEntrySelection* iRemoteEntries; <span class="comment">//array of entries used also as mailcommmand argument</span>
<a name="l00194"></a>00194     TInt iRemoteCount;      <span class="comment">//count of message entries in given folder or mailbox</span>
<a name="l00195"></a>00195 
<a name="l00196"></a>00196     CBaseMtm* iMtm;         <span class="comment">//abstract mtm for use of both pop and imap </span>
<a name="l00197"></a>00197     CMsvEntry* iEntry;      <span class="comment">//current selected entry </span>
<a name="l00198"></a>00198 
<a name="l00199"></a>00199     <span class="comment">// next members not needed in one protocol implementation</span>
<a name="l00200"></a>00200     TBool iIsProtocolSet;   <span class="comment">//bool if protocol has been selected by user or not?</span>
<a name="l00201"></a>00201     TBool iHasImapInbox;    <span class="comment">//boot have we made folder sync and got inbox?</span>
<a name="l00202"></a>00202     TInt iProtocolType;     <span class="comment">//type of selected protocol, custom enumeration</span>
<a name="l00203"></a>00203     TUid iProtocolUid;      <span class="comment">//uid of selected protocol for easier abstraction</span>
<a name="l00204"></a>00204 
<a name="l00205"></a>00205     };
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 <span class="preprocessor">#endif</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span>
<a name="l00209"></a>00209 <span class="comment">// End of File</span>
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

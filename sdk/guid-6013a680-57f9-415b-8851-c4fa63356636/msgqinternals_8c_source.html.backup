<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/PIPS/opencmessagequeuelibraryex/engine/src/msgqinternals.c Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/PIPS/opencmessagequeuelibraryex/engine/src/msgqinternals.c</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &quot;<a class="code" href="msgqinternal_8h.html">MsgQInternal.h</a>&quot;</span>
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="comment">/* Declaration and definition of Internal Functions and data structures */</span>
<a name="l00015"></a>00015 <a class="code" href="struct_msg_q_info.html">MSGQ_INFO_PTR</a>        <a class="code" href="struct_msg_q_info.html">MsgQInfo</a>[MSGQ_TBL_SZ];
<a name="l00016"></a>00016 <a class="code" href="struct_msg_q_info_list.html">MSGQ_INFO_LIST_PTR</a>   MsgQListHead = NULL;
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> HashIndex(ULONG qName);
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="comment">/*************** INTERNAL FUNCTIONS ******************************/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">/***************************************************************************</span>
<a name="l00023"></a>00023 <span class="comment">*  InstallMsqQTable (qName, qid, semId, sendState, numMsgs, err)</span>
<a name="l00024"></a>00024 <span class="comment">*  Function: This function installs a queue into the hash table</span>
<a name="l00025"></a>00025 <span class="comment">****************************************************************************/</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="keywordtype">int</span> InstallMsqQTable(ULONG qName, <span class="keywordtype">int</span> qId, <span class="keywordtype">int</span> semId, <span class="keywordtype">int</span>* err) {
<a name="l00028"></a>00028 
<a name="l00029"></a>00029         <a class="code" href="struct_msg_q_info.html">MSGQ_INFO_PTR</a> pMsgQInfo = NULL;
<a name="l00030"></a>00030         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  index;
<a name="l00031"></a>00031 
<a name="l00032"></a>00032         <span class="keywordflow">if</span> ((pMsgQInfo = MsgQTableLookup(qName)) == NULL) {
<a name="l00033"></a>00033                 pMsgQInfo = (<a class="code" href="struct_msg_q_info.html">MSGQ_INFO_PTR</a>)malloc(<span class="keyword">sizeof</span>(*pMsgQInfo));
<a name="l00034"></a>00034 
<a name="l00035"></a>00035                 <span class="keywordflow">if</span>(pMsgQInfo != NULL) {
<a name="l00036"></a>00036                         index = HashIndex(qName);
<a name="l00037"></a>00037 
<a name="l00038"></a>00038                         pMsgQInfo-&gt;next  = MsgQInfo[index];
<a name="l00039"></a>00039                         MsgQInfo[index]   = pMsgQInfo;
<a name="l00040"></a>00040                         pMsgQInfo-&gt;qName = qName;
<a name="l00041"></a>00041                         pMsgQInfo-&gt;qId   = qId;
<a name="l00042"></a>00042                         pMsgQInfo-&gt;semId = semId;
<a name="l00043"></a>00043                         pMsgQInfo-&gt;sendState = MSG_Q_READY;
<a name="l00044"></a>00044                         pMsgQInfo-&gt;numMsgs   = 0;
<a name="l00045"></a>00045 
<a name="l00046"></a>00046                         *err = OK;
<a name="l00047"></a>00047                         <span class="keywordflow">return</span> (OK);
<a name="l00048"></a>00048                 }
<a name="l00049"></a>00049                 <span class="keywordflow">else</span>
<a name="l00050"></a>00050                         *err = KMsgQLibNoMemoryErr;
<a name="l00051"></a>00051         }
<a name="l00052"></a>00052         <span class="keywordflow">else</span>
<a name="l00053"></a>00053                 *err = KMsgQLibQIdErr;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055         <span class="keywordflow">return</span>(ERROR);
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 }
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">/******************************************************************************</span>
<a name="l00061"></a>00061 <span class="comment">*  HashIndex</span>
<a name="l00062"></a>00062 <span class="comment">*  Function: This function returns the hash index</span>
<a name="l00063"></a>00063 <span class="comment">*******************************************************************************/</span>
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> HashIndex(ULONG qName) {
<a name="l00066"></a>00066         <span class="keywordflow">return</span>(qName % MSGQ_TBL_SZ);
<a name="l00067"></a>00067 }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="comment">/************************************************************************</span>
<a name="l00071"></a>00071 <span class="comment">*  MsgQTableLookup (qName)</span>
<a name="l00072"></a>00072 <span class="comment">*  Function: This function finds the block pointer for each queue</span>
<a name="l00073"></a>00073 <span class="comment">*************************************************************************/</span>
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <a class="code" href="struct_msg_q_info.html">MSGQ_INFO</a>* MsgQTableLookup(ULONG qName) {
<a name="l00076"></a>00076         <a class="code" href="struct_msg_q_info.html">MSGQ_INFO_PTR</a> pMsgQInfo = NULL;
<a name="l00077"></a>00077 
<a name="l00078"></a>00078         <span class="keywordflow">for</span> (pMsgQInfo = MsgQInfo[HashIndex(qName)]; pMsgQInfo != NULL; pMsgQInfo = pMsgQInfo-&gt;next) {
<a name="l00079"></a>00079                 <span class="keywordflow">if</span> (qName == pMsgQInfo-&gt;qName)
<a name="l00080"></a>00080                         <span class="keywordflow">return</span>(pMsgQInfo);
<a name="l00081"></a>00081         }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083         <span class="keywordflow">return</span>(NULL);
<a name="l00084"></a>00084 }
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 <span class="comment">/*************************************************************************</span>
<a name="l00088"></a>00088 <span class="comment">*  RemoveFromMsqQTable (qName, err)</span>
<a name="l00089"></a>00089 <span class="comment">*  Function: This function removes a queue from the hash table</span>
<a name="l00090"></a>00090 <span class="comment">**************************************************************************/</span>
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="keywordtype">int</span> RemoveFromMsqQTable(ULONG qName, <span class="keywordtype">int</span>* err) {
<a name="l00094"></a>00094         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  index = 0;
<a name="l00095"></a>00095         <a class="code" href="struct_msg_q_info.html">MSGQ_INFO_PTR</a> prev = NULL;
<a name="l00096"></a>00096         <a class="code" href="struct_msg_q_info.html">MSGQ_INFO_PTR</a> pMsgQInfo = NULL;
<a name="l00097"></a>00097 
<a name="l00098"></a>00098         index = HashIndex(qName);
<a name="l00099"></a>00099         <span class="keywordflow">for</span> (pMsgQInfo = MsgQInfo[index]; pMsgQInfo != NULL; pMsgQInfo = pMsgQInfo-&gt;next) {
<a name="l00100"></a>00100                 <span class="keywordflow">if</span> (qName == pMsgQInfo-&gt;qName)
<a name="l00101"></a>00101                         <span class="keywordflow">break</span>;
<a name="l00102"></a>00102                 prev = pMsgQInfo;
<a name="l00103"></a>00103         }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105         <span class="keywordflow">if</span> (pMsgQInfo != NULL) {
<a name="l00106"></a>00106                 <span class="keywordflow">if</span> (prev == NULL)
<a name="l00107"></a>00107                         MsgQInfo[index] = pMsgQInfo-&gt;next;
<a name="l00108"></a>00108                 <span class="keywordflow">else</span>
<a name="l00109"></a>00109                         prev-&gt;next = pMsgQInfo-&gt;next;
<a name="l00110"></a>00110 
<a name="l00111"></a>00111                 free((<span class="keywordtype">void</span>*)pMsgQInfo);
<a name="l00112"></a>00112                 *err = OK;
<a name="l00113"></a>00113                 <span class="keywordflow">return</span> (OK);
<a name="l00114"></a>00114         }
<a name="l00115"></a>00115         <span class="keywordflow">else</span>
<a name="l00116"></a>00116                 *err = KMsgQLibQIdErr;
<a name="l00117"></a>00117 
<a name="l00118"></a>00118         <span class="keywordflow">return</span>(ERROR);
<a name="l00119"></a>00119 }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 <span class="comment">/************************************************************************</span>
<a name="l00123"></a>00123 <span class="comment">*  AddToMsgQTable (qName)</span>
<a name="l00124"></a>00124 <span class="comment">*  Function: Adding a queue to list</span>
<a name="l00125"></a>00125 <span class="comment">*************************************************************************/</span>
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 <span class="keywordtype">void</span> AddToMsgQTable(ULONG qName) {
<a name="l00128"></a>00128         <a class="code" href="struct_msg_q_info_list.html">MSGQ_INFO_LIST_PTR</a> tempNext;
<a name="l00129"></a>00129 
<a name="l00130"></a>00130         <span class="keywordflow">if</span> (MsgQListHead != NULL) {
<a name="l00131"></a>00131                 <span class="comment">/* subsequent entries */</span>
<a name="l00132"></a>00132                 tempNext = MsgQListHead-&gt;next;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134                 <span class="keywordflow">if</span> ((MsgQListHead-&gt;next = (<a class="code" href="struct_msg_q_info_list.html">MSGQ_INFO_LIST</a>*)malloc(<span class="keyword">sizeof</span>(<a class="code" href="struct_msg_q_info_list.html">MSGQ_INFO_LIST</a>))) != NULL)             {
<a name="l00135"></a>00135                         MsgQListHead-&gt;next-&gt;next = tempNext;
<a name="l00136"></a>00136                         MsgQListHead-&gt;next-&gt;qName = qName;
<a name="l00137"></a>00137                 }
<a name="l00138"></a>00138                 <span class="keywordflow">else</span> 
<a name="l00139"></a>00139                         MsgQListHead-&gt;next = tempNext;
<a name="l00140"></a>00140         }
<a name="l00141"></a>00141         <span class="keywordflow">else</span> {
<a name="l00142"></a>00142                 <span class="keywordflow">if</span> ((MsgQListHead = (<a class="code" href="struct_msg_q_info_list.html">MSGQ_INFO_LIST</a>*)malloc(<span class="keyword">sizeof</span>(<a class="code" href="struct_msg_q_info_list.html">MSGQ_INFO_LIST</a>))) != NULL) {
<a name="l00143"></a>00143                         MsgQListHead-&gt;next = NULL;
<a name="l00144"></a>00144                         MsgQListHead-&gt;qName = qName;
<a name="l00145"></a>00145                 }
<a name="l00146"></a>00146         }
<a name="l00147"></a>00147 }
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 <span class="comment">/************************************************************************</span>
<a name="l00150"></a>00150 <span class="comment">*  DeleteFromMsgQTable (qName)</span>
<a name="l00151"></a>00151 <span class="comment">*  Function:  removing a queu entry from  list</span>
<a name="l00152"></a>00152 <span class="comment">*************************************************************************/</span>
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 <span class="keywordtype">void</span> DeleteFromMsgQTable(ULONG qName) {
<a name="l00155"></a>00155         <a class="code" href="struct_msg_q_info_list.html">MSGQ_INFO_LIST_PTR</a> prev = NULL;
<a name="l00156"></a>00156         <a class="code" href="struct_msg_q_info_list.html">MSGQ_INFO_LIST_PTR</a> pMsgQInfo = NULL;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158         <span class="keywordflow">for</span> (pMsgQInfo = MsgQListHead; pMsgQInfo != NULL; pMsgQInfo = pMsgQInfo-&gt;next) {
<a name="l00159"></a>00159                 <span class="keywordflow">if</span> (qName == pMsgQInfo-&gt;qName)
<a name="l00160"></a>00160                         <span class="keywordflow">break</span>;
<a name="l00161"></a>00161                 prev = pMsgQInfo;
<a name="l00162"></a>00162         }
<a name="l00163"></a>00163 
<a name="l00164"></a>00164         <span class="keywordflow">if</span> (pMsgQInfo != NULL) {
<a name="l00165"></a>00165                 <span class="comment">/* Check whether prev pointer is null or not. If it is Null, update Head pointer */</span>
<a name="l00166"></a>00166                 <span class="keywordflow">if</span>( prev == NULL )
<a name="l00167"></a>00167                         MsgQListHead = MsgQListHead-&gt;next ;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169                 <span class="comment">/* Else update the linked list by removing present node and updating prev next pointer */</span>
<a name="l00170"></a>00170                 <span class="keywordflow">else</span>
<a name="l00171"></a>00171                         prev-&gt;next = pMsgQInfo-&gt;next;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173                 <span class="comment">/* Now free up the memory used by the present node */</span>
<a name="l00174"></a>00174                 free((<span class="keywordtype">void</span>*) pMsgQInfo);
<a name="l00175"></a>00175         }
<a name="l00176"></a>00176 }
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

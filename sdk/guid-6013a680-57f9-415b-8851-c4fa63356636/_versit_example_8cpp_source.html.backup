<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/AppServices/versit/VersitExample.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/AppServices/versit/VersitExample.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2006-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// This example demonstrates a vCard parser</span>
<a name="l00015"></a>00015 <span class="comment">//</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;e32base.h&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;e32cons.h&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;vcard.h&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;versit.h&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;VersitExample.h&quot;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="comment">// Global definition</span>
<a name="l00025"></a>00025 <span class="keyword">static</span> CConsoleBase* gConsole;
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="comment">// name of file to write the vCard to</span>
<a name="l00028"></a>00028 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KVCardFileJIS,<span class="stringliteral">&quot;\\Private\\E8000094\\charsetJIS.vcf&quot;</span>);
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="comment">// string for display</span>
<a name="l00031"></a>00031 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgPressAnyKey,<span class="stringliteral">&quot;\n\nPress any key to continue\n&quot;</span>);
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <a class="code" href="class_c_example_versit.html">CExampleVersit</a>* CExampleVersit::NewL()
<a name="l00034"></a>00034         {
<a name="l00035"></a>00035         <a class="code" href="class_c_example_versit.html">CExampleVersit</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_example_versit.html">CExampleVersit</a>();
<a name="l00036"></a>00036         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00037"></a>00037         <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00038"></a>00038         CleanupStack::Pop(<span class="keyword">self</span>);
<a name="l00039"></a>00039         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00040"></a>00040         }
<a name="l00041"></a>00041         
<a name="l00042"></a>00042 <span class="keywordtype">void</span> CExampleVersit::ConstructL()
<a name="l00043"></a>00043         {
<a name="l00044"></a>00044         iParser = CParserVCard::NewL();
<a name="l00045"></a>00045         }       
<a name="l00046"></a>00046         
<a name="l00047"></a>00047 CExampleVersit::~CExampleVersit()       
<a name="l00048"></a>00048         {
<a name="l00049"></a>00049         <span class="keyword">delete</span> iParser;
<a name="l00050"></a>00050         iFsSession .Close();
<a name="l00051"></a>00051         }
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">// Externalises a vCard to a file</span>
<a name="l00054"></a>00054 <span class="keywordtype">void</span> CExampleVersit::ExternalizeToFileL(<span class="keyword">const</span> TDesC&amp; aFileName)
<a name="l00055"></a>00055         {
<a name="l00056"></a>00056         RFile file;
<a name="l00057"></a>00057         iFsSession.Connect();
<a name="l00058"></a>00058         <span class="comment">// create the private directory (\Private\E8000094\) on writable drive</span>
<a name="l00059"></a>00059         User::LeaveIfError(iFsSession.CreatePrivatePath(RFs::GetSystemDrive()));
<a name="l00060"></a>00060         User::LeaveIfError(file.Replace(iFsSession, aFileName, EFileWrite));
<a name="l00061"></a>00061         CleanupClosePushL(file);
<a name="l00062"></a>00062         iParser-&gt;ExternalizeL(file);
<a name="l00063"></a>00063         CleanupStack::PopAndDestroy(&amp;file);
<a name="l00064"></a>00064         }
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="comment">// Internalises a vCard from a file</span>
<a name="l00067"></a>00067 <span class="keywordtype">void</span> CExampleVersit::InternalizeFromFileL(RFile&amp; aInputFile)
<a name="l00068"></a>00068         {
<a name="l00069"></a>00069         TInt size;
<a name="l00070"></a>00070         <span class="keywordflow">if</span> (aInputFile.Size(size)==KErrNone)
<a name="l00071"></a>00071                 {
<a name="l00072"></a>00072                 <span class="keyword">delete</span> iParser;
<a name="l00073"></a>00073                 iParser = NULL;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075                 iParser = CParserVCard::NewL();
<a name="l00076"></a>00076                 RFileReadStream stream(aInputFile);
<a name="l00077"></a>00077                 CleanupClosePushL(stream);
<a name="l00078"></a>00078                 iParser-&gt;InternalizeL(stream);
<a name="l00079"></a>00079                 CleanupStack::PopAndDestroy(&amp;stream);
<a name="l00080"></a>00080                 }
<a name="l00081"></a>00081         }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="comment">// Creates a vCard containing a note property and a character set property parameter.</span>
<a name="l00084"></a>00084 <span class="comment">// Then externalizes the vCard to a file.</span>
<a name="l00085"></a>00085 <span class="keywordtype">void</span> CExampleVersit::CreateAndExternalizeVCardL()
<a name="l00086"></a>00086         {
<a name="l00087"></a>00087         <span class="comment">//create a property value to hold some text</span>
<a name="l00088"></a>00088         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KNote,<span class="stringliteral">&quot;\x4e79\x4f19\x5032&quot;</span>);
<a name="l00089"></a>00089         CParserPropertyValue* value=CParserPropertyValueHBufC::NewL(KNote);
<a name="l00090"></a>00090         CleanupStack::PushL(value);
<a name="l00091"></a>00091 
<a name="l00092"></a>00092         CArrayPtr&lt;CParserParam&gt;* arrayOfParams = <span class="keyword">new</span>(ELeave)CArrayPtrFlat&lt;CParserParam&gt;(5);
<a name="l00093"></a>00093         CleanupStack::PushL(arrayOfParams);
<a name="l00094"></a>00094 
<a name="l00095"></a>00095         <span class="comment">// Add a character set property parameter</span>
<a name="l00096"></a>00096         CParserParam* parserParam=CParserParam::NewL(KVersitTokenCHARSET,KVersitTokenJIS);
<a name="l00097"></a>00097         CleanupStack::PushL(parserParam);
<a name="l00098"></a>00098         arrayOfParams-&gt;AppendL(parserParam);
<a name="l00099"></a>00099         CleanupStack::Pop(parserParam);
<a name="l00100"></a>00100 
<a name="l00101"></a>00101         <span class="comment">// create the NOTE property</span>
<a name="l00102"></a>00102         CParserGroupedProperty* <span class="keyword">property</span>=CParserGroupedProperty::NewL(*value,KVersitTokenNOTE,NULL,arrayOfParams);
<a name="l00103"></a>00103 
<a name="l00104"></a>00104         CleanupStack::Pop(2,value); <span class="comment">// value, arrayOfParams</span>
<a name="l00105"></a>00105         CleanupStack::PushL(property);
<a name="l00106"></a>00106 
<a name="l00107"></a>00107         <span class="comment">// Add the property to the vCard</span>
<a name="l00108"></a>00108         iParser-&gt;AddPropertyL(property);
<a name="l00109"></a>00109         CleanupStack::Pop(property);
<a name="l00110"></a>00110         <span class="comment">//Sets the default transformation format</span>
<a name="l00111"></a>00111         iParser-&gt;SetDefaultCharSet(Versit::EJISCharSet);
<a name="l00112"></a>00112         ExternalizeToFileL(KVCardFileJIS);
<a name="l00113"></a>00113         }
<a name="l00114"></a>00114         
<a name="l00115"></a>00115 <span class="comment">//Internalize the VCard</span>
<a name="l00116"></a>00116 <span class="keywordtype">void</span> CExampleVersit::InternalizeVCardL()
<a name="l00117"></a>00117         {
<a name="l00118"></a>00118         RFile file;
<a name="l00119"></a>00119         TInt err=file.Open(iFsSession,KVCardFileJIS,EFileRead);
<a name="l00120"></a>00120         User::LeaveIfError(err);
<a name="l00121"></a>00121         CleanupClosePushL(file);
<a name="l00122"></a>00122         InternalizeFromFileL(file);
<a name="l00123"></a>00123         CleanupStack::PopAndDestroy(&amp;file);
<a name="l00124"></a>00124         
<a name="l00125"></a>00125         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KConsoleMessage1, <span class="stringliteral">&quot;vCard has been successfully internalised from a file&quot;</span>);
<a name="l00126"></a>00126         gConsole-&gt;Printf(KConsoleMessage1);
<a name="l00127"></a>00127         }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129 <span class="keywordtype">void</span> CExampleVersit::EgVersitL()
<a name="l00130"></a>00130         {
<a name="l00131"></a>00131         CreateAndExternalizeVCardL();
<a name="l00132"></a>00132         InternalizeVCardL();
<a name="l00133"></a>00133         }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="keyword">static</span> <span class="keywordtype">void</span> DoExampleL()
<a name="l00136"></a>00136         {
<a name="l00137"></a>00137         <span class="comment">// Create the console to print the messages to.</span>
<a name="l00138"></a>00138         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KConsoleMessageDisplay, <span class="stringliteral">&quot;Versit Example&quot;</span>);
<a name="l00139"></a>00139         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KConsoleStars,<span class="stringliteral">&quot;\n*************************\n&quot;</span>);
<a name="l00140"></a>00140         gConsole = Console::NewL(KConsoleMessageDisplay,TSize(KConsFullScreen,KConsFullScreen));
<a name="l00141"></a>00141         CleanupStack::PushL(gConsole);
<a name="l00142"></a>00142         gConsole-&gt;Printf(KConsoleMessageDisplay);
<a name="l00143"></a>00143         gConsole-&gt;Printf(KConsoleStars);
<a name="l00144"></a>00144 
<a name="l00145"></a>00145         <a class="code" href="class_c_example_versit.html">CExampleVersit</a>* egVersit= CExampleVersit::NewL();
<a name="l00146"></a>00146         TRAPD(err, egVersit-&gt;EgVersitL());
<a name="l00147"></a>00147         <span class="keywordflow">if</span> (err)
<a name="l00148"></a>00148                 {
<a name="l00149"></a>00149                 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFailed,<span class="stringliteral">&quot;\n\nExample failed: leave code=%d&quot;</span>);
<a name="l00150"></a>00150                 gConsole-&gt;Printf(KFailed, err);
<a name="l00151"></a>00151                 }
<a name="l00152"></a>00152         <span class="keyword">delete</span> egVersit;        
<a name="l00153"></a>00153         <span class="comment">// wait for user to press a key before destroying gConsole</span>
<a name="l00154"></a>00154         gConsole-&gt;Printf(KMsgPressAnyKey);
<a name="l00155"></a>00155         gConsole-&gt;Getch();
<a name="l00156"></a>00156         CleanupStack::PopAndDestroy(gConsole);
<a name="l00157"></a>00157         }
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 <span class="comment">// Standard entry point function</span>
<a name="l00160"></a>00160 TInt E32Main()
<a name="l00161"></a>00161         {
<a name="l00162"></a>00162         __UHEAP_MARK;
<a name="l00163"></a>00163         <span class="comment">// Active scheduler required as this is a console app</span>
<a name="l00164"></a>00164         CActiveScheduler* scheduler=<span class="keyword">new</span> CActiveScheduler;
<a name="l00165"></a>00165         <span class="comment">// If active scheduler has been created, install it.</span>
<a name="l00166"></a>00166         <span class="keywordflow">if</span> (scheduler)
<a name="l00167"></a>00167                 {
<a name="l00168"></a>00168                 CActiveScheduler::Install(scheduler);
<a name="l00169"></a>00169                 <span class="comment">// Cleanup stack needed</span>
<a name="l00170"></a>00170                 CTrapCleanup* cleanup=CTrapCleanup::New();
<a name="l00171"></a>00171                 <span class="keywordflow">if</span> (cleanup)
<a name="l00172"></a>00172                         {
<a name="l00173"></a>00173                         TRAP_IGNORE(DoExampleL());
<a name="l00174"></a>00174                         <span class="keyword">delete</span> cleanup;
<a name="l00175"></a>00175                         }
<a name="l00176"></a>00176                 <span class="keyword">delete</span> scheduler;
<a name="l00177"></a>00177                 } 
<a name="l00178"></a>00178         __UHEAP_MARKEND;
<a name="l00179"></a>00179         <span class="keywordflow">return</span> KErrNone;
<a name="l00180"></a>00180         }
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

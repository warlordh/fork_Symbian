<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/PIPS/OpenCStringUtilitiesEx/exe/src/example.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/PIPS/OpenCStringUtilitiesEx/exe/src/example.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* ==============================================================================</span>
<a name="l00003"></a>00003 <span class="comment">*  Name        : example.cpp</span>
<a name="l00004"></a>00004 <span class="comment">*  Part of     : OpenCStringUtilitiesExeEx</span>
<a name="l00005"></a>00005 <span class="comment">*  Interface   : </span>
<a name="l00006"></a>00006 <span class="comment">*  Description : </span>
<a name="l00007"></a>00007 <span class="comment">*  Version     : </span>
<a name="l00008"></a>00008 <span class="comment">*</span>
<a name="l00009"></a>00009 <span class="comment">*  Copyright (c) 2005-2007 Nokia Corporation.</span>
<a name="l00010"></a>00010 <span class="comment">*  This material, including documentation and any related </span>
<a name="l00011"></a>00011 <span class="comment">*  computer programs, is protected by copyright controlled by </span>
<a name="l00012"></a>00012 <span class="comment">*  Nokia Corporation.</span>
<a name="l00013"></a>00013 <span class="comment">* ==============================================================================</span>
<a name="l00014"></a>00014 <span class="comment">*/</span>
<a name="l00015"></a>00015 <span class="preprocessor">#ifdef __GCCE__</span>
<a name="l00016"></a>00016 <span class="preprocessor"></span><span class="comment">//#include &lt;staticlibinit_gcce.h&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#endif</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;example.h&quot;</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">// Constant strings</span>
<a name="l00022"></a>00022 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>( KSampleWideString, <span class="stringliteral">&quot;Sample Wide String&quot;</span> );
<a name="l00023"></a>00023 _LIT8( KSampleNarrowString, <span class="stringliteral">&quot;Sample Narrow String&quot;</span> );
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="keywordtype">void</span> testTbuf16()
<a name="l00026"></a>00026 {
<a name="l00027"></a>00027         <span class="comment">// Tbuf16 Conversions</span>
<a name="l00028"></a>00028         TBuf16&lt;SIZE&gt; buf(KSampleWideString);
<a name="l00029"></a>00029         
<a name="l00030"></a>00030         <span class="keywordtype">wchar_t</span>* ws = <a class="code" href="stringutils_8h.html#a9d3907ae46af2842f427b5c58fe6ac60">tbuf16towchar</a>(buf);
<a name="l00031"></a>00031 
<a name="l00032"></a>00032         printf(<span class="stringliteral">&quot;After tbuf16towchar.........\n&quot;</span>);
<a name="l00033"></a>00033         wprintf(L<span class="stringliteral">&quot;Result string: %ls\n&quot;</span>, ws);   
<a name="l00034"></a>00034         GETCHAR();
<a name="l00035"></a>00035 
<a name="l00036"></a>00036         <span class="comment">//Should allocate space for the destination</span>
<a name="l00037"></a>00037         <span class="keywordtype">char</span> nar_str[SIZE] = <span class="stringliteral">&quot;\0&quot;</span>;
<a name="l00038"></a>00038         <span class="keywordtype">int</span> retVal = <a class="code" href="stringutils_8h.html#a8d9e370a0c317212eb7193988b2702cf">tbuf16tochar</a>(buf ,nar_str);
<a name="l00039"></a>00039 
<a name="l00040"></a>00040         <span class="keywordflow">if</span> ( retVal == -1 )
<a name="l00041"></a>00041         {
<a name="l00042"></a>00042                 printf(<span class="stringliteral">&quot; tbuf16tochar failed..........\n&quot;</span>);
<a name="l00043"></a>00043                 GETCHAR();
<a name="l00044"></a>00044                 <span class="keywordflow">return</span>;
<a name="l00045"></a>00045         }
<a name="l00046"></a>00046         
<a name="l00047"></a>00047         printf(<span class="stringliteral">&quot; After tbuf16tochar..........\n&quot;</span>);
<a name="l00048"></a>00048         printf(<span class="stringliteral">&quot;\nResult string: %s\n&quot;</span>, nar_str );      
<a name="l00049"></a>00049         GETCHAR();
<a name="l00050"></a>00050 }
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="keywordtype">void</span> testTbuf8()
<a name="l00053"></a>00053 {               
<a name="l00054"></a>00054         <span class="comment">// TBuf8 Conversions</span>
<a name="l00055"></a>00055                 TBuf8&lt;SIZE&gt; buf2((TText8*)<span class="stringliteral">&quot;Hello World&quot;</span>);
<a name="l00056"></a>00056                 <span class="keywordtype">char</span> *ns = (<span class="keywordtype">char</span>*)<a class="code" href="stringutils_8h.html#a92e6d0f669d9f15f18c3789ddf5ca779">tbuf8tochar</a>(buf2);
<a name="l00057"></a>00057 
<a name="l00058"></a>00058         printf(<span class="stringliteral">&quot;After tbuf8tochar.........\n&quot;</span>);
<a name="l00059"></a>00059         printf(<span class="stringliteral">&quot;Result string: %s\n&quot;</span>, ns);      
<a name="l00060"></a>00060         GETCHAR();
<a name="l00061"></a>00061 
<a name="l00062"></a>00062         <span class="comment">//Should allocate space for the destination</span>
<a name="l00063"></a>00063         <span class="keywordtype">wchar_t</span> wstr[SIZE];
<a name="l00064"></a>00064         TInt retVal = <a class="code" href="stringutils_8h.html#ac6ce874e6902d0d6f6142e6660866fcc">tbuf8towchar</a>(buf2, wstr);
<a name="l00065"></a>00065         <span class="keywordflow">if</span> ( retVal == -1 )
<a name="l00066"></a>00066         {
<a name="l00067"></a>00067                 printf(<span class="stringliteral">&quot;tbuf8towchar failed..........\n&quot;</span>);
<a name="l00068"></a>00068                 GETCHAR();
<a name="l00069"></a>00069                 <span class="keywordflow">return</span>;
<a name="l00070"></a>00070         }
<a name="l00071"></a>00071 
<a name="l00072"></a>00072         printf(<span class="stringliteral">&quot;After tbuf8tochar.........\n&quot;</span>);
<a name="l00073"></a>00073         wprintf(L<span class="stringliteral">&quot;Result string: %ls\n&quot;</span>, wstr); 
<a name="l00074"></a>00074         GETCHAR();
<a name="l00075"></a>00075 }
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="keywordtype">void</span> testTbufC8()
<a name="l00078"></a>00078 {
<a name="l00079"></a>00079         <span class="comment">// TBufC8 Conversions</span>
<a name="l00080"></a>00080         <span class="keywordtype">wchar_t</span> wstr[SIZE];
<a name="l00081"></a>00081         TBufC8&lt;SIZE&gt; bufc8((TText8*)<span class="stringliteral">&quot;Sample String&quot;</span>);
<a name="l00082"></a>00082         <span class="keywordtype">int</span> retVal = <a class="code" href="stringutils_8h.html#a756faf258af3a7d145afdf8ad9032908">tbufC8towchar</a>(bufc8 ,wstr);
<a name="l00083"></a>00083         <span class="keywordflow">if</span> ( retVal == -1 )
<a name="l00084"></a>00084         {
<a name="l00085"></a>00085                 printf(<span class="stringliteral">&quot;tbufC8towchar failed..........\n&quot;</span>);
<a name="l00086"></a>00086                 GETCHAR();
<a name="l00087"></a>00087                 <span class="keywordflow">return</span>;
<a name="l00088"></a>00088         }
<a name="l00089"></a>00089         printf(<span class="stringliteral">&quot; After tbufC8towchar.........\n&quot;</span>);
<a name="l00090"></a>00090         wprintf(L<span class="stringliteral">&quot;Result string: %ls\n&quot;</span>, wstr); 
<a name="l00091"></a>00091         GETCHAR();
<a name="l00092"></a>00092 
<a name="l00093"></a>00093         <span class="keywordtype">char</span> str[SIZE];
<a name="l00094"></a>00094         <a class="code" href="stringutils_8h.html#a06e4914590a9e3b316c972dd598e2024">tbufC8tochar</a>(bufc8, str);
<a name="l00095"></a>00095 
<a name="l00096"></a>00096         printf(<span class="stringliteral">&quot; After tbufc8tochar.........\n&quot;</span>);
<a name="l00097"></a>00097         printf(<span class="stringliteral">&quot;Result string: %s\n&quot;</span>, str);     
<a name="l00098"></a>00098         GETCHAR();
<a name="l00099"></a>00099 }
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 <span class="keywordtype">void</span> testTbufC16()
<a name="l00102"></a>00102         {
<a name="l00103"></a>00103         <span class="comment">// TBufC16 Conversions</span>
<a name="l00104"></a>00104         <span class="keywordtype">wchar_t</span> wstr[SIZE];
<a name="l00105"></a>00105         TBufC&lt;SIZE&gt; bufc(KSampleWideString);
<a name="l00106"></a>00106 
<a name="l00107"></a>00107         <a class="code" href="stringutils_8h.html#a9e6c0fa268a62a4facea28cb5a83bfcb">tbufC16towchar</a>(bufc ,(<span class="keywordtype">wchar_t</span>*)wstr);
<a name="l00108"></a>00108 
<a name="l00109"></a>00109         printf(<span class="stringliteral">&quot; After tbufC16towchar.........\n&quot;</span>);
<a name="l00110"></a>00110         wprintf(L<span class="stringliteral">&quot;Result string: %ls\n&quot;</span>, wstr); 
<a name="l00111"></a>00111         GETCHAR();
<a name="l00112"></a>00112 
<a name="l00113"></a>00113         <span class="keywordtype">char</span> str[SIZE];
<a name="l00114"></a>00114         <span class="keywordtype">int</span> retVal = <a class="code" href="stringutils_8h.html#a760b3acc819bce96dcc444b61e18985d">tbufC16tochar</a>(bufc ,str);
<a name="l00115"></a>00115         <span class="keywordflow">if</span> ( retVal == -1 )
<a name="l00116"></a>00116         {
<a name="l00117"></a>00117                 printf(<span class="stringliteral">&quot;tbufC16tochar failed..........\n&quot;</span>);
<a name="l00118"></a>00118                 GETCHAR();
<a name="l00119"></a>00119                 <span class="keywordflow">return</span>;
<a name="l00120"></a>00120         }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122         printf(<span class="stringliteral">&quot; After tbufC16tochar.........\n&quot;</span>);
<a name="l00123"></a>00123         printf(<span class="stringliteral">&quot;Result string: %s\n&quot;</span>, str);     
<a name="l00124"></a>00124         GETCHAR();
<a name="l00125"></a>00125 
<a name="l00126"></a>00126 }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="keywordtype">void</span> testHbufC16()
<a name="l00129"></a>00129 {
<a name="l00130"></a>00130         <span class="comment">// HBufC16 conversions</span>
<a name="l00131"></a>00131         HBufC16 *p = HBufC16::NewLC(SIZE);      
<a name="l00132"></a>00132         TBuf16&lt;SIZE&gt; buf(KSampleWideString);
<a name="l00133"></a>00133         *p = buf;
<a name="l00134"></a>00134 
<a name="l00135"></a>00135         <span class="keywordtype">wchar_t</span> wptr[SIZE];
<a name="l00136"></a>00136 
<a name="l00137"></a>00137         <a class="code" href="stringutils_8h.html#a0fcdfc9f202050b7e5a2cd54da14d2fe">hbufC16towchar</a>(*p, wptr);
<a name="l00138"></a>00138 
<a name="l00139"></a>00139         printf(<span class="stringliteral">&quot;After hbufC16towchar.........\n&quot;</span>);
<a name="l00140"></a>00140         wprintf(L<span class="stringliteral">&quot;Result string: %ls\n&quot;</span>, wptr);
<a name="l00141"></a>00141         GETCHAR();
<a name="l00142"></a>00142 
<a name="l00143"></a>00143         <span class="keywordtype">char</span> char_ptr[SIZE];
<a name="l00144"></a>00144         <span class="keywordtype">int</span> retVal = <a class="code" href="stringutils_8h.html#ac8c22cd9144639f951b2193e373f0d2f">hbufC16tochar</a>(*p, char_ptr);
<a name="l00145"></a>00145 
<a name="l00146"></a>00146         <span class="keywordflow">if</span> ( retVal == -1 )
<a name="l00147"></a>00147         {
<a name="l00148"></a>00148                 printf(<span class="stringliteral">&quot;hbufC16tochar failed..........\n&quot;</span>);
<a name="l00149"></a>00149                 GETCHAR();
<a name="l00150"></a>00150                 <span class="keywordflow">return</span>;
<a name="l00151"></a>00151         }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153         printf(<span class="stringliteral">&quot;After hbufC16tochar.........\n&quot;</span>);
<a name="l00154"></a>00154         printf(<span class="stringliteral">&quot;Result string: %s\n&quot;</span>, char_ptr);        
<a name="l00155"></a>00155         GETCHAR();
<a name="l00156"></a>00156 
<a name="l00157"></a>00157         CleanupStack::PopAndDestroy(1);
<a name="l00158"></a>00158 }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 <span class="keywordtype">void</span> testHbufC8()
<a name="l00162"></a>00162 {
<a name="l00163"></a>00163         <span class="comment">//HBufC8 conversions</span>
<a name="l00164"></a>00164         HBufC8 *p8 = HBufC8::NewLC( 30 );       
<a name="l00165"></a>00165         TBuf8&lt;SIZE&gt; buf8(KSampleNarrowString);
<a name="l00166"></a>00166         *p8     =       buf8;
<a name="l00167"></a>00167 
<a name="l00168"></a>00168         <span class="keywordtype">wchar_t</span> ptr[SIZE] = L<span class="stringliteral">&quot;\0&quot;</span>;
<a name="l00169"></a>00169         <span class="keywordtype">int</span> retVal = <a class="code" href="stringutils_8h.html#a88565a9ed99585f8391862e7f5b4d17c">hbufC8towchar</a>(*p8, ptr);
<a name="l00170"></a>00170 
<a name="l00171"></a>00171         <span class="keywordflow">if</span> ( retVal == -1 )
<a name="l00172"></a>00172         {
<a name="l00173"></a>00173                 printf(<span class="stringliteral">&quot;hbufC8towchar failed..........\n&quot;</span>);
<a name="l00174"></a>00174                 GETCHAR();
<a name="l00175"></a>00175                 <span class="keywordflow">return</span>;
<a name="l00176"></a>00176         }
<a name="l00177"></a>00177 
<a name="l00178"></a>00178         printf(<span class="stringliteral">&quot;After hbufC8towchar.........\n&quot;</span>);
<a name="l00179"></a>00179         wprintf(L<span class="stringliteral">&quot;Result string: %ls\n&quot;</span>, ptr);  
<a name="l00180"></a>00180         GETCHAR();
<a name="l00181"></a>00181 
<a name="l00182"></a>00182         <span class="keywordtype">char</span> char_ptr[SIZE]= <span class="stringliteral">&quot;\0&quot;</span>;
<a name="l00183"></a>00183         <a class="code" href="stringutils_8h.html#a6319f08fa6eea77d034e46eaa60584b0">hbufC8tochar</a>(*p8, char_ptr);
<a name="l00184"></a>00184 
<a name="l00185"></a>00185         printf(<span class="stringliteral">&quot;After hbufC8tochar.........\n&quot;</span>);
<a name="l00186"></a>00186         printf(<span class="stringliteral">&quot;Result string: %s\n&quot;</span>, char_ptr);        
<a name="l00187"></a>00187         GETCHAR();
<a name="l00188"></a>00188 
<a name="l00189"></a>00189         CleanupStack::PopAndDestroy(1);
<a name="l00190"></a>00190 }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 <span class="keywordtype">void</span> testWchar()
<a name="l00193"></a>00193 {
<a name="l00194"></a>00194         <span class="comment">// Wchar Conversions</span>
<a name="l00195"></a>00195         <span class="keyword">const</span> <span class="keywordtype">wchar_t</span> *wstr = L<span class="stringliteral">&quot;Hi good morning&quot;</span>;
<a name="l00196"></a>00196         TBuf16&lt;SIZE&gt; buf;
<a name="l00197"></a>00197 
<a name="l00198"></a>00198         <a class="code" href="stringutils_8h.html#af57eac18681e12a2a2579a46f900c531">wchartotbuf16</a>(wstr, buf);
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 
<a name="l00201"></a>00201         <span class="comment">// Allocate mem for the Destination</span>
<a name="l00202"></a>00202         HBufC16 *p = HBufC16::NewLC(SIZE);      
<a name="l00203"></a>00203         TBuf16&lt;SIZE&gt; tbuf (KSampleWideString);
<a name="l00204"></a>00204         *p      =       tbuf;
<a name="l00205"></a>00205         <a class="code" href="stringutils_8h.html#a328900ebbbca3b494bd356d272433892">wchartohbufc16</a>(wstr ,*p);
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 
<a name="l00208"></a>00208         TBuf8&lt;SIZE&gt; buf8(KSampleNarrowString);
<a name="l00209"></a>00209         <span class="keywordtype">int</span> retVal = <a class="code" href="stringutils_8h.html#a74d0bc81ee2e712248f5c18b23411100">wchartotbuf8</a>(wstr,buf8);
<a name="l00210"></a>00210 
<a name="l00211"></a>00211         <span class="keywordflow">if</span> ( retVal == -1 )
<a name="l00212"></a>00212         {
<a name="l00213"></a>00213                 printf(<span class="stringliteral">&quot;wchartotbuf8 failed..........\n&quot;</span>);
<a name="l00214"></a>00214                 GETCHAR();
<a name="l00215"></a>00215                 <span class="keywordflow">return</span>;
<a name="l00216"></a>00216         }
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 
<a name="l00219"></a>00219         HBufC8 *p_8 = HBufC8::NewLC(30);        
<a name="l00220"></a>00220         TBuf8&lt;SIZE&gt; buf_8(KSampleNarrowString);
<a name="l00221"></a>00221         *p_8    =       buf_8;
<a name="l00222"></a>00222         <span class="keywordtype">int</span> ret = <a class="code" href="stringutils_8h.html#ab28f816757c669da455d3112bc013a75">wchartohbufc8</a>(wstr ,*p_8);
<a name="l00223"></a>00223         <span class="keywordflow">if</span> ( retVal == -1 )
<a name="l00224"></a>00224         {
<a name="l00225"></a>00225                 printf(<span class="stringliteral">&quot;wchartohbufc8 failed..........\n&quot;</span>);
<a name="l00226"></a>00226                 GETCHAR();
<a name="l00227"></a>00227                 <span class="keywordflow">return</span>;
<a name="l00228"></a>00228         }
<a name="l00229"></a>00229         CleanupStack::PopAndDestroy(2); 
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 <span class="keywordtype">void</span> testChar() 
<a name="l00235"></a>00235 {
<a name="l00236"></a>00236         <span class="comment">// Char Conversions</span>
<a name="l00237"></a>00237         <span class="keyword">const</span> <span class="keywordtype">char</span> *str = <span class="stringliteral">&quot;Hi_good morning!!&quot;</span>;
<a name="l00238"></a>00238         TBuf16&lt;SIZE&gt; buf(KSampleWideString);
<a name="l00239"></a>00239 
<a name="l00240"></a>00240         TInt retVal = <a class="code" href="stringutils_8h.html#aa5c2923704de78bc06da21acae819bc7">chartotbuf16</a>(str, buf);
<a name="l00241"></a>00241         <span class="keywordflow">if</span> ( retVal == -1 )
<a name="l00242"></a>00242         {
<a name="l00243"></a>00243                 printf(<span class="stringliteral">&quot;chartotbuf16 failed..........\n&quot;</span>);
<a name="l00244"></a>00244                 GETCHAR();
<a name="l00245"></a>00245                 <span class="keywordflow">return</span>;
<a name="l00246"></a>00246         }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 
<a name="l00249"></a>00249         <span class="comment">// Allocate mem for the Destination</span>
<a name="l00250"></a>00250         HBufC16 *p = HBufC16::NewLC(SIZE);      
<a name="l00251"></a>00251         TBuf16&lt;SIZE&gt; tbuf(KSampleWideString);
<a name="l00252"></a>00252         *p = tbuf;
<a name="l00253"></a>00253         <span class="keywordtype">int</span> ret = <a class="code" href="stringutils_8h.html#aecde687b6096958e753361b93a22ba23">chartohbufc16</a>(str, *p);
<a name="l00254"></a>00254         <span class="keywordflow">if</span> ( ret == -1 )
<a name="l00255"></a>00255         {
<a name="l00256"></a>00256                 printf(<span class="stringliteral">&quot;chartohbufc16 failed..........\n&quot;</span>);
<a name="l00257"></a>00257                 GETCHAR();
<a name="l00258"></a>00258                 <span class="keywordflow">return</span>;
<a name="l00259"></a>00259         }
<a name="l00260"></a>00260 
<a name="l00261"></a>00261         TBuf8&lt;SIZE&gt; buf8(KSampleNarrowString);
<a name="l00262"></a>00262         chartotbuf8(str,buf8 );
<a name="l00263"></a>00263 
<a name="l00264"></a>00264         HBufC8 *p_8 = HBufC8::NewLC(SIZE);      
<a name="l00265"></a>00265         TBuf8&lt;SIZE&gt; buf_8(KSampleNarrowString);
<a name="l00266"></a>00266         *p_8 = buf_8;
<a name="l00267"></a>00267 
<a name="l00268"></a>00268         chartohbufc8( str,*p_8);
<a name="l00269"></a>00269 
<a name="l00270"></a>00270         CleanupStack::PopAndDestroy(2); 
<a name="l00271"></a>00271 }
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 
<a name="l00274"></a>00274 <span class="keywordtype">int</span> <a class="code" href="redirectprintf_8c.html#a840291bc02cba5474a4cb46a9b9566fe">main</a>() 
<a name="l00275"></a>00275 {
<a name="l00276"></a>00276                 <span class="comment">// Tbuf16 Conversions</span>
<a name="l00277"></a>00277         testTbuf16();
<a name="l00278"></a>00278         <span class="comment">// Tbuf8 Conversions</span>
<a name="l00279"></a>00279         testTbuf8();
<a name="l00280"></a>00280 
<a name="l00281"></a>00281         <span class="comment">// TbufC8 Conversions</span>
<a name="l00282"></a>00282         testTbufC8();
<a name="l00283"></a>00283 
<a name="l00284"></a>00284         <span class="comment">// TBufC16 Conversions</span>
<a name="l00285"></a>00285         testTbufC16();
<a name="l00286"></a>00286 
<a name="l00287"></a>00287         <span class="comment">// HBufC16 Conversions</span>
<a name="l00288"></a>00288         testHbufC16();  
<a name="l00289"></a>00289 
<a name="l00290"></a>00290         <span class="comment">// HBufC8 Conversions</span>
<a name="l00291"></a>00291         testHbufC8();
<a name="l00292"></a>00292 
<a name="l00293"></a>00293         <span class="comment">// Wchar conversions</span>
<a name="l00294"></a>00294         testWchar();
<a name="l00295"></a>00295 
<a name="l00296"></a>00296         <span class="comment">// Char Conversions</span>
<a name="l00297"></a>00297         testChar();
<a name="l00298"></a>00298 
<a name="l00299"></a>00299         <span class="keywordflow">return</span> 0;
<a name="l00300"></a>00300 }
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

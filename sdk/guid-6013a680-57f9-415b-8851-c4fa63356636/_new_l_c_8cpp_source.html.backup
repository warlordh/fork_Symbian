<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Base/MemMan/Cleanup/NewLC/NewLC.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Base/MemMan/Cleanup/NewLC/NewLC.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2000-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// Example shows use of the NewLC() static function.</span>
<a name="l00015"></a>00015 <span class="comment">// NOTE: the structure of this example is different to standard E32 examples</span>
<a name="l00016"></a>00016 <span class="comment">//</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;e32cons.h&gt;</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021   <span class="comment">// All messages written to this</span>
<a name="l00022"></a>00022 LOCAL_D CConsoleBase* console;
<a name="l00023"></a>00023   
<a name="l00024"></a>00024   <span class="comment">// Flag which determines whether the doSomething() member function</span>
<a name="l00025"></a>00025   <span class="comment">// of the CExample class should leave when called.</span>
<a name="l00026"></a>00026 LOCAL_D TBool leaveFlag = ETrue;
<a name="l00027"></a>00027 
<a name="l00028"></a>00028   <span class="comment">// Parameter for __UHEAP_SETFAIL</span>
<a name="l00029"></a>00029   <span class="comment">// Allocation guaranteed to fail at this number of allocation attempts;</span>
<a name="l00030"></a>00030   <span class="comment">// i.e. if set to n, allocation fails on the nth attempt. </span>
<a name="l00031"></a>00031   <span class="comment">// NB only used in debug mode</span>
<a name="l00032"></a>00032 <span class="preprocessor">#ifdef _DEBUG</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>LOCAL_D TInt allocFailNumber = 1;
<a name="l00034"></a>00034 <span class="preprocessor">#endif</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>  
<a name="l00036"></a>00036   <span class="comment">// Function prototypes</span>
<a name="l00037"></a>00037 LOCAL_C <span class="keywordtype">void</span> doExampleL();      
<a name="l00038"></a>00038 LOCAL_C <span class="keywordtype">void</span> callExampleL();
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 
<a name="l00043"></a>00043 <span class="comment">//</span>
<a name="l00044"></a>00044 <span class="comment">// -----&gt; CExample (definition)</span>
<a name="l00045"></a>00045 <span class="comment">//</span>
<a name="l00046"></a>00046 <span class="comment">// The class is used by the example code</span>
<a name="l00047"></a>00047 <span class="comment">//</span>
<a name="l00049"></a>00049 <span class="comment"></span><span class="keyword">class </span>CExample : <span class="keyword">public</span> CBase
<a name="l00050"></a>00050         {
<a name="l00051"></a>00051 <span class="keyword">public</span> :
<a name="l00052"></a>00052         <span class="keyword">static</span> CExample* NewLC(TInt aVal);
<a name="l00053"></a>00053         <span class="keywordtype">void</span> DoSomethingL();
<a name="l00054"></a>00054 <span class="keyword">public</span> :
<a name="l00055"></a>00055         TInt iInt;
<a name="l00056"></a>00056         };
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 
<a name="l00060"></a>00060 <span class="comment">//</span>
<a name="l00061"></a>00061 <span class="comment">// -----&gt; CExample (implementation)</span>
<a name="l00062"></a>00062 <span class="comment">//</span>
<a name="l00064"></a>00064 <span class="comment"></span>CExample* CExample::NewLC(TInt aVal)
<a name="l00065"></a>00065         {
<a name="l00066"></a>00066         CExample* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) CExample;
<a name="l00067"></a>00067         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00068"></a>00068         <span class="keyword">self</span>-&gt;iInt = aVal;
<a name="l00069"></a>00069         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00070"></a>00070         }
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="keywordtype">void</span> CExample::DoSomethingL() 
<a name="l00074"></a>00074         {
<a name="l00075"></a>00075           <span class="comment">// Leave if the global flag is set</span>
<a name="l00076"></a>00076         <span class="keywordflow">if</span> (leaveFlag)
<a name="l00077"></a>00077                 {
<a name="l00078"></a>00078                 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgLeaving,<span class="stringliteral">&quot;DoSomethingL leaving.\n&quot;</span>);
<a name="l00079"></a>00079                 console-&gt;Printf(KMsgLeaving);
<a name="l00080"></a>00080                 User::Leave(KErrGeneral);               
<a name="l00081"></a>00081                 }
<a name="l00082"></a>00082         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormat1,<span class="stringliteral">&quot;Value of iInt is %d.\n&quot;</span>);
<a name="l00083"></a>00083         console-&gt;Printf(KFormat1,iInt);
<a name="l00084"></a>00084         }
<a name="l00085"></a>00085 
<a name="l00087"></a>00087 <span class="comment">//</span>
<a name="l00088"></a>00088 <span class="comment">// Main function called by E32</span>
<a name="l00089"></a>00089 <span class="comment">//</span>
<a name="l00091"></a>00091 <span class="comment"></span>GLDEF_C TInt E32Main()
<a name="l00092"></a>00092     {
<a name="l00093"></a>00093           <span class="comment">// Get cleanup stack</span>
<a name="l00094"></a>00094         CTrapCleanup* cleanup=CTrapCleanup::New();
<a name="l00095"></a>00095 
<a name="l00096"></a>00096           <span class="comment">// Some more initialization, then do the example</span>
<a name="l00097"></a>00097         TRAPD(error,callExampleL());
<a name="l00098"></a>00098           
<a name="l00099"></a>00099           <span class="comment">// callExampleL() should never leave.</span>
<a name="l00100"></a>00100         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgPanicEpoc32ex,<span class="stringliteral">&quot;EPOC32EX&quot;</span>);
<a name="l00101"></a>00101         __ASSERT_ALWAYS(!error,User::Panic(KMsgPanicEpoc32ex,error));
<a name="l00102"></a>00102 
<a name="l00103"></a>00103           <span class="comment">// destroy the cleanup stack</span>
<a name="l00104"></a>00104         <span class="keyword">delete</span> cleanup;
<a name="l00105"></a>00105         
<a name="l00106"></a>00106           <span class="comment">// return</span>
<a name="l00107"></a>00107         <span class="keywordflow">return</span> 0;
<a name="l00108"></a>00108     }
<a name="l00109"></a>00109 
<a name="l00110"></a>00110 
<a name="l00112"></a>00112 <span class="comment">//</span>
<a name="l00113"></a>00113 <span class="comment">//</span>
<a name="l00114"></a>00114 <span class="comment">//</span>
<a name="l00116"></a>00116 <span class="comment"></span>LOCAL_C <span class="keywordtype">void</span> callExampleL() 
<a name="l00117"></a>00117     {
<a name="l00118"></a>00118           <span class="comment">// Initialize and call the example code under cleanup stack.</span>
<a name="l00119"></a>00119         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgExampleCode,<span class="stringliteral">&quot;Symbian platform Example Code&quot;</span>);
<a name="l00120"></a>00120         console = Console::NewL(KMsgExampleCode,TSize(KConsFullScreen,KConsFullScreen));
<a name="l00121"></a>00121           <span class="comment">// Put console onto the cleanup stack.</span>
<a name="l00122"></a>00122         CleanupStack::PushL(console);
<a name="l00123"></a>00123 
<a name="l00124"></a>00124           <span class="comment">// Perform the example function under the protection of a </span>
<a name="l00125"></a>00125           <span class="comment">// TRAP harness.</span>
<a name="l00126"></a>00126         TRAPD(error,doExampleL());
<a name="l00127"></a>00127         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgOK,<span class="stringliteral">&quot;ok&quot;</span>);
<a name="l00128"></a>00128         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormat2,<span class="stringliteral">&quot;failed: leave code = %d&quot;</span>);
<a name="l00129"></a>00129         <span class="keywordflow">if</span> (error)
<a name="l00130"></a>00130                 console-&gt;Printf(KFormat2,error);
<a name="l00131"></a>00131         <span class="keywordflow">else</span>
<a name="l00132"></a>00132                 console-&gt;Printf(KMsgOK);
<a name="l00133"></a>00133           
<a name="l00134"></a>00134           <span class="comment">// Continue</span>
<a name="l00135"></a>00135         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgPressAnyKey,<span class="stringliteral">&quot; [press any key]&quot;</span>);
<a name="l00136"></a>00136         console-&gt;Printf(KMsgPressAnyKey);
<a name="l00137"></a>00137         console-&gt;Getch();
<a name="l00138"></a>00138 
<a name="l00139"></a>00139           <span class="comment">// Remove the console object from the cleanupstack</span>
<a name="l00140"></a>00140           <span class="comment">// and destroy it. </span>
<a name="l00141"></a>00141         CleanupStack::PopAndDestroy();
<a name="l00142"></a>00142     }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 
<a name="l00146"></a>00146 <span class="comment">//</span>
<a name="l00147"></a>00147 <span class="comment">// Do the example</span>
<a name="l00148"></a>00148 <span class="comment">//</span>
<a name="l00149"></a>00149 <span class="comment">// Enriched example UsingNewL by using NewLC() instead of NewL().</span>
<a name="l00150"></a>00150 <span class="comment">// The function NewLC() both allocates a CExample object and pushes</span>
<a name="l00151"></a>00151 <span class="comment">// the object onto the cleanup stack</span>
<a name="l00152"></a>00152 <span class="comment">//</span>
<a name="l00154"></a>00154 <span class="comment"></span><span class="keywordtype">void</span> doExampleL()
<a name="l00155"></a>00155         {
<a name="l00156"></a>00156           <span class="comment">// Memory alloc fails on the &#39;allocFailNumber&#39; attempt. </span>
<a name="l00157"></a>00157         __UHEAP_SETFAIL(RHeap::EDeterministic,allocFailNumber);
<a name="l00158"></a>00158           <span class="comment">// Allocate and push onto the cleanup stack - leave if </span>
<a name="l00159"></a>00159           <span class="comment">// allocation fails.</span>
<a name="l00160"></a>00160         CExample* myExample = CExample::NewLC(5);
<a name="l00161"></a>00161           <span class="comment">// Do something that can leave.</span>
<a name="l00162"></a>00162         myExample-&gt;DoSomethingL();
<a name="l00163"></a>00163           <span class="comment">// Pop from the cleanup stack and destroy</span>
<a name="l00164"></a>00164         CleanupStack::PopAndDestroy();
<a name="l00165"></a>00165         }
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/ForumNokia/HTTPClientExample/src/ClientEngine.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/ForumNokia/HTTPClientExample/src/ClientEngine.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2009 Nokia Corporation.</span>
<a name="l00003"></a>00003 <span class="comment"> */</span>
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;avkon.hrh&gt;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;aknnotewrappers.h&gt;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;aknlists.h&gt;</span> <span class="comment">// CAknSinglePopupMenuStyleListBox</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;uri8.h&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;http.h&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;stringloader.h&gt;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;chttpformencoder.h&gt;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;HttpStringConstants.h&gt;</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &lt;http\RHTTPTransaction.h&gt;</span>
<a name="l00014"></a>00014 <span class="preprocessor">#include &lt;http\RHTTPSession.h&gt;</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &lt;http\RHTTPHeaders.h&gt;</span>
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;HTTPClientExample.rsg&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;CommDbConnPref.h&gt;</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;Client.pan&quot;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;Client.hrh&quot;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &quot;ClientEngine.h&quot;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Used user agent for requests</span>
<a name="l00024"></a>00024 _LIT8(KUserAgent, <span class="stringliteral">&quot;SimpleClient 1.0&quot;</span>);
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="comment">// This client accepts all content types.</span>
<a name="l00027"></a>00027 <span class="comment">// (change to e.g. &quot;text/plain&quot; for plain text only)</span>
<a name="l00028"></a>00028 _LIT8(KAccept, <span class="stringliteral">&quot;*/*&quot;</span>);
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextPreferredCarrierAvailable,<span class="stringliteral">&quot;Preferred carrier available&quot;</span>);
<a name="l00031"></a>00031 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextNewCarrierActive,         <span class="stringliteral">&quot;New carrier active&quot;</span>);
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">const</span> TInt KStatustextBufferSize = 32;
<a name="l00034"></a>00034 <span class="keyword">const</span> TInt KInfotextBufferSize = 64;
<a name="l00035"></a>00035 <span class="keyword">const</span> TInt KURIBufferSize = 128;
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00038"></a>00038 <span class="comment">// CClientEngine::NewL()</span>
<a name="l00039"></a>00039 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00040"></a>00040 <a class="code" href="class_c_client_engine.html">CClientEngine</a>* CClientEngine::NewL(<a class="code" href="class_m_client_observer.html">MClientObserver</a>&amp; aObserver)
<a name="l00041"></a>00041   {
<a name="l00042"></a>00042     <a class="code" href="class_c_client_engine.html">CClientEngine</a>* <span class="keyword">self</span> = CClientEngine::NewLC(aObserver);
<a name="l00043"></a>00043     CleanupStack::Pop(<span class="keyword">self</span>);
<a name="l00044"></a>00044     <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00045"></a>00045   }
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00049"></a>00049 <span class="comment">// CClientEngine::NewLC()</span>
<a name="l00050"></a>00050 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00051"></a>00051 <a class="code" href="class_c_client_engine.html">CClientEngine</a>* CClientEngine::NewLC(<a class="code" href="class_m_client_observer.html">MClientObserver</a>&amp; aObserver)
<a name="l00052"></a>00052   {
<a name="l00053"></a>00053     <a class="code" href="class_c_client_engine.html">CClientEngine</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_client_engine.html">CClientEngine</a>(aObserver);
<a name="l00054"></a>00054     CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00055"></a>00055     <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00056"></a>00056     <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00057"></a>00057   }
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00061"></a>00061 <span class="comment">// CClientEngine::CClientEngine()</span>
<a name="l00062"></a>00062 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00063"></a>00063 CClientEngine::CClientEngine(<a class="code" href="class_m_client_observer.html">MClientObserver</a>&amp; aObserver)
<a name="l00064"></a>00064 : CActive(CActive::EPriorityStandard),
<a name="l00065"></a>00065   iObserver(aObserver),
<a name="l00066"></a>00066   iPostData(NULL),
<a name="l00067"></a>00067   iConnectionSetupDone(EFalse),
<a name="l00068"></a>00068   iPrevProfileId(-1),
<a name="l00069"></a>00069   iTransactionOpen(EFalse)
<a name="l00070"></a>00070   {
<a name="l00071"></a>00071   }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00075"></a>00075 <span class="comment">// CClientEngine::~CClientEngine()</span>
<a name="l00076"></a>00076 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00077"></a>00077 CClientEngine::~CClientEngine()
<a name="l00078"></a>00078     {
<a name="l00079"></a>00079     Cancel();
<a name="l00080"></a>00080 
<a name="l00081"></a>00081     <span class="keywordflow">if</span> (iTransactionOpen)
<a name="l00082"></a>00082         {
<a name="l00083"></a>00083         iTransaction.Close();
<a name="l00084"></a>00084         iTransactionOpen = EFalse;
<a name="l00085"></a>00085         }
<a name="l00086"></a>00086     
<a name="l00087"></a>00087     <span class="keywordflow">if</span> (iMobility)
<a name="l00088"></a>00088         {
<a name="l00089"></a>00089         iMobility-&gt;Cancel();
<a name="l00090"></a>00090         }
<a name="l00091"></a>00091     <span class="keyword">delete</span> iMobility;
<a name="l00092"></a>00092 
<a name="l00093"></a>00093     iSession.Close();
<a name="l00094"></a>00094     iConnection.Close();
<a name="l00095"></a>00095     iSocketServ.Close();
<a name="l00096"></a>00096 
<a name="l00097"></a>00097     <span class="keyword">delete</span> iPostData;
<a name="l00098"></a>00098 
<a name="l00099"></a>00099     <span class="keyword">delete</span> iUri;
<a name="l00100"></a>00100     <span class="keyword">delete</span> iContentType;
<a name="l00101"></a>00101     <span class="keyword">delete</span> iBody;
<a name="l00102"></a>00102     }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00106"></a>00106 <span class="comment">// CClientEngine::ConstructL()</span>
<a name="l00107"></a>00107 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00108"></a>00108 <span class="keywordtype">void</span> CClientEngine::ConstructL()
<a name="l00109"></a>00109   {
<a name="l00110"></a>00110   CActiveScheduler::Add(<span class="keyword">this</span>);
<a name="l00111"></a>00111   }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00115"></a>00115 <span class="comment">// CClientEngine::SetupConnectionL()</span>
<a name="l00116"></a>00116 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00117"></a>00117 <span class="keywordtype">void</span> CClientEngine::SetupConnectionL()
<a name="l00118"></a>00118     {
<a name="l00119"></a>00119     <span class="keywordflow">if</span> (iConnectionSetupDone)
<a name="l00120"></a>00120         {
<a name="l00121"></a>00121         <span class="comment">// Connection setup is done</span>
<a name="l00122"></a>00122         User::Leave(KErrAlreadyExists);
<a name="l00123"></a>00123         }
<a name="l00124"></a>00124     <span class="keywordflow">if</span> (IsActive())
<a name="l00125"></a>00125         {
<a name="l00126"></a>00126         User::Leave(KErrInUse);
<a name="l00127"></a>00127         }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129     <span class="comment">// Open HTTP Session</span>
<a name="l00130"></a>00130     iSession.OpenL();
<a name="l00131"></a>00131     
<a name="l00132"></a>00132     <span class="comment">// Install this class as the callback for authentication requests. When</span>
<a name="l00133"></a>00133     <span class="comment">// page requires authentication the framework calls GetCredentialsL to get</span>
<a name="l00134"></a>00134     <span class="comment">// user name and password.</span>
<a name="l00135"></a>00135     InstallAuthenticationL(iSession);
<a name="l00136"></a>00136 
<a name="l00137"></a>00137     <span class="comment">// Open CCmApplicationSettingsUi</span>
<a name="l00138"></a>00138     TCmSettingSelection userSelection;
<a name="l00139"></a>00139     CCmApplicationSettingsUi* settings = CCmApplicationSettingsUi::NewL();
<a name="l00140"></a>00140     CleanupStack::PushL(settings);
<a name="l00141"></a>00141     TUint listedItems = CMManager::EShowAlwaysAsk |
<a name="l00142"></a>00142                         CMManager::EShowDefaultConnection |
<a name="l00143"></a>00143                         CMManager::EShowDestinations |
<a name="l00144"></a>00144                         CMManager::EShowConnectionMethods;
<a name="l00145"></a>00145     TBearerFilterArray filter;
<a name="l00146"></a>00146     TBool selected = settings-&gt;RunApplicationSettingsL(userSelection,listedItems,filter);
<a name="l00147"></a>00147     CleanupStack::PopAndDestroy(settings);
<a name="l00148"></a>00148 
<a name="l00149"></a>00149     <span class="comment">// Check selection</span>
<a name="l00150"></a>00150     <span class="keywordflow">if</span> (selected) {
<a name="l00151"></a>00151         <span class="keywordflow">switch</span> (userSelection.iResult)
<a name="l00152"></a>00152             {
<a name="l00153"></a>00153             <span class="keywordflow">case</span> CMManager::EDestination:
<a name="l00154"></a>00154                 {
<a name="l00155"></a>00155                 TConnSnapPref prefs;
<a name="l00156"></a>00156                 prefs.SetSnap(userSelection.iId);
<a name="l00157"></a>00157         
<a name="l00158"></a>00158                 User::LeaveIfError(iSocketServ.Connect());
<a name="l00159"></a>00159                 User::LeaveIfError(iConnection.Open(iSocketServ));
<a name="l00160"></a>00160                 iConnection.Start(prefs, iStatus);
<a name="l00161"></a>00161                 <span class="keywordflow">break</span>;
<a name="l00162"></a>00162                 }
<a name="l00163"></a>00163             <span class="keywordflow">case</span> CMManager::EConnectionMethod:
<a name="l00164"></a>00164                 {
<a name="l00165"></a>00165                 TCommDbConnPref prefs;
<a name="l00166"></a>00166                 prefs.SetIapId(userSelection.iId);
<a name="l00167"></a>00167                 prefs.SetDialogPreference(ECommDbDialogPrefDoNotPrompt);
<a name="l00168"></a>00168         
<a name="l00169"></a>00169                 User::LeaveIfError(iSocketServ.Connect());
<a name="l00170"></a>00170                 User::LeaveIfError(iConnection.Open(iSocketServ));
<a name="l00171"></a>00171                 iConnection.Start(prefs, iStatus);
<a name="l00172"></a>00172                 <span class="keywordflow">break</span>;
<a name="l00173"></a>00173                 }
<a name="l00174"></a>00174             <span class="keywordflow">case</span> CMManager::EDefaultConnection:
<a name="l00175"></a>00175                 {
<a name="l00176"></a>00176                 User::LeaveIfError(iSocketServ.Connect());
<a name="l00177"></a>00177                 User::LeaveIfError(iConnection.Open(iSocketServ));
<a name="l00178"></a>00178                 iConnection.Start(iStatus);
<a name="l00179"></a>00179                 <span class="keywordflow">break</span>;
<a name="l00180"></a>00180                 }
<a name="l00181"></a>00181             <span class="keywordflow">default</span>: <span class="comment">// EAlwaysAsk</span>
<a name="l00182"></a>00182                 {
<a name="l00183"></a>00183                 TCommDbConnPref prefs;
<a name="l00184"></a>00184                 prefs.SetDialogPreference(ECommDbDialogPrefPrompt);
<a name="l00185"></a>00185         
<a name="l00186"></a>00186                 User::LeaveIfError(iSocketServ.Connect());
<a name="l00187"></a>00187                 User::LeaveIfError(iConnection.Open(iSocketServ));
<a name="l00188"></a>00188                 iConnection.Start(prefs, iStatus);
<a name="l00189"></a>00189                 }
<a name="l00190"></a>00190             }
<a name="l00191"></a>00191         
<a name="l00192"></a>00192         SetActive();
<a name="l00193"></a>00193         }
<a name="l00194"></a>00194     }
<a name="l00195"></a>00195 
<a name="l00196"></a>00196 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00197"></a>00197 <span class="comment">// CClientEngine::FindExistingConnection()</span>
<a name="l00198"></a>00198 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00199"></a>00199 TBool CClientEngine::FindExistingConnection()
<a name="l00200"></a>00200     {
<a name="l00201"></a>00201     <span class="comment">// NOTE: this method is not in use</span>
<a name="l00202"></a>00202 
<a name="l00203"></a>00203     <span class="comment">// Enumerates through existing connections and tries to find one that matches</span>
<a name="l00204"></a>00204     <span class="comment">// the selected IAP. If one is found, ETrue is returned; otherwise, EFalse.</span>
<a name="l00205"></a>00205     TBool connected = EFalse;
<a name="l00206"></a>00206     TConnectionInfoBuf connInfo;
<a name="l00207"></a>00207     TUint count;
<a name="l00208"></a>00208     <span class="keywordflow">if</span> (iConnection.EnumerateConnections(count) == KErrNone)
<a name="l00209"></a>00209         {
<a name="l00210"></a>00210         <span class="keywordflow">for</span> (TUint i=1; i&lt;=count; i++)
<a name="l00211"></a>00211             {
<a name="l00212"></a>00212             <span class="comment">// Note: GetConnectionInfo expects 1-based index.</span>
<a name="l00213"></a>00213             <span class="keywordflow">if</span> (iConnection.GetConnectionInfo(i, connInfo) == KErrNone)
<a name="l00214"></a>00214                 {
<a name="l00215"></a>00215                 <span class="keywordflow">if</span> (connInfo().iIapId == iSelectedIap)
<a name="l00216"></a>00216                     {
<a name="l00217"></a>00217                     connected = ETrue;
<a name="l00218"></a>00218                     <span class="keywordflow">break</span>;
<a name="l00219"></a>00219                     }
<a name="l00220"></a>00220                 }
<a name="l00221"></a>00221             }
<a name="l00222"></a>00222         }
<a name="l00223"></a>00223     <span class="keywordflow">return</span> connected;
<a name="l00224"></a>00224     }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00227"></a>00227 <span class="comment">// CClientEngine::SetHeaderL()</span>
<a name="l00228"></a>00228 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00229"></a>00229 <span class="keywordtype">void</span> CClientEngine::SetHeaderL(RHTTPHeaders aHeaders,
<a name="l00230"></a>00230                TInt aHdrField,
<a name="l00231"></a>00231                <span class="keyword">const</span> TDesC8&amp; aHdrValue)
<a name="l00232"></a>00232   {
<a name="l00233"></a>00233   RStringF valStr = iSession.StringPool().OpenFStringL(aHdrValue);
<a name="l00234"></a>00234   CleanupClosePushL(valStr);
<a name="l00235"></a>00235   THTTPHdrVal val(valStr);
<a name="l00236"></a>00236   aHeaders.SetFieldL(iSession.StringPool().StringF(aHdrField,
<a name="l00237"></a>00237     RHTTPSession::GetTable()), val);
<a name="l00238"></a>00238   CleanupStack::PopAndDestroy();  <span class="comment">// valStr</span>
<a name="l00239"></a>00239   }
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00243"></a>00243 <span class="comment">// CClientEngine::IssueHTTPGetL()</span>
<a name="l00244"></a>00244 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00245"></a>00245 <span class="keywordtype">void</span> CClientEngine::IssueHTTPGetL(<span class="keyword">const</span> TDesC8&amp; aUri)
<a name="l00246"></a>00246   {
<a name="l00247"></a>00247   <span class="keywordflow">if</span> (IsActive())
<a name="l00248"></a>00248       {
<a name="l00249"></a>00249       <span class="keywordflow">return</span>;
<a name="l00250"></a>00250       }
<a name="l00251"></a>00251   
<a name="l00252"></a>00252   iEngineState = EGet;
<a name="l00253"></a>00253   
<a name="l00254"></a>00254   <span class="keyword">delete</span> iUri; iUri = NULL;
<a name="l00255"></a>00255   <span class="keyword">delete</span> iContentType; iContentType = NULL;
<a name="l00256"></a>00256   <span class="keyword">delete</span> iBody; iBody = NULL;
<a name="l00257"></a>00257   
<a name="l00258"></a>00258   iUri = aUri.AllocL();
<a name="l00259"></a>00259 
<a name="l00260"></a>00260   <span class="comment">// Create HTTP connection</span>
<a name="l00261"></a>00261   TRAPD(err, SetupConnectionL());
<a name="l00262"></a>00262   <span class="keywordflow">if</span> (err == KErrAlreadyExists)
<a name="l00263"></a>00263       {
<a name="l00264"></a>00264       DoHTTPGetL();
<a name="l00265"></a>00265       }
<a name="l00266"></a>00266   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (err != KErrNone)
<a name="l00267"></a>00267       {
<a name="l00268"></a>00268       HBufC* resTxCancelled = StringLoader::LoadLC(R_HTTP_TX_CANCELLED);
<a name="l00269"></a>00269       iObserver.ClientEvent(*resTxCancelled);
<a name="l00270"></a>00270       CleanupStack::PopAndDestroy(resTxCancelled);
<a name="l00271"></a>00271       <span class="keywordflow">return</span>;
<a name="l00272"></a>00272       }
<a name="l00273"></a>00273   }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 
<a name="l00276"></a>00276 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00277"></a>00277 <span class="comment">// CClientEngine::DoHTTPGetL()</span>
<a name="l00278"></a>00278 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00279"></a>00279 <span class="keywordtype">void</span> CClientEngine::DoHTTPGetL()
<a name="l00280"></a>00280   {
<a name="l00281"></a>00281   <span class="comment">// Parse string to URI (as defined in RFC2396)</span>
<a name="l00282"></a>00282   TUriParser8 uri;
<a name="l00283"></a>00283   uri.Parse(*iUri);
<a name="l00284"></a>00284   
<a name="l00285"></a>00285   <span class="comment">// Get request method string for HTTP GET</span>
<a name="l00286"></a>00286   RStringF method = iSession.StringPool().StringF(HTTP::EGET,RHTTPSession::GetTable());
<a name="l00287"></a>00287 
<a name="l00288"></a>00288   <span class="comment">// Open transaction with previous method and parsed uri. This class will</span>
<a name="l00289"></a>00289   <span class="comment">// receive transaction events in MHFRunL and MHFRunError.</span>
<a name="l00290"></a>00290   iTransaction = iSession.OpenTransactionL(uri, *<span class="keyword">this</span>, method);
<a name="l00291"></a>00291   iTransactionOpen = ETrue;
<a name="l00292"></a>00292   
<a name="l00293"></a>00293   <span class="comment">// Set headers for request; user agent and accepted content type</span>
<a name="l00294"></a>00294   RHTTPHeaders hdr = iTransaction.Request().GetHeaderCollection();
<a name="l00295"></a>00295   SetHeaderL(hdr, HTTP::EUserAgent, KUserAgent);
<a name="l00296"></a>00296   SetHeaderL(hdr, HTTP::EAccept, KAccept);
<a name="l00297"></a>00297 
<a name="l00298"></a>00298   <span class="comment">// Submit the transaction. After this the framework will give transaction</span>
<a name="l00299"></a>00299   <span class="comment">// events via MHFRunL and MHFRunError.</span>
<a name="l00300"></a>00300   iTransaction.SubmitL();
<a name="l00301"></a>00301 
<a name="l00302"></a>00302   HBufC* resConnecting = StringLoader::LoadLC(R_HTTP_CONNECTING);
<a name="l00303"></a>00303   iObserver.ClientEvent(*resConnecting);
<a name="l00304"></a>00304   CleanupStack::PopAndDestroy(resConnecting);
<a name="l00305"></a>00305   }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00309"></a>00309 <span class="comment">// CClientEngine::IssueHTTPPostL()</span>
<a name="l00310"></a>00310 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00311"></a>00311 <span class="keywordtype">void</span> CClientEngine::IssueHTTPPostL(<span class="keyword">const</span> TDesC8&amp; aUri,
<a name="l00312"></a>00312                  <span class="keyword">const</span> TDesC8&amp; aContentType,
<a name="l00313"></a>00313                  <span class="keyword">const</span> TDesC8&amp; aBody)
<a name="l00314"></a>00314   {
<a name="l00315"></a>00315   <span class="keywordflow">if</span> (IsActive())
<a name="l00316"></a>00316       {
<a name="l00317"></a>00317       <span class="keywordflow">return</span>;
<a name="l00318"></a>00318       }
<a name="l00319"></a>00319 
<a name="l00320"></a>00320   iEngineState = EPost;
<a name="l00321"></a>00321 
<a name="l00322"></a>00322   <span class="keyword">delete</span> iUri; iUri = NULL;
<a name="l00323"></a>00323   <span class="keyword">delete</span> iContentType; iContentType = NULL;
<a name="l00324"></a>00324   <span class="keyword">delete</span> iBody; iBody = NULL;
<a name="l00325"></a>00325   
<a name="l00326"></a>00326   iUri = aUri.AllocL();
<a name="l00327"></a>00327   iContentType = aContentType.AllocL();
<a name="l00328"></a>00328   iBody = aBody.AllocL();
<a name="l00329"></a>00329 
<a name="l00330"></a>00330   <span class="comment">// Create HTTP connection</span>
<a name="l00331"></a>00331   TRAPD(err, SetupConnectionL());
<a name="l00332"></a>00332   <span class="keywordflow">if</span> (err == KErrAlreadyExists)
<a name="l00333"></a>00333       {
<a name="l00334"></a>00334       DoHTTPPostL();
<a name="l00335"></a>00335       }
<a name="l00336"></a>00336   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (err != KErrNone)
<a name="l00337"></a>00337       {
<a name="l00338"></a>00338       HBufC* resTxCancelled = StringLoader::LoadLC(R_HTTP_TX_CANCELLED);
<a name="l00339"></a>00339       iObserver.ClientEvent(*resTxCancelled);
<a name="l00340"></a>00340       CleanupStack::PopAndDestroy(resTxCancelled);
<a name="l00341"></a>00341       <span class="keywordflow">return</span>;
<a name="l00342"></a>00342       }
<a name="l00343"></a>00343 }
<a name="l00344"></a>00344 
<a name="l00345"></a>00345 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00346"></a>00346 <span class="comment">// CClientEngine::DoHTTPPostL()</span>
<a name="l00347"></a>00347 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00348"></a>00348 <span class="keywordtype">void</span> CClientEngine::DoHTTPPostL()
<a name="l00349"></a>00349   {
<a name="l00350"></a>00350   <span class="comment">// Parse string to URI</span>
<a name="l00351"></a>00351   TUriParser8 uri;
<a name="l00352"></a>00352   uri.Parse(*iUri);
<a name="l00353"></a>00353 
<a name="l00354"></a>00354   <span class="comment">// Copy data to be posted into member variable; iPostData is used later in</span>
<a name="l00355"></a>00355   <span class="comment">// methods inherited from MHTTPDataSupplier.</span>
<a name="l00356"></a>00356   <span class="keyword">delete</span> iPostData;
<a name="l00357"></a>00357   iPostData = 0;
<a name="l00358"></a>00358   iPostData = iBody-&gt;AllocL();
<a name="l00359"></a>00359 
<a name="l00360"></a>00360   <span class="comment">// Get request method string for HTTP POST</span>
<a name="l00361"></a>00361   RStringF method = iSession.StringPool().StringF(HTTP::EPOST,RHTTPSession::GetTable());
<a name="l00362"></a>00362 
<a name="l00363"></a>00363   <span class="comment">// Open transaction with previous method and parsed uri. This class will</span>
<a name="l00364"></a>00364   <span class="comment">// receive transaction events in MHFRunL and MHFRunError.</span>
<a name="l00365"></a>00365   iTransaction = iSession.OpenTransactionL(uri, *<span class="keyword">this</span>, method);
<a name="l00366"></a>00366   iTransactionOpen = ETrue;
<a name="l00367"></a>00367 
<a name="l00368"></a>00368   <span class="comment">// Set headers for request; user agent, accepted content type and body&#39;s</span>
<a name="l00369"></a>00369   <span class="comment">// content type.</span>
<a name="l00370"></a>00370   RHTTPHeaders hdr = iTransaction.Request().GetHeaderCollection();
<a name="l00371"></a>00371   SetHeaderL(hdr, HTTP::EUserAgent, KUserAgent);
<a name="l00372"></a>00372   SetHeaderL(hdr, HTTP::EAccept, KAccept);
<a name="l00373"></a>00373   SetHeaderL(hdr, HTTP::EContentType, *iContentType);
<a name="l00374"></a>00374 
<a name="l00375"></a>00375   <span class="comment">// Set this class as an data supplier. Inherited MHTTPDataSupplier methods</span>
<a name="l00376"></a>00376   <span class="comment">// are called when framework needs to send body data.</span>
<a name="l00377"></a>00377   MHTTPDataSupplier* dataSupplier = <span class="keyword">this</span>;
<a name="l00378"></a>00378   iTransaction.Request().SetBody(*dataSupplier);
<a name="l00379"></a>00379 
<a name="l00380"></a>00380   <span class="comment">// Submit the transaction. After this the framework will give transaction</span>
<a name="l00381"></a>00381   <span class="comment">// events via MHFRunL and MHFRunError.</span>
<a name="l00382"></a>00382   iTransaction.SubmitL();
<a name="l00383"></a>00383 
<a name="l00384"></a>00384   HBufC* resConnecting = StringLoader::LoadLC(R_HTTP_CONNECTING);
<a name="l00385"></a>00385   iObserver.ClientEvent(*resConnecting);
<a name="l00386"></a>00386   CleanupStack::PopAndDestroy(resConnecting);
<a name="l00387"></a>00387   }
<a name="l00388"></a>00388 
<a name="l00389"></a>00389 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00390"></a>00390 <span class="comment">// CClientEngine::CancelTransaction()</span>
<a name="l00391"></a>00391 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00392"></a>00392 <span class="keywordtype">void</span> CClientEngine::CancelTransaction()
<a name="l00393"></a>00393   {
<a name="l00394"></a>00394   iEngineState = EIdle;
<a name="l00395"></a>00395   <span class="keyword">delete</span> iUri; iUri = NULL;
<a name="l00396"></a>00396   <span class="keyword">delete</span> iContentType; iContentType = NULL;
<a name="l00397"></a>00397   <span class="keyword">delete</span> iBody; iBody = NULL;
<a name="l00398"></a>00398   
<a name="l00399"></a>00399   <span class="comment">// Close() also cancels transaction (Cancel() can also be used but</span>
<a name="l00400"></a>00400   <span class="comment">// resources allocated by transaction must be still freed with Close())</span>
<a name="l00401"></a>00401   <span class="keywordflow">if</span> (iTransactionOpen)
<a name="l00402"></a>00402       {
<a name="l00403"></a>00403       iTransaction.Close();
<a name="l00404"></a>00404       iTransactionOpen = EFalse;
<a name="l00405"></a>00405 
<a name="l00406"></a>00406       HBufC* resTxCancelled = StringLoader::LoadLC(R_HTTP_TX_CANCELLED);
<a name="l00407"></a>00407       iObserver.ClientEvent(*resTxCancelled);
<a name="l00408"></a>00408       CleanupStack::PopAndDestroy(resTxCancelled);
<a name="l00409"></a>00409       }
<a name="l00410"></a>00410   }
<a name="l00411"></a>00411 
<a name="l00412"></a>00412 
<a name="l00413"></a>00413 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00414"></a>00414 <span class="comment">// CClientEngine::MHFRunL()</span>
<a name="l00415"></a>00415 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00416"></a>00416 <span class="keywordtype">void</span> CClientEngine::MHFRunL(RHTTPTransaction aTransaction,
<a name="l00417"></a>00417               <span class="keyword">const</span> THTTPEvent&amp; aEvent)
<a name="l00418"></a>00418   {
<a name="l00419"></a>00419   <span class="keywordflow">switch</span> (aEvent.iStatus)
<a name="l00420"></a>00420     {
<a name="l00421"></a>00421     <span class="keywordflow">case</span> THTTPEvent::EGotResponseHeaders:
<a name="l00422"></a>00422       {
<a name="l00423"></a>00423       <span class="comment">// HTTP response headers have been received. Use</span>
<a name="l00424"></a>00424       <span class="comment">// aTransaction.Response() to get the response. However, it&#39;s not</span>
<a name="l00425"></a>00425       <span class="comment">// necessary to do anything with the response when this event occurs.</span>
<a name="l00426"></a>00426 
<a name="l00427"></a>00427       <span class="comment">// Get HTTP status code from header (e.g. 200)</span>
<a name="l00428"></a>00428       RHTTPResponse resp = aTransaction.Response();
<a name="l00429"></a>00429       TInt status = resp.StatusCode();
<a name="l00430"></a>00430 
<a name="l00431"></a>00431       <span class="comment">// Get status text (e.g. &quot;OK&quot;)</span>
<a name="l00432"></a>00432       TBuf&lt;KStatustextBufferSize&gt; statusText;
<a name="l00433"></a>00433       statusText.Copy(resp.StatusText().DesC());
<a name="l00434"></a>00434 
<a name="l00435"></a>00435       HBufC* resHeaderReceived = StringLoader::LoadLC(R_HTTP_HEADER_RECEIVED, statusText, status);
<a name="l00436"></a>00436       iObserver.ClientEvent(*resHeaderReceived);
<a name="l00437"></a>00437       CleanupStack::PopAndDestroy(resHeaderReceived);
<a name="l00438"></a>00438       <span class="keywordflow">break</span>;
<a name="l00439"></a>00439       }
<a name="l00440"></a>00440 
<a name="l00441"></a>00441     <span class="keywordflow">case</span> THTTPEvent::EGotResponseBodyData:
<a name="l00442"></a>00442       {
<a name="l00443"></a>00443       <span class="comment">// Part (or all) of response&#39;s body data received. Use</span>
<a name="l00444"></a>00444       <span class="comment">// aTransaction.Response().Body()-&gt;GetNextDataPart() to get the actual</span>
<a name="l00445"></a>00445       <span class="comment">// body data.</span>
<a name="l00446"></a>00446 
<a name="l00447"></a>00447       <span class="comment">// Get the body data supplier</span>
<a name="l00448"></a>00448       MHTTPDataSupplier* body = aTransaction.Response().Body();
<a name="l00449"></a>00449       TPtrC8 dataChunk;
<a name="l00450"></a>00450 
<a name="l00451"></a>00451       <span class="comment">// GetNextDataPart() returns ETrue, if the received part is the last</span>
<a name="l00452"></a>00452       <span class="comment">// one.</span>
<a name="l00453"></a>00453       TBool isLast = body-&gt;GetNextDataPart(dataChunk);
<a name="l00454"></a>00454       iObserver.ClientBodyReceived(dataChunk);
<a name="l00455"></a>00455 
<a name="l00456"></a>00456       HBufC* resBytesReceived = StringLoader::LoadLC(R_HTTP_BYTES_RECEIVED, dataChunk.Length());
<a name="l00457"></a>00457       iObserver.ClientEvent(*resBytesReceived);
<a name="l00458"></a>00458       CleanupStack::PopAndDestroy(resBytesReceived);
<a name="l00459"></a>00459 
<a name="l00460"></a>00460       <span class="comment">// NOTE: isLast may not be ETrue even if last data part received.</span>
<a name="l00461"></a>00461       <span class="comment">// (e.g. multipart response without content length field)</span>
<a name="l00462"></a>00462       <span class="comment">// Use EResponseComplete to reliably determine when body is completely</span>
<a name="l00463"></a>00463       <span class="comment">// received.</span>
<a name="l00464"></a>00464       <span class="keywordflow">if</span> (isLast)
<a name="l00465"></a>00465         {
<a name="l00466"></a>00466         HBufC* resBodyReceived = StringLoader::LoadLC(R_HTTP_BODY_RECEIVED);
<a name="l00467"></a>00467         iObserver.ClientEvent(*resBodyReceived);
<a name="l00468"></a>00468         CleanupStack::PopAndDestroy(resBodyReceived);
<a name="l00469"></a>00469         }
<a name="l00470"></a>00470 
<a name="l00471"></a>00471       <span class="comment">// Always remember to release the body data.</span>
<a name="l00472"></a>00472       body-&gt;ReleaseData();
<a name="l00473"></a>00473       <span class="keywordflow">break</span>;
<a name="l00474"></a>00474       }
<a name="l00475"></a>00475 
<a name="l00476"></a>00476     <span class="keywordflow">case</span> THTTPEvent::EResponseComplete:
<a name="l00477"></a>00477       {
<a name="l00478"></a>00478       <span class="comment">// Indicates that header &amp; body of response is completely received.</span>
<a name="l00479"></a>00479       <span class="comment">// No further action here needed.</span>
<a name="l00480"></a>00480       HBufC* resTxComplete = StringLoader::LoadLC(R_HTTP_TX_COMPLETE);
<a name="l00481"></a>00481       iObserver.ClientEvent(*resTxComplete);
<a name="l00482"></a>00482       CleanupStack::PopAndDestroy(resTxComplete);
<a name="l00483"></a>00483       <span class="keywordflow">break</span>;
<a name="l00484"></a>00484       }
<a name="l00485"></a>00485 
<a name="l00486"></a>00486     <span class="keywordflow">case</span> THTTPEvent::ESucceeded:
<a name="l00487"></a>00487       {
<a name="l00488"></a>00488       <span class="comment">// Indicates that transaction succeeded.</span>
<a name="l00489"></a>00489       HBufC* resTxSuccessful = StringLoader::LoadLC(R_HTTP_TX_SUCCESSFUL);
<a name="l00490"></a>00490       iObserver.ClientEvent(*resTxSuccessful);
<a name="l00491"></a>00491       CleanupStack::PopAndDestroy(resTxSuccessful);
<a name="l00492"></a>00492 
<a name="l00493"></a>00493       <span class="comment">// Transaction can be closed now. It&#39;s not needed anymore.</span>
<a name="l00494"></a>00494       aTransaction.Close();
<a name="l00495"></a>00495       iTransactionOpen = EFalse;
<a name="l00496"></a>00496       <span class="keywordflow">break</span>;
<a name="l00497"></a>00497       }
<a name="l00498"></a>00498 
<a name="l00499"></a>00499     <span class="keywordflow">case</span> THTTPEvent::EFailed:
<a name="l00500"></a>00500       {
<a name="l00501"></a>00501       <span class="comment">// Transaction completed with failure.</span>
<a name="l00502"></a>00502       HBufC* resTxFailed = StringLoader::LoadLC(R_HTTP_TX_FAILED);
<a name="l00503"></a>00503       iObserver.ClientEvent(*resTxFailed);
<a name="l00504"></a>00504       CleanupStack::PopAndDestroy(resTxFailed);
<a name="l00505"></a>00505       aTransaction.Close();
<a name="l00506"></a>00506       iTransactionOpen = EFalse;
<a name="l00507"></a>00507       <span class="keywordflow">break</span>;
<a name="l00508"></a>00508       }
<a name="l00509"></a>00509 
<a name="l00510"></a>00510     <span class="keywordflow">default</span>:
<a name="l00511"></a>00511       <span class="comment">// There are more events in THTTPEvent, but they are not usually</span>
<a name="l00512"></a>00512       <span class="comment">// needed. However, event status smaller than zero should be handled</span>
<a name="l00513"></a>00513       <span class="comment">// correctly since it&#39;s error.</span>
<a name="l00514"></a>00514       {
<a name="l00515"></a>00515       <span class="keywordflow">if</span> (aEvent.iStatus &lt; 0)
<a name="l00516"></a>00516         {
<a name="l00517"></a>00517           HBufC* resNoInternetConnection = StringLoader::LoadLC(
<a name="l00518"></a>00518             R_HTTP_NO_INTERNET_CONNECTION, aEvent.iStatus);
<a name="l00519"></a>00519           iObserver.ClientEvent(*resNoInternetConnection);
<a name="l00520"></a>00520           CleanupStack::PopAndDestroy(resNoInternetConnection);
<a name="l00521"></a>00521 
<a name="l00522"></a>00522           <span class="comment">// Close the transaction on errors</span>
<a name="l00523"></a>00523           aTransaction.Close();
<a name="l00524"></a>00524           iTransactionOpen = EFalse;
<a name="l00525"></a>00525         }
<a name="l00526"></a>00526       <span class="keywordflow">break</span>;
<a name="l00527"></a>00527       }
<a name="l00528"></a>00528     }
<a name="l00529"></a>00529   }
<a name="l00530"></a>00530 
<a name="l00531"></a>00531 
<a name="l00532"></a>00532 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00533"></a>00533 <span class="comment">// CClientEngine::IsRunning()</span>
<a name="l00534"></a>00534 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00535"></a>00535 TBool CClientEngine::IsRunning()
<a name="l00536"></a>00536     {
<a name="l00537"></a>00537     <span class="keywordflow">if</span> (IsActive())
<a name="l00538"></a>00538         <span class="keywordflow">return</span> ETrue;
<a name="l00539"></a>00539     <span class="keywordflow">else</span>
<a name="l00540"></a>00540         <span class="keywordflow">return</span> EFalse;
<a name="l00541"></a>00541     }
<a name="l00542"></a>00542 
<a name="l00543"></a>00543 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00544"></a>00544 <span class="comment">// CClientEngine::MHFRunError()</span>
<a name="l00545"></a>00545 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00546"></a>00546 TInt CClientEngine::MHFRunError(TInt aError,
<a name="l00547"></a>00547                 RHTTPTransaction <span class="comment">/*aTransaction*/</span>,
<a name="l00548"></a>00548                 <span class="keyword">const</span> THTTPEvent&amp; <span class="comment">/*aEvent*/</span>)
<a name="l00549"></a>00549   {
<a name="l00550"></a>00550   <span class="comment">// Just notify about the error and return KErrNone.</span>
<a name="l00551"></a>00551   HBufC* resMHFRunError = StringLoader::LoadLC(R_HTTP_MHFRUN_ERROR, aError);
<a name="l00552"></a>00552   iObserver.ClientEvent(*resMHFRunError);
<a name="l00553"></a>00553   CleanupStack::PopAndDestroy(resMHFRunError);
<a name="l00554"></a>00554   <span class="keywordflow">return</span> KErrNone;
<a name="l00555"></a>00555   }
<a name="l00556"></a>00556 
<a name="l00557"></a>00557 
<a name="l00558"></a>00558 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00559"></a>00559 <span class="comment">// CClientEngine::GetNextDataPart()</span>
<a name="l00560"></a>00560 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00561"></a>00561 TBool CClientEngine::GetNextDataPart(TPtrC8&amp; aDataPart)
<a name="l00562"></a>00562   {
<a name="l00563"></a>00563   <span class="keywordflow">if</span>(iPostData)
<a name="l00564"></a>00564     {
<a name="l00565"></a>00565     <span class="comment">// Provide pointer to next chunk of data (return ETrue, if last chunk)</span>
<a name="l00566"></a>00566     <span class="comment">// Usually only one chunk is needed, but sending big file could require</span>
<a name="l00567"></a>00567     <span class="comment">// loading the file in small parts.</span>
<a name="l00568"></a>00568     aDataPart.Set(iPostData-&gt;Des());
<a name="l00569"></a>00569     }
<a name="l00570"></a>00570   <span class="keywordflow">return</span> ETrue;
<a name="l00571"></a>00571   }
<a name="l00572"></a>00572 
<a name="l00573"></a>00573 
<a name="l00574"></a>00574 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00575"></a>00575 <span class="comment">// CClientEngine::ReleaseData()</span>
<a name="l00576"></a>00576 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00577"></a>00577 <span class="keywordtype">void</span> CClientEngine::ReleaseData()
<a name="l00578"></a>00578   {
<a name="l00579"></a>00579   <span class="comment">// It&#39;s safe to delete iPostData now.</span>
<a name="l00580"></a>00580   <span class="keyword">delete</span> iPostData;
<a name="l00581"></a>00581   iPostData = NULL;
<a name="l00582"></a>00582   }
<a name="l00583"></a>00583 
<a name="l00584"></a>00584 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00585"></a>00585 <span class="comment">// CClientEngine::Reset()</span>
<a name="l00586"></a>00586 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00587"></a>00587 TInt CClientEngine::Reset()
<a name="l00588"></a>00588   {
<a name="l00589"></a>00589   <span class="comment">// Nothing needed since iPostData still exists and contains all the data.</span>
<a name="l00590"></a>00590   <span class="comment">// (If a file is used and read in small parts we should seek to beginning</span>
<a name="l00591"></a>00591   <span class="comment">// of file and provide the first chunk again in GetNextDataPart() )</span>
<a name="l00592"></a>00592   <span class="keywordflow">return</span> KErrNone;
<a name="l00593"></a>00593   }
<a name="l00594"></a>00594 
<a name="l00595"></a>00595 
<a name="l00596"></a>00596 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00597"></a>00597 <span class="comment">// CClientEngine::OverallDataSize()</span>
<a name="l00598"></a>00598 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00599"></a>00599 TInt CClientEngine::OverallDataSize()
<a name="l00600"></a>00600   {
<a name="l00601"></a>00601   <span class="keywordflow">if</span>(iPostData)
<a name="l00602"></a>00602     <span class="keywordflow">return</span> iPostData-&gt;Length();
<a name="l00603"></a>00603   <span class="keywordflow">else</span>
<a name="l00604"></a>00604     <span class="keywordflow">return</span> KErrNotFound ;
<a name="l00605"></a>00605   }
<a name="l00606"></a>00606 
<a name="l00607"></a>00607 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00608"></a>00608 <span class="comment">// CClientEngine::GetCredentialsL()</span>
<a name="l00609"></a>00609 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00610"></a>00610 TBool CClientEngine::GetCredentialsL(<span class="keyword">const</span> TUriC8&amp; aURI,
<a name="l00611"></a>00611                    RString aRealm,
<a name="l00612"></a>00612                    RStringF aAuthenticationType,
<a name="l00613"></a>00613                    RString&amp; aUsername,
<a name="l00614"></a>00614                    RString&amp; aPassword)
<a name="l00615"></a>00615   {
<a name="l00616"></a>00616   <span class="comment">// aURI, aReal and aAuthenticationType are informational only. We only need</span>
<a name="l00617"></a>00617   <span class="comment">// to set aUsername and aPassword and return ETrue, if aUsername and</span>
<a name="l00618"></a>00618   <span class="comment">// aPassword are provided by user.</span>
<a name="l00619"></a>00619 
<a name="l00620"></a>00620   <span class="comment">// Buffer for string parameters that may change order</span>
<a name="l00621"></a>00621   CDesCArrayFlat* strings = <span class="keyword">new</span> CDesCArrayFlat(2);
<a name="l00622"></a>00622   CleanupStack::PushL(strings);
<a name="l00623"></a>00623 
<a name="l00624"></a>00624   <span class="comment">// Initialize parameter buffer</span>
<a name="l00625"></a>00625 
<a name="l00626"></a>00626   <span class="comment">// First parameter</span>
<a name="l00627"></a>00627   HBufC* uri16 = HBufC::NewLC(aURI.UriDes().Length());
<a name="l00628"></a>00628   uri16-&gt;Des().Copy(aURI.UriDes());
<a name="l00629"></a>00629   strings-&gt;AppendL(*uri16);
<a name="l00630"></a>00630   CleanupStack::PopAndDestroy(uri16);
<a name="l00631"></a>00631 
<a name="l00632"></a>00632   <span class="comment">// Second parameter</span>
<a name="l00633"></a>00633   HBufC* authType16 = HBufC::NewLC(aAuthenticationType.DesC().Length());
<a name="l00634"></a>00634   authType16-&gt;Des().Copy(aAuthenticationType.DesC());
<a name="l00635"></a>00635   strings-&gt;AppendL(*authType16);
<a name="l00636"></a>00636   CleanupStack::PopAndDestroy(authType16);
<a name="l00637"></a>00637 
<a name="l00638"></a>00638   HBufC* resAuthNote = StringLoader::LoadLC(R_HTTP_AUTH_NOTE, *strings);
<a name="l00639"></a>00639   HBufC* resAuthRequired = StringLoader::LoadLC(R_HTTP_AUTH_REQUIRED);
<a name="l00640"></a>00640   CEikonEnv::Static()-&gt;InfoWinL(*resAuthRequired, *resAuthNote);
<a name="l00641"></a>00641 
<a name="l00642"></a>00642   CleanupStack::PopAndDestroy(resAuthNote);
<a name="l00643"></a>00643   CleanupStack::PopAndDestroy(resAuthRequired);
<a name="l00644"></a>00644 
<a name="l00645"></a>00645   <span class="comment">// Query user name and password</span>
<a name="l00646"></a>00646   TBuf&lt;KDefaultBufferSize&gt; userName;
<a name="l00647"></a>00647   TBuf&lt;KDefaultBufferSize&gt; password;
<a name="l00648"></a>00648   CAknMultiLineDataQueryDialog* dlg =
<a name="l00649"></a>00649     CAknMultiLineDataQueryDialog::NewL(userName, password);
<a name="l00650"></a>00650 
<a name="l00651"></a>00651   <span class="keywordflow">if</span> (!dlg-&gt;ExecuteLD(R_DIALOG_USER_PASSWORD_QUERY))
<a name="l00652"></a>00652     <span class="keywordflow">return</span> EFalse; <span class="comment">// No credentials given; must return EFalse</span>
<a name="l00653"></a>00653 
<a name="l00654"></a>00654   <span class="comment">// Set aUsername and aPassword</span>
<a name="l00655"></a>00655   TBuf8&lt;KDefaultBufferSize&gt; temp;
<a name="l00656"></a>00656   temp.Copy(userName);
<a name="l00657"></a>00657   TRAPD(err, aUsername = aRealm.Pool().OpenStringL(temp));
<a name="l00658"></a>00658   <span class="keywordflow">if</span> (!err)
<a name="l00659"></a>00659     {
<a name="l00660"></a>00660     temp.Copy(password);
<a name="l00661"></a>00661     TRAP(err, aPassword = aRealm.Pool().OpenStringL(temp));
<a name="l00662"></a>00662     <span class="keywordflow">if</span> (!err) <span class="keywordflow">return</span> ETrue;
<a name="l00663"></a>00663     }
<a name="l00664"></a>00664 
<a name="l00665"></a>00665   <span class="comment">// Return ETrue if user has given credentials (username and password),</span>
<a name="l00666"></a>00666   <span class="comment">// otherwise EFlase</span>
<a name="l00667"></a>00667   <span class="keywordflow">return</span> EFalse;
<a name="l00668"></a>00668   }
<a name="l00669"></a>00669 
<a name="l00670"></a>00670 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00671"></a>00671 <span class="comment">// CClientEngine::PreferredCarrierAvailable()</span>
<a name="l00672"></a>00672 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00673"></a>00673 <span class="keywordtype">void</span> CClientEngine::PreferredCarrierAvailable(TAccessPointInfo <span class="comment">/*aOldAPInfo*/</span>,
<a name="l00674"></a>00674                                                   TAccessPointInfo <span class="comment">/*aNewAPInfo*/</span>,
<a name="l00675"></a>00675                                                   TBool <span class="comment">/*aIsUpgrade*/</span>,
<a name="l00676"></a>00676                                                   TBool aIsSeamless)
<a name="l00677"></a>00677     {
<a name="l00678"></a>00678     <span class="keywordflow">if</span> (!aIsSeamless)
<a name="l00679"></a>00679         {
<a name="l00680"></a>00680         iMobility-&gt;MigrateToPreferredCarrier();
<a name="l00681"></a>00681         }
<a name="l00682"></a>00682     }
<a name="l00683"></a>00683 
<a name="l00684"></a>00684 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00685"></a>00685 <span class="comment">// CClientEngine::NewCarrierActive()</span>
<a name="l00686"></a>00686 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00687"></a>00687 <span class="keywordtype">void</span> CClientEngine::NewCarrierActive(TAccessPointInfo <span class="comment">/*aNewAPInfo*/</span>,
<a name="l00688"></a>00688                                          TBool aIsSeamless)
<a name="l00689"></a>00689     {
<a name="l00690"></a>00690     <span class="keywordflow">if</span> (!aIsSeamless)
<a name="l00691"></a>00691         {
<a name="l00692"></a>00692         iMobility-&gt;NewCarrierAccepted();
<a name="l00693"></a>00693         }
<a name="l00694"></a>00694     }
<a name="l00695"></a>00695 
<a name="l00696"></a>00696 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00697"></a>00697 <span class="comment">// CClientEngine::Error()</span>
<a name="l00698"></a>00698 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00699"></a>00699 <span class="keywordtype">void</span> CClientEngine::Error(TInt <span class="comment">/*aError*/</span>)
<a name="l00700"></a>00700     {
<a name="l00701"></a>00701     }
<a name="l00702"></a>00702 
<a name="l00703"></a>00703 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00704"></a>00704 <span class="comment">// CClientEngine::DoCancel()</span>
<a name="l00705"></a>00705 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00706"></a>00706 <span class="keywordtype">void</span> CClientEngine::DoCancel()
<a name="l00707"></a>00707     {
<a name="l00708"></a>00708     iConnection.Stop();
<a name="l00709"></a>00709     }
<a name="l00710"></a>00710 
<a name="l00711"></a>00711 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00712"></a>00712 <span class="comment">// CClientEngine::RunL()</span>
<a name="l00713"></a>00713 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00714"></a>00714 <span class="keywordtype">void</span> CClientEngine::RunL()
<a name="l00715"></a>00715     {
<a name="l00716"></a>00716     TInt statusCode = iStatus.Int();
<a name="l00717"></a>00717 
<a name="l00718"></a>00718     <span class="keywordflow">if</span> (!iConnectionSetupDone &amp;&amp; statusCode == KErrNone)
<a name="l00719"></a>00719         {
<a name="l00720"></a>00720         <span class="comment">// Connection done ok</span>
<a name="l00721"></a>00721         iConnectionSetupDone = ETrue;
<a name="l00722"></a>00722         <span class="comment">// Register for mobility API</span>
<a name="l00723"></a>00723         iMobility = CActiveCommsMobilityApiExt::NewL(iConnection, *<span class="keyword">this</span>);
<a name="l00724"></a>00724         <span class="comment">// Start selected HTTP action</span>
<a name="l00725"></a>00725         <span class="keywordflow">switch</span> (iEngineState)
<a name="l00726"></a>00726            {
<a name="l00727"></a>00727             <span class="keywordflow">case</span> EIdle:
<a name="l00728"></a>00728                 {
<a name="l00729"></a>00729                 CancelTransaction();
<a name="l00730"></a>00730                 <span class="keywordflow">break</span>;
<a name="l00731"></a>00731                 }
<a name="l00732"></a>00732            <span class="keywordflow">case</span> EGet:
<a name="l00733"></a>00733                {
<a name="l00734"></a>00734                DoHTTPGetL();
<a name="l00735"></a>00735                <span class="keywordflow">break</span>;
<a name="l00736"></a>00736                }
<a name="l00737"></a>00737            <span class="keywordflow">case</span> EPost:
<a name="l00738"></a>00738                {
<a name="l00739"></a>00739                DoHTTPPostL();
<a name="l00740"></a>00740                <span class="keywordflow">break</span>;
<a name="l00741"></a>00741                }
<a name="l00742"></a>00742            };
<a name="l00743"></a>00743         }
<a name="l00744"></a>00744     }
<a name="l00745"></a>00745 
<a name="l00746"></a>00746 
<a name="l00747"></a>00747 <span class="comment">// end of file</span>
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

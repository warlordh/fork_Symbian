<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/AppFramework/UIControls/ControlFramework/src/ControlFrameworkView.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/AppFramework/UIControls/ControlFramework/src/ControlFrameworkView.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2006-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// ControlFrameworkAppView.cpp</span>
<a name="l00015"></a>00015 <span class="comment">//</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;eikenv.h&gt;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;controlframework.rsg&gt;</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;ControlFrameworkView.h&quot;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &quot;ControlFrameworkAppUi.h&quot;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;ControlFrameworkGlobals.h&quot;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="comment">// Maximum number of lines that the text can be split into </span>
<a name="l00025"></a>00025 <span class="keyword">const</span> TInt KMaxLines = 2;
<a name="l00026"></a>00026 <span class="comment">// Maximum number of characters that the text object can hold</span>
<a name="l00027"></a>00027 <span class="keyword">const</span> TInt KMaxStringLength = 64;
<a name="l00028"></a>00028 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KPointerEventMessage, <span class="stringliteral">&quot;Pointer event %d at (%d,%d)&quot;</span>);
<a name="l00029"></a>00029 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KKeyEventMessage, <span class="stringliteral">&quot;Key 0x%x, modifier 0x%x&quot;</span>);
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 CControlFrameworkView::CControlFrameworkView(<a class="code" href="class_c_control_framework_app_ui.html">CControlFrameworkAppUi</a>&amp; aAppUi) : iAppUi(aAppUi), iFont(TCoeFont::ELarge, TCoeFont::EPlain)
<a name="l00032"></a>00032         {
<a name="l00033"></a>00033         }
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <a class="code" href="class_c_control_framework_view.html">CControlFrameworkView</a>* CControlFrameworkView::NewLC(<a class="code" href="class_c_control_framework_app_ui.html">CControlFrameworkAppUi</a>&amp; aAppUi)
<a name="l00036"></a>00036         {
<a name="l00037"></a>00037         <a class="code" href="class_c_control_framework_view.html">CControlFrameworkView</a>* view = <span class="keyword">new</span>(ELeave) <a class="code" href="class_c_control_framework_view.html">CControlFrameworkView</a>(aAppUi);
<a name="l00038"></a>00038         CleanupStack::PushL(view);
<a name="l00039"></a>00039         <span class="keywordflow">return</span> view;
<a name="l00040"></a>00040         }
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 CControlFrameworkView::~CControlFrameworkView()
<a name="l00043"></a>00043         {
<a name="l00044"></a>00044         iRunInfoArray.Close();
<a name="l00045"></a>00045         <span class="keyword">delete</span> iBidiText;
<a name="l00046"></a>00046         }
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="comment">// Called by the UI framework the first time the view is activated.</span>
<a name="l00049"></a>00049 <span class="comment">// As much as possible of the code normally found in ConstructL() has </span>
<a name="l00050"></a>00050 <span class="comment">// been moved here to improve application startup time.</span>
<a name="l00051"></a>00051 <span class="keywordtype">void</span> CControlFrameworkView::ViewConstructL()
<a name="l00052"></a>00052         {
<a name="l00053"></a>00053         <span class="comment">// The control is window-owning.</span>
<a name="l00054"></a>00054         CreateWindowL();
<a name="l00055"></a>00055 
<a name="l00056"></a>00056         iBidiText = TBidiText::NewL(KMaxStringLength, KMaxLines);
<a name="l00057"></a>00057         iRunInfoArray.OpenL();
<a name="l00058"></a>00058         HBufC* message = iEikonEnv-&gt;AllocReadResourceLC(R_WELCOME_TEXT);
<a name="l00059"></a>00059         iBidiText-&gt;SetText(*message, iRunInfoArray); <span class="comment">// TDirectionality determined by resource</span>
<a name="l00060"></a>00060         CleanupStack::PopAndDestroy(message);
<a name="l00061"></a>00061         
<a name="l00062"></a>00062         <span class="comment">// Set extent of the view. ClientRect calculates to ScreenSize minus Toolbar, Menubar, Statusbar etc.</span>
<a name="l00063"></a>00063         SetRect(iAppUi.ClientRect());
<a name="l00064"></a>00064         
<a name="l00065"></a>00065         <span class="comment">// The control is ready to draw, so notify the UI framework.</span>
<a name="l00066"></a>00066         ActivateL();
<a name="l00067"></a>00067         }       
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="comment">// Uniquely identifies the view </span>
<a name="l00071"></a>00071 TVwsViewId CControlFrameworkView::ViewId()<span class="keyword"> const</span>
<a name="l00072"></a>00072 <span class="keyword">        </span>{
<a name="l00073"></a>00073         <span class="keywordflow">return</span> TVwsViewId(KUidControlFrameworkAppUid, KUidControlFrameworkView);
<a name="l00074"></a>00074         }
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="keywordtype">void</span> CControlFrameworkView::ViewActivatedL(<span class="keyword">const</span> TVwsViewId&amp; <span class="comment">/*aPrevViewId*/</span>, TUid <span class="comment">/*aCustomMessageId*/</span>, <span class="keyword">const</span> TDesC8&amp; <span class="comment">/*aCustomMessage*/</span>)
<a name="l00078"></a>00078         {
<a name="l00079"></a>00079         }
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 <span class="keywordtype">void</span> CControlFrameworkView::ViewDeactivated()
<a name="l00082"></a>00082         {
<a name="l00083"></a>00083         }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 <span class="comment">// Receives pointer events and prepares to write a description of </span>
<a name="l00086"></a>00086 <span class="comment">// the pointer event to the screen.</span>
<a name="l00087"></a>00087 <span class="keywordtype">void</span> CControlFrameworkView::HandlePointerEventL(<span class="keyword">const</span> TPointerEvent&amp; aPointerEvent)
<a name="l00088"></a>00088         {
<a name="l00089"></a>00089         TBuf&lt;KMaxStringLength&gt; text;
<a name="l00090"></a>00090         text.Format(KPointerEventMessage, aPointerEvent.iType,aPointerEvent.iPosition.iX,aPointerEvent.iPosition.iY);
<a name="l00091"></a>00091         iBidiText-&gt;SetText(text, TBidiText::ELeftToRight, iRunInfoArray);
<a name="l00092"></a>00092         Window().Invalidate();
<a name="l00093"></a>00093         }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095 <span class="comment">// Draws the border and the message text</span>
<a name="l00096"></a>00096 <span class="keywordtype">void</span> CControlFrameworkView::Draw(<span class="keyword">const</span> TRect&amp; aRect)<span class="keyword"> const</span>
<a name="l00097"></a>00097 <span class="keyword">        </span>{
<a name="l00098"></a>00098         TRect rect = aRect;
<a name="l00099"></a>00099         DrawBorder(rect);
<a name="l00100"></a>00100         DrawMessage(rect);
<a name="l00101"></a>00101         }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 <span class="comment">// Draws a 5 pixel wide border around the window </span>
<a name="l00104"></a>00104 <span class="keywordtype">void</span> CControlFrameworkView::DrawBorder(TRect&amp; aRect)<span class="keyword"> const</span>
<a name="l00105"></a>00105 <span class="keyword">        </span>{
<a name="l00106"></a>00106         CWindowGc&amp; gc=SystemGc();
<a name="l00107"></a>00107         gc.SetPenSize(TSize(5,5));
<a name="l00108"></a>00108         gc.DrawRect(aRect);
<a name="l00109"></a>00109         aRect.Shrink(5,5);
<a name="l00110"></a>00110         }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 <span class="comment">// Displays the message stored in iBidiText centered vertically and horizontally.</span>
<a name="l00113"></a>00113 <span class="keywordtype">void</span> CControlFrameworkView::DrawMessage(<span class="keyword">const</span> TRect&amp; aRect)<span class="keyword"> const</span>
<a name="l00114"></a>00114 <span class="keyword">        </span>{
<a name="l00115"></a>00115         CWindowGc&amp; gc=SystemGc();
<a name="l00116"></a>00116 
<a name="l00117"></a>00117         <span class="keywordflow">if</span> (IsStrikethrough())
<a name="l00118"></a>00118                 gc.SetStrikethroughStyle(EStrikethroughOn);
<a name="l00119"></a>00119         
<a name="l00120"></a>00120         <span class="keywordflow">if</span> (IsUnderline())
<a name="l00121"></a>00121                 gc.SetUnderlineStyle(EUnderlineOn);
<a name="l00122"></a>00122 
<a name="l00123"></a>00123         XCoeTextDrawer textDrawer(TextDrawer());
<a name="l00124"></a>00124         textDrawer-&gt;SetAlignment(EHCenterVCenter);
<a name="l00125"></a>00125         <span class="keyword">const</span> CFont&amp; font = ScreenFont(iFont);
<a name="l00126"></a>00126         iBidiText-&gt;WrapText((aRect.iBr.iX - aRect.iTl.iX) , font, NULL, KMaxLines);
<a name="l00127"></a>00127         textDrawer.DrawText(gc, *iBidiText, aRect, font);
<a name="l00128"></a>00128         }
<a name="l00129"></a>00129 
<a name="l00130"></a>00130 <span class="comment">/*</span>
<a name="l00131"></a>00131 <span class="comment">Moves the window and prints key event information to the screen.</span>
<a name="l00132"></a>00132 <span class="comment">The following key combinations cause the window to move: </span>
<a name="l00133"></a>00133 <span class="comment">1. Shift + KeyLeft arrow</span>
<a name="l00134"></a>00134 <span class="comment">2. Shift + KeyRight arrow</span>
<a name="l00135"></a>00135 <span class="comment">3. Shift + KeyDown arrow</span>
<a name="l00136"></a>00136 <span class="comment">4. Shift + KeyUp arrow</span>
<a name="l00137"></a>00137 <span class="comment">*/</span>
<a name="l00138"></a>00138 TKeyResponse CControlFrameworkView::OfferKeyEventL(<span class="keyword">const</span> TKeyEvent&amp; aKeyEvent,TEventCode aType)
<a name="l00139"></a>00139         {
<a name="l00140"></a>00140         <span class="keywordflow">if</span> (aType == EEventKey)
<a name="l00141"></a>00141                 {
<a name="l00142"></a>00142                 TInt modifiers=aKeyEvent.iModifiers;
<a name="l00143"></a>00143                 TInt code=aKeyEvent.iCode;
<a name="l00144"></a>00144 
<a name="l00145"></a>00145                 <span class="comment">// Write a description of the key event to the screen</span>
<a name="l00146"></a>00146                 TBuf&lt;KMaxStringLength&gt; text;
<a name="l00147"></a>00147                 text.Format(KKeyEventMessage, code,modifiers);
<a name="l00148"></a>00148                 iBidiText-&gt;SetText(text, TBidiText::ELeftToRight, iRunInfoArray);
<a name="l00149"></a>00149                 Window().Invalidate();
<a name="l00150"></a>00150                 
<a name="l00151"></a>00151                 <span class="keywordflow">if</span> (modifiers&amp;EModifierShift)
<a name="l00152"></a>00152                         {
<a name="l00153"></a>00153                         TPoint pos=Position();
<a name="l00154"></a>00154                         <span class="keywordflow">switch</span> (code)
<a name="l00155"></a>00155                                 {
<a name="l00156"></a>00156                                 <span class="keywordflow">case</span> EKeyLeftArrow:
<a name="l00157"></a>00157                                         pos.iX--;
<a name="l00158"></a>00158                                         <span class="keywordflow">break</span>;
<a name="l00159"></a>00159                                 <span class="keywordflow">case</span> EKeyRightArrow:
<a name="l00160"></a>00160                                         pos.iX++;
<a name="l00161"></a>00161                                         <span class="keywordflow">break</span>;
<a name="l00162"></a>00162                                 <span class="keywordflow">case</span> EKeyUpArrow:
<a name="l00163"></a>00163                                         pos.iY--;
<a name="l00164"></a>00164                                         <span class="keywordflow">break</span>;
<a name="l00165"></a>00165                                 <span class="keywordflow">case</span> EKeyDownArrow:
<a name="l00166"></a>00166                                         pos.iY++;
<a name="l00167"></a>00167                                         <span class="keywordflow">break</span>;
<a name="l00168"></a>00168                                 <span class="keywordflow">default</span>:
<a name="l00169"></a>00169                                         <span class="keywordflow">break</span>;
<a name="l00170"></a>00170                                 }
<a name="l00171"></a>00171                         <span class="keywordflow">if</span> (pos != Position())
<a name="l00172"></a>00172                                 {
<a name="l00173"></a>00173                                 SetPosition(pos);
<a name="l00174"></a>00174                                 <span class="keywordflow">return</span>(EKeyWasConsumed);
<a name="l00175"></a>00175                                 }
<a name="l00176"></a>00176                         }
<a name="l00177"></a>00177                 }
<a name="l00178"></a>00178         <span class="keywordflow">return</span>(EKeyWasNotConsumed);
<a name="l00179"></a>00179         }
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 TBool CControlFrameworkView::IsStrikethrough()<span class="keyword"> const</span>
<a name="l00182"></a>00182 <span class="keyword">        </span>{
<a name="l00183"></a>00183         <span class="keywordflow">return</span> iFontFlags.IsSet(EStrikethrough);
<a name="l00184"></a>00184         }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186 <span class="keywordtype">void</span> CControlFrameworkView::ToggleStrikethrough()
<a name="l00187"></a>00187         {
<a name="l00188"></a>00188         <span class="keywordflow">if</span> (IsStrikethrough())
<a name="l00189"></a>00189                 iFontFlags.Clear(EStrikethrough);
<a name="l00190"></a>00190         <span class="keywordflow">else</span> 
<a name="l00191"></a>00191                 iFontFlags.Set(EStrikethrough);
<a name="l00192"></a>00192         
<a name="l00193"></a>00193         Window().Invalidate();
<a name="l00194"></a>00194         }     
<a name="l00195"></a>00195         
<a name="l00196"></a>00196 TBool CControlFrameworkView::IsUnderline()<span class="keyword"> const</span>
<a name="l00197"></a>00197 <span class="keyword">        </span>{ 
<a name="l00198"></a>00198         <span class="keywordflow">return</span> iFontFlags.IsSet(EUnderline);
<a name="l00199"></a>00199         }
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 <span class="keywordtype">void</span> CControlFrameworkView::ToggleUnderline()
<a name="l00202"></a>00202         {
<a name="l00203"></a>00203         <span class="keywordflow">if</span> (IsUnderline())
<a name="l00204"></a>00204                 iFontFlags.Clear(EUnderline);
<a name="l00205"></a>00205         <span class="keywordflow">else</span> 
<a name="l00206"></a>00206                 iFontFlags.Set(EUnderline);
<a name="l00207"></a>00207         
<a name="l00208"></a>00208         Window().Invalidate();
<a name="l00209"></a>00209         } 
<a name="l00210"></a>00210         
<a name="l00211"></a>00211 TBool CControlFrameworkView::IsBold()<span class="keyword"> const</span>
<a name="l00212"></a>00212 <span class="keyword">        </span>{
<a name="l00213"></a>00213         <span class="keywordflow">return</span> iFontFlags.IsSet(EBold);
<a name="l00214"></a>00214         }
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 <span class="keywordtype">void</span> CControlFrameworkView::ToggleBold()
<a name="l00217"></a>00217         {
<a name="l00218"></a>00218         <span class="keywordflow">if</span> (IsBold())
<a name="l00219"></a>00219                 {
<a name="l00220"></a>00220                 iFontFlags.Clear(EBold);
<a name="l00221"></a>00221                 iFontFlags.Clear(EItalic);
<a name="l00222"></a>00222                 iFont = TCoeFont(iFont.LogicalSize(), TCoeFont::EPlain);
<a name="l00223"></a>00223                 }
<a name="l00224"></a>00224         <span class="keywordflow">else</span> 
<a name="l00225"></a>00225                 {
<a name="l00226"></a>00226                 iFontFlags.Set(EBold);
<a name="l00227"></a>00227                 iFontFlags.Clear(EItalic);
<a name="l00228"></a>00228                 iFont = TCoeFont(iFont.LogicalSize(), TCoeFont::EBold);
<a name="l00229"></a>00229                 }
<a name="l00230"></a>00230         
<a name="l00231"></a>00231         Window().Invalidate();
<a name="l00232"></a>00232         }     
<a name="l00233"></a>00233         
<a name="l00234"></a>00234 TBool CControlFrameworkView::IsItalic()<span class="keyword"> const</span>
<a name="l00235"></a>00235 <span class="keyword">        </span>{
<a name="l00236"></a>00236         <span class="keywordflow">return</span> iFontFlags.IsSet(EItalic);
<a name="l00237"></a>00237         }
<a name="l00238"></a>00238     
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 <span class="keywordtype">void</span> CControlFrameworkView::ToggleItalic()
<a name="l00241"></a>00241         {
<a name="l00242"></a>00242         <span class="keywordflow">if</span> (IsItalic())
<a name="l00243"></a>00243                 {
<a name="l00244"></a>00244                 iFontFlags.Clear(EBold);
<a name="l00245"></a>00245                 iFontFlags.Clear(EItalic);
<a name="l00246"></a>00246                 iFont = TCoeFont(iFont.LogicalSize(), TCoeFont::EPlain);
<a name="l00247"></a>00247                 }
<a name="l00248"></a>00248         <span class="keywordflow">else</span> 
<a name="l00249"></a>00249                 {       
<a name="l00250"></a>00250                 iFontFlags.Set(EItalic);
<a name="l00251"></a>00251                 iFontFlags.Clear(EBold);
<a name="l00252"></a>00252                 iFont = TCoeFont(iFont.LogicalSize(), TCoeFont::EItalic);
<a name="l00253"></a>00253                 }
<a name="l00254"></a>00254                 
<a name="l00255"></a>00255         Window().Invalidate();
<a name="l00256"></a>00256         }       
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

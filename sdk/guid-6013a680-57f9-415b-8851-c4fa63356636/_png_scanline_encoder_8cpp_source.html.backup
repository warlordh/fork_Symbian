<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Multimedia/ICL/ICLCodec/PngScanlineEncoder.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Multimedia/ICL/ICLCodec/PngScanlineEncoder.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// PngScanlineEncoder.cpp</span>
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// Copyright (c) 2007-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00004"></a>00004 <span class="comment">// All rights reserved.</span>
<a name="l00005"></a>00005 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00006"></a>00006 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00007"></a>00007 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00008"></a>00008 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00009"></a>00009 <span class="comment">//</span>
<a name="l00010"></a>00010 <span class="comment">// Initial Contributors:</span>
<a name="l00011"></a>00011 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Contributors:</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 <span class="comment">// Description:</span>
<a name="l00016"></a>00016 <span class="comment">//</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;PngScanlineEncoder.h&quot;</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">//</span>
<a name="l00022"></a>00022 <span class="comment">// CPngWriteSubCodec: base class for writing PNG scanlines</span>
<a name="l00023"></a>00023 <span class="comment">//</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="comment">// Factory function</span>
<a name="l00026"></a>00026 <a class="code" href="class_c_png_write_sub_codec.html">CPngWriteSubCodec</a>* CPngWriteSubCodec::NewL(<span class="keyword">const</span> <a class="code" href="class_t_png_image_information.html">TPngImageInformation</a>&amp; aInfo, <span class="keyword">const</span> CFbsBitmap* aSource)
<a name="l00027"></a>00027         {
<a name="l00028"></a>00028         <a class="code" href="class_c_png_write_sub_codec.html">CPngWriteSubCodec</a>* <span class="keyword">self</span> = NULL;
<a name="l00029"></a>00029 
<a name="l00030"></a>00030         <span class="keywordflow">switch</span> (aInfo.iBitDepth)
<a name="l00031"></a>00031                 {
<a name="l00032"></a>00032                 <span class="keywordflow">case</span> 1:
<a name="l00033"></a>00033                         <span class="keyword">self</span> = <span class="keyword">new</span>(ELeave) <a class="code" href="class_c_bit_depth1_encoder.html">CBitDepth1Encoder</a>;
<a name="l00034"></a>00034                         <span class="keywordflow">break</span>;
<a name="l00035"></a>00035                 <span class="keywordflow">case</span> 2:
<a name="l00036"></a>00036                         <span class="keyword">self</span> = <span class="keyword">new</span>(ELeave) <a class="code" href="class_c_bit_depth2_encoder.html">CBitDepth2Encoder</a>;
<a name="l00037"></a>00037                         <span class="keywordflow">break</span>;
<a name="l00038"></a>00038                 <span class="keywordflow">case</span> 4:
<a name="l00039"></a>00039                         <span class="keyword">self</span> = <span class="keyword">new</span>(ELeave) <a class="code" href="class_c_bit_depth4_encoder.html">CBitDepth4Encoder</a>;
<a name="l00040"></a>00040                         <span class="keywordflow">break</span>;
<a name="l00041"></a>00041                 <span class="keywordflow">case</span> 8:
<a name="l00042"></a>00042                         <span class="keywordflow">switch</span> (aInfo.iColorType)
<a name="l00043"></a>00043                                 {
<a name="l00044"></a>00044                                 <span class="keywordflow">case</span> TPngImageInformation::EGrayscale:
<a name="l00045"></a>00045                                 <span class="keywordflow">case</span> TPngImageInformation::EIndexedColor:
<a name="l00046"></a>00046                                         <span class="keyword">self</span> = <span class="keyword">new</span>(ELeave) <a class="code" href="class_c_bit_depth8_encoder.html">CBitDepth8Encoder</a>;
<a name="l00047"></a>00047                                         <span class="keywordflow">break</span>;
<a name="l00048"></a>00048                                 <span class="keywordflow">case</span> TPngImageInformation::EDirectColor:
<a name="l00049"></a>00049                                         <span class="keyword">self</span> = <span class="keyword">new</span>(ELeave) <a class="code" href="class_c_bit_depth8_color_type2_encoder.html">CBitDepth8ColorType2Encoder</a>;
<a name="l00050"></a>00050                                         <span class="keywordflow">break</span>;
<a name="l00051"></a>00051                                 <span class="keywordflow">default</span>:
<a name="l00052"></a>00052                                         User::Leave(KErrNotSupported);
<a name="l00053"></a>00053                                         <span class="keywordflow">break</span>;
<a name="l00054"></a>00054                                 }
<a name="l00055"></a>00055                         <span class="keywordflow">break</span>;
<a name="l00056"></a>00056                 <span class="keywordflow">default</span>:
<a name="l00057"></a>00057                         User::Leave(KErrNotSupported);
<a name="l00058"></a>00058                         <span class="keywordflow">break</span>;
<a name="l00059"></a>00059                 }
<a name="l00060"></a>00060         ASSERT(<span class="keyword">self</span>);
<a name="l00061"></a>00061         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00062"></a>00062         <span class="keyword">self</span>-&gt;ConstructL(aInfo, aSource);
<a name="l00063"></a>00063         CleanupStack::Pop(<span class="keyword">self</span>);
<a name="l00064"></a>00064         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00065"></a>00065         }
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 CPngWriteSubCodec::CPngWriteSubCodec()
<a name="l00068"></a>00068         : iScanlineDes(NULL, 0)
<a name="l00069"></a>00069         {
<a name="l00070"></a>00070         }
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 CPngWriteSubCodec::~CPngWriteSubCodec()
<a name="l00073"></a>00073         {
<a name="l00074"></a>00074         <span class="keyword">delete</span> iScanlineBuffer;
<a name="l00075"></a>00075         <span class="keyword">delete</span> iPalette;
<a name="l00076"></a>00076         }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="keywordtype">void</span> CPngWriteSubCodec::ConstructL(<span class="keyword">const</span> <a class="code" href="class_t_png_image_information.html">TPngImageInformation</a>&amp; aInfo, <span class="keyword">const</span> CFbsBitmap* aSource)
<a name="l00079"></a>00079         {
<a name="l00080"></a>00080         iInfo = aInfo;
<a name="l00081"></a>00081         iSource = aSource;
<a name="l00082"></a>00082         iScanlineBufferSize = ScanlineBufferSize(iInfo.iSize.iWidth);
<a name="l00083"></a>00083         iScanlineBuffer = HBufC8::NewMaxL(iScanlineBufferSize);
<a name="l00084"></a>00084         iScanlineDes.Set(&amp;(iScanlineBuffer-&gt;Des())[0], iScanlineBufferSize, iScanlineBufferSize);
<a name="l00085"></a>00085 
<a name="l00086"></a>00086         <span class="comment">// Init stuff specific to derived class</span>
<a name="l00087"></a>00087         DoConstructL();
<a name="l00088"></a>00088         }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="keywordtype">void</span> CPngWriteSubCodec::DoConstructL()
<a name="l00091"></a>00091         {
<a name="l00092"></a>00092         }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 TDes8&amp; CPngWriteSubCodec::Buffer()
<a name="l00095"></a>00095         {
<a name="l00096"></a>00096         iScanlineDes.FillZ();
<a name="l00097"></a>00097         <span class="keywordflow">return</span> iScanlineDes;
<a name="l00098"></a>00098         }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 TDes8&amp; CPngWriteSubCodec::EncodeL(<span class="keyword">const</span> TInt aScanline)
<a name="l00101"></a>00101         {
<a name="l00102"></a>00102         <span class="keywordflow">if</span> (aScanline &lt; iInfo.iSize.iHeight)
<a name="l00103"></a>00103                 {
<a name="l00104"></a>00104                 TUint8* dataPtr = <span class="keyword">const_cast&lt;</span>TUint8*<span class="keyword">&gt;</span>(iScanlineDes.Ptr());
<a name="l00105"></a>00105                 <span class="keyword">const</span> TUint8* dataPtrLimit = dataPtr + iScanlineBufferSize;
<a name="l00106"></a>00106 
<a name="l00107"></a>00107                 DoEncode(iSource, aScanline, dataPtr, dataPtrLimit);
<a name="l00108"></a>00108                 }
<a name="l00109"></a>00109         <span class="keywordflow">else</span>
<a name="l00110"></a>00110                 {
<a name="l00111"></a>00111                 iScanlineDes.Set(NULL, 0, 0);
<a name="l00112"></a>00112                 }
<a name="l00113"></a>00113         <span class="keywordflow">return</span> iScanlineDes;
<a name="l00114"></a>00114         }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 TUint8 CPngWriteSubCodec::ReverseBits(<span class="keyword">const</span> TUint8 aValue)<span class="keyword"> const</span>
<a name="l00117"></a>00117 <span class="keyword">        </span>{
<a name="l00118"></a>00118         TUint value = aValue;
<a name="l00119"></a>00119         TUint reverseVal = 0;
<a name="l00120"></a>00120         <span class="keywordflow">for</span> (TInt i = 0; i &lt; 8; i++)
<a name="l00121"></a>00121                 {
<a name="l00122"></a>00122                 reverseVal &lt;&lt;= 1;
<a name="l00123"></a>00123                 reverseVal |= value &amp; 1;
<a name="l00124"></a>00124                 value &gt;&gt;= 1;
<a name="l00125"></a>00125                 }
<a name="l00126"></a>00126         <span class="keywordflow">return</span> TUint8(reverseVal);
<a name="l00127"></a>00127         }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129 <span class="keywordtype">void</span> CPngWriteSubCodec::EncodePalettedScanline(TUint8* aDataPtr, <span class="keyword">const</span> CFbsBitmap* aSource, <span class="keyword">const</span> TInt aScanline,
<a name="l00130"></a>00130                                                                                            <span class="keyword">const</span> TInt aPixelsPerByte, <span class="keyword">const</span> TInt aShiftValue)
<a name="l00131"></a>00131         {
<a name="l00132"></a>00132         <span class="comment">// Encode a single scanline with indexes into the current palette</span>
<a name="l00133"></a>00133         ASSERT(iInfo.iPalettePresent);
<a name="l00134"></a>00134         TPoint pos(0, aScanline);
<a name="l00135"></a>00135         <span class="keyword">const</span> TInt scanLength = iInfo.iSize.iWidth;
<a name="l00136"></a>00136         <span class="keywordflow">for</span> (TInt i=0; i &lt; scanLength; i += aPixelsPerByte)
<a name="l00137"></a>00137                 {
<a name="l00138"></a>00138                 <span class="comment">// Pack each byte with &#39;aPixelsPerByte&#39; index values</span>
<a name="l00139"></a>00139                 TUint8 pixels = 0;
<a name="l00140"></a>00140                 <span class="keywordflow">for</span> (TInt j=0; j &lt; aPixelsPerByte; j++)
<a name="l00141"></a>00141                         {
<a name="l00142"></a>00142                         pixels &lt;&lt;= aShiftValue;
<a name="l00143"></a>00143                         TRgb rgb;
<a name="l00144"></a>00144                         aSource-&gt;GetPixel(rgb, pos);
<a name="l00145"></a>00145                         pixels |= TUint8(iPalette-&gt;NearestIndex(rgb));
<a name="l00146"></a>00146                         pos.iX++;
<a name="l00147"></a>00147                         }
<a name="l00148"></a>00148                 *aDataPtr = pixels;
<a name="l00149"></a>00149                 aDataPtr++;
<a name="l00150"></a>00150                 }
<a name="l00151"></a>00151         }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 <span class="comment">//</span>
<a name="l00154"></a>00154 <span class="comment">// These classes specialise the PNG writer to write</span>
<a name="l00155"></a>00155 <span class="comment">// scanlines with different bitmap depths/colour types</span>
<a name="l00156"></a>00156 <span class="comment">//</span>
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="comment">//</span>
<a name="l00159"></a>00159 <span class="comment">// CBitDepth1Encoder</span>
<a name="l00160"></a>00160 <span class="comment">//</span>
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 <span class="keywordtype">void</span> CBitDepth1Encoder::DoConstructL()
<a name="l00163"></a>00163         {
<a name="l00164"></a>00164         <span class="keywordflow">if</span> (iInfo.iColorType == TPngImageInformation::EIndexedColor)
<a name="l00165"></a>00165                 {
<a name="l00166"></a>00166                 <span class="comment">// Setup palette</span>
<a name="l00167"></a>00167                 iPalette = CPalette::NewL(2);
<a name="l00168"></a>00168                 iPalette-&gt;SetEntry(0, KRgbBlack);
<a name="l00169"></a>00169                 iPalette-&gt;SetEntry(1, KRgbWhite);
<a name="l00170"></a>00170                 iInfo.iPalettePresent = ETrue;
<a name="l00171"></a>00171                 }
<a name="l00172"></a>00172         }
<a name="l00173"></a>00173 
<a name="l00174"></a>00174 TInt CBitDepth1Encoder::ScanlineBufferSize(TInt aPixelLength)
<a name="l00175"></a>00175         {
<a name="l00176"></a>00176         <span class="comment">// 8 pixels per byte</span>
<a name="l00177"></a>00177         <span class="keywordflow">return</span> ((aPixelLength + KPngDepth1RoundUpValue) / KPngDepth1PixelsPerByte) + KPngScanlineFilterTypeLength;
<a name="l00178"></a>00178         }
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 <span class="keywordtype">void</span> CBitDepth1Encoder::DoEncode(<span class="keyword">const</span> CFbsBitmap* aSource, <span class="keyword">const</span> TInt aScanline,
<a name="l00181"></a>00181                                                                  TUint8* aDataPtr, <span class="keyword">const</span> TUint8* aDataPtrLimit)
<a name="l00182"></a>00182         {
<a name="l00183"></a>00183         <span class="comment">// Filter method</span>
<a name="l00184"></a>00184         PtrWriteUtil::WriteInt8(aDataPtr, iInfo.iFilterMethod);
<a name="l00185"></a>00185         aDataPtr++;
<a name="l00186"></a>00186 
<a name="l00187"></a>00187         <span class="comment">// Pixel data</span>
<a name="l00188"></a>00188         <span class="keyword">const</span> TInt scanLength = iInfo.iSize.iWidth;
<a name="l00189"></a>00189         <span class="keywordflow">if</span> (iInfo.iColorType == TPngImageInformation::EIndexedColor)
<a name="l00190"></a>00190                 {
<a name="l00191"></a>00191                 <span class="comment">// Write palette indexes</span>
<a name="l00192"></a>00192                 EncodePalettedScanline(aDataPtr, aSource, aScanline, KPngDepth1PixelsPerByte, KPngDepth1ShiftValue);
<a name="l00193"></a>00193                 }
<a name="l00194"></a>00194         <span class="keywordflow">else</span>
<a name="l00195"></a>00195                 {
<a name="l00196"></a>00196                 <span class="comment">// Write RGB data</span>
<a name="l00197"></a>00197                 TInt dataLength = (scanLength + KPngDepth1RoundUpValue) / KPngDepth1PixelsPerByte;
<a name="l00198"></a>00198                 TPtr8 dataPtr(aDataPtr, dataLength, dataLength);
<a name="l00199"></a>00199 
<a name="l00200"></a>00200                 aSource-&gt;GetScanLine(dataPtr, TPoint(0, aScanline), scanLength, EGray2);
<a name="l00201"></a>00201 
<a name="l00202"></a>00202                 <span class="comment">// Reverse the order of the bits</span>
<a name="l00203"></a>00203                 <span class="keywordflow">while</span> (aDataPtr &lt; aDataPtrLimit)
<a name="l00204"></a>00204                         {
<a name="l00205"></a>00205                         aDataPtr[0] = ReverseBits(aDataPtr[0]);
<a name="l00206"></a>00206                         aDataPtr++;
<a name="l00207"></a>00207                         }
<a name="l00208"></a>00208                 }
<a name="l00209"></a>00209         }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 <span class="comment">//</span>
<a name="l00212"></a>00212 <span class="comment">// CBitDepth2Encoder</span>
<a name="l00213"></a>00213 <span class="comment">//</span>
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 <span class="keywordtype">void</span> CBitDepth2Encoder::DoConstructL()
<a name="l00216"></a>00216         {
<a name="l00217"></a>00217         <span class="keywordflow">if</span> (iInfo.iColorType == TPngImageInformation::EIndexedColor)
<a name="l00218"></a>00218                 {
<a name="l00219"></a>00219                 <span class="comment">// Setup palette entries</span>
<a name="l00220"></a>00220                 iPalette = CPalette::NewL(4);
<a name="l00221"></a>00221                 iPalette-&gt;SetEntry(0, KRgbBlack);
<a name="l00222"></a>00222                 iPalette-&gt;SetEntry(1, KRgbDarkGray);
<a name="l00223"></a>00223                 iPalette-&gt;SetEntry(2, KRgbGray);
<a name="l00224"></a>00224                 iPalette-&gt;SetEntry(3, KRgbWhite);
<a name="l00225"></a>00225                 iInfo.iPalettePresent = ETrue;
<a name="l00226"></a>00226                 }
<a name="l00227"></a>00227         }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 TInt CBitDepth2Encoder::ScanlineBufferSize(TInt aPixelLength)
<a name="l00230"></a>00230         {
<a name="l00231"></a>00231         <span class="keywordflow">return</span> ((aPixelLength + KPngDepth2RoundUpValue) / KPngDepth2PixelsPerByte) + KPngScanlineFilterTypeLength;
<a name="l00232"></a>00232         }
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 <span class="keywordtype">void</span> CBitDepth2Encoder::DoEncode(<span class="keyword">const</span> CFbsBitmap* aSource, <span class="keyword">const</span> TInt aScanline,
<a name="l00235"></a>00235                                                                  TUint8* aDataPtr, <span class="keyword">const</span> TUint8* aDataPtrLimit)
<a name="l00236"></a>00236         {
<a name="l00237"></a>00237         <span class="comment">// Filter method</span>
<a name="l00238"></a>00238         PtrWriteUtil::WriteInt8(aDataPtr, iInfo.iFilterMethod);
<a name="l00239"></a>00239         aDataPtr++;
<a name="l00240"></a>00240 
<a name="l00241"></a>00241         <span class="comment">// Pixel data</span>
<a name="l00242"></a>00242         <span class="keyword">const</span> TInt scanLength = iInfo.iSize.iWidth;
<a name="l00243"></a>00243         <span class="keywordflow">if</span> (iInfo.iColorType == TPngImageInformation::EIndexedColor)
<a name="l00244"></a>00244                 {
<a name="l00245"></a>00245                 <span class="comment">// Write palette indexes</span>
<a name="l00246"></a>00246                 EncodePalettedScanline(aDataPtr, aSource, aScanline, KPngDepth2PixelsPerByte, KPngDepth2ShiftValue);
<a name="l00247"></a>00247                 }
<a name="l00248"></a>00248         <span class="keywordflow">else</span>
<a name="l00249"></a>00249                 {
<a name="l00250"></a>00250                 <span class="comment">// RGB values</span>
<a name="l00251"></a>00251                 TPtr8 dataPtr(aDataPtr, (scanLength + KPngDepth2RoundUpValue) / KPngDepth2PixelsPerByte);
<a name="l00252"></a>00252                 aSource-&gt;GetScanLine(dataPtr, TPoint(0, aScanline), scanLength, EGray4);
<a name="l00253"></a>00253 
<a name="l00254"></a>00254                 <span class="comment">// Reverse the order of the bits</span>
<a name="l00255"></a>00255                 <span class="keywordflow">while</span> (aDataPtr &lt; aDataPtrLimit)
<a name="l00256"></a>00256                         {
<a name="l00257"></a>00257                         TUint8 value = aDataPtr[0];
<a name="l00258"></a>00258                         TUint8 reverse = 0;
<a name="l00259"></a>00259                         <span class="keywordflow">for</span> (TInt i=0; i &lt; KPngDepth2PixelsPerByte; i++)
<a name="l00260"></a>00260                                 {
<a name="l00261"></a>00261                                 reverse &lt;&lt;= 2;  <span class="comment">// advance the bits for the reverse value</span>
<a name="l00262"></a>00262                                 reverse |= value &amp; 0x3; <span class="comment">// mask off the 2 bits, then OR with existing reverse value</span>
<a name="l00263"></a>00263                                 value &gt;&gt;= 2;    <span class="comment">// advance the bits for the actual value</span>
<a name="l00264"></a>00264                                 }
<a name="l00265"></a>00265                         aDataPtr[0] = reverse;
<a name="l00266"></a>00266                         aDataPtr++;
<a name="l00267"></a>00267                         }
<a name="l00268"></a>00268                 }
<a name="l00269"></a>00269         }
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 <span class="comment">//</span>
<a name="l00272"></a>00272 <span class="comment">// CBitDepth4Encoder</span>
<a name="l00273"></a>00273 <span class="comment">//</span>
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 <span class="keywordtype">void</span> CBitDepth4Encoder::DoConstructL()
<a name="l00276"></a>00276         {
<a name="l00277"></a>00277         <span class="keywordflow">if</span> (iInfo.iColorType == TPngImageInformation::EIndexedColor)
<a name="l00278"></a>00278                 {
<a name="l00279"></a>00279                 <span class="comment">// Calculate palette for image</span>
<a name="l00280"></a>00280                 iPalette = CPalette::NewDefaultL(EColor16);
<a name="l00281"></a>00281                 iInfo.iPalettePresent = ETrue;
<a name="l00282"></a>00282                 }
<a name="l00283"></a>00283         }
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 TInt CBitDepth4Encoder::ScanlineBufferSize(TInt aPixelLength)
<a name="l00286"></a>00286         {
<a name="l00287"></a>00287         <span class="keywordflow">return</span> ((aPixelLength + KPngDepth4RoundUpValue) / KPngDepth4PixelsPerByte) + KPngScanlineFilterTypeLength;
<a name="l00288"></a>00288         }
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 <span class="keywordtype">void</span> CBitDepth4Encoder::DoEncode(<span class="keyword">const</span> CFbsBitmap* aSource, <span class="keyword">const</span> TInt aScanline,
<a name="l00291"></a>00291                                                                  TUint8* aDataPtr, <span class="keyword">const</span> TUint8* aDataPtrLimit)
<a name="l00292"></a>00292         {
<a name="l00293"></a>00293         <span class="comment">// Filter method</span>
<a name="l00294"></a>00294         PtrWriteUtil::WriteInt8(aDataPtr, iInfo.iFilterMethod);
<a name="l00295"></a>00295         aDataPtr++;
<a name="l00296"></a>00296 
<a name="l00297"></a>00297         <span class="comment">// Pixel data</span>
<a name="l00298"></a>00298         <span class="keyword">const</span> TInt scanLength = iInfo.iSize.iWidth;
<a name="l00299"></a>00299         <span class="keywordflow">if</span> (iInfo.iColorType == TPngImageInformation::EIndexedColor)
<a name="l00300"></a>00300                 {
<a name="l00301"></a>00301                 <span class="comment">// Write palette indexes</span>
<a name="l00302"></a>00302                 EncodePalettedScanline(aDataPtr, aSource, aScanline, KPngDepth4PixelsPerByte, KPngDepth4ShiftValue);
<a name="l00303"></a>00303                 }
<a name="l00304"></a>00304         <span class="keywordflow">else</span>
<a name="l00305"></a>00305                 {
<a name="l00306"></a>00306                 TPtr8 dataPtr(aDataPtr, (scanLength + KPngDepth4RoundUpValue) / KPngDepth4PixelsPerByte);
<a name="l00307"></a>00307                 aSource-&gt;GetScanLine(dataPtr, TPoint(0, aScanline), scanLength,
<a name="l00308"></a>00308                         (iInfo.iColorType == TPngImageInformation::EDirectColor) ? EColor16 : EGray16);
<a name="l00309"></a>00309 
<a name="l00310"></a>00310                 <span class="comment">// Swap order of the low/high bits</span>
<a name="l00311"></a>00311                 <span class="keywordflow">while</span> (aDataPtr &lt; aDataPtrLimit)
<a name="l00312"></a>00312                         {
<a name="l00313"></a>00313                         TUint value = aDataPtr[0];
<a name="l00314"></a>00314                         TUint low = value &lt;&lt; KPngDepth4ShiftValue;
<a name="l00315"></a>00315                         TUint high = value &gt;&gt; KPngDepth4ShiftValue;
<a name="l00316"></a>00316                         aDataPtr[0] = TUint8(low | high);
<a name="l00317"></a>00317                         aDataPtr++;
<a name="l00318"></a>00318                         }
<a name="l00319"></a>00319                 }
<a name="l00320"></a>00320         }
<a name="l00321"></a>00321 
<a name="l00322"></a>00322 <span class="comment">//</span>
<a name="l00323"></a>00323 <span class="comment">// CBitDepth8ColorType2Encoder</span>
<a name="l00324"></a>00324 <span class="comment">//</span>
<a name="l00325"></a>00325 
<a name="l00326"></a>00326 TInt CBitDepth8ColorType2Encoder::ScanlineBufferSize(TInt aPixelLength)
<a name="l00327"></a>00327         {
<a name="l00328"></a>00328         <span class="keywordflow">return</span> (aPixelLength * KPngDepth8RgbBytesPerPixel) + KPngScanlineFilterTypeLength;
<a name="l00329"></a>00329         }
<a name="l00330"></a>00330 
<a name="l00331"></a>00331 <span class="keywordtype">void</span> CBitDepth8ColorType2Encoder::DoEncode(<span class="keyword">const</span> CFbsBitmap* aSource, <span class="keyword">const</span> TInt aScanline,
<a name="l00332"></a>00332                                                                                    TUint8* aDataPtr, <span class="keyword">const</span> TUint8* aDataPtrLimit)
<a name="l00333"></a>00333         {
<a name="l00334"></a>00334         <span class="comment">// Filter method</span>
<a name="l00335"></a>00335         PtrWriteUtil::WriteInt8(aDataPtr, iInfo.iFilterMethod);
<a name="l00336"></a>00336         aDataPtr++;
<a name="l00337"></a>00337 
<a name="l00338"></a>00338         <span class="comment">// Pixel data</span>
<a name="l00339"></a>00339         TPtr8 dataPtr(aDataPtr, iInfo.iSize.iWidth * KPngDepth8RgbBytesPerPixel);
<a name="l00340"></a>00340         aSource-&gt;GetScanLine(dataPtr, TPoint(0, aScanline), iInfo.iSize.iWidth, EColor16M);
<a name="l00341"></a>00341 
<a name="l00342"></a>00342         <span class="keywordflow">while</span> (aDataPtr &lt; aDataPtrLimit)
<a name="l00343"></a>00343                 {
<a name="l00344"></a>00344                 <span class="comment">// Swap the red and blue components of the image data</span>
<a name="l00345"></a>00345                 TUint8 temp = aDataPtr[0];      <span class="comment">// temp = Red</span>
<a name="l00346"></a>00346                 aDataPtr[0] = aDataPtr[2];      <span class="comment">// Red = Blue</span>
<a name="l00347"></a>00347                 aDataPtr[2] = temp;                     <span class="comment">// Blue = temp</span>
<a name="l00348"></a>00348                 aDataPtr += KPngDepth8RgbBytesPerPixel;
<a name="l00349"></a>00349                 }
<a name="l00350"></a>00350         }
<a name="l00351"></a>00351 
<a name="l00352"></a>00352 <span class="comment">//</span>
<a name="l00353"></a>00353 <span class="comment">// CBitDepth8Encoder</span>
<a name="l00354"></a>00354 <span class="comment">//</span>
<a name="l00355"></a>00355 
<a name="l00356"></a>00356 <span class="keywordtype">void</span> CBitDepth8Encoder::DoConstructL()
<a name="l00357"></a>00357         {
<a name="l00358"></a>00358         <span class="keywordflow">if</span> (iInfo.iColorType == TPngImageInformation::EIndexedColor)
<a name="l00359"></a>00359                 {
<a name="l00360"></a>00360                 <span class="comment">// Calculate palette for image</span>
<a name="l00361"></a>00361                 iPalette = CPalette::NewDefaultL(EColor256);
<a name="l00362"></a>00362                 iInfo.iPalettePresent = ETrue;
<a name="l00363"></a>00363                 }
<a name="l00364"></a>00364         }
<a name="l00365"></a>00365 
<a name="l00366"></a>00366 TInt CBitDepth8Encoder::ScanlineBufferSize(TInt aPixelLength)
<a name="l00367"></a>00367         {
<a name="l00368"></a>00368         <span class="keywordflow">return</span> aPixelLength + KPngScanlineFilterTypeLength;
<a name="l00369"></a>00369         }
<a name="l00370"></a>00370 
<a name="l00371"></a>00371 <span class="keywordtype">void</span> CBitDepth8Encoder::DoEncode(<span class="keyword">const</span> CFbsBitmap* aSource, <span class="keyword">const</span> TInt aScanline,
<a name="l00372"></a>00372                                                                  TUint8* aDataPtr, <span class="keyword">const</span> TUint8* <span class="comment">/*aDataPtrLimit*/</span>)
<a name="l00373"></a>00373         {
<a name="l00374"></a>00374         <span class="comment">// Filter method</span>
<a name="l00375"></a>00375         PtrWriteUtil::WriteInt8(aDataPtr, iInfo.iFilterMethod);
<a name="l00376"></a>00376         aDataPtr++;
<a name="l00377"></a>00377 
<a name="l00378"></a>00378         <span class="keyword">const</span> TInt scanLength = iInfo.iSize.iWidth;
<a name="l00379"></a>00379         <span class="keywordflow">if</span> (iInfo.iColorType == TPngImageInformation::EIndexedColor)
<a name="l00380"></a>00380                 {
<a name="l00381"></a>00381                 <span class="comment">// Write palette indexes</span>
<a name="l00382"></a>00382                 EncodePalettedScanline(aDataPtr, aSource, aScanline, KPngDepth8PixelsPerByte, KPngDepth8ShiftValue);
<a name="l00383"></a>00383                 }
<a name="l00384"></a>00384         <span class="keywordflow">else</span>
<a name="l00385"></a>00385                 {
<a name="l00386"></a>00386                 <span class="comment">// Pixel data</span>
<a name="l00387"></a>00387                 TPtr8 dataPtr(aDataPtr, scanLength);
<a name="l00388"></a>00388                 aSource-&gt;GetScanLine(dataPtr, TPoint(0, aScanline), scanLength, EGray256);
<a name="l00389"></a>00389                 }
<a name="l00390"></a>00390         }
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

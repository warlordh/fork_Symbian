<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/SysLibs/Streams/WriteToMany/WriteToMany.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/SysLibs/Streams/WriteToMany/WriteToMany.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2000-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// Example to demonstrate how a network of objects can be written </span>
<a name="l00015"></a>00015 <span class="comment">// to more than one stream in a direct file store, and how the loading</span>
<a name="l00016"></a>00016 <span class="comment">// of an object from the store into memory may be deferred.</span>
<a name="l00017"></a>00017 <span class="comment">// The example:</span>
<a name="l00018"></a>00018 <span class="comment">// creates a direct file store (replacing any existing direct </span>
<a name="l00019"></a>00019 <span class="comment">// file store of the same name)</span>
<a name="l00020"></a>00020 <span class="comment">// constructs a CClassABC container object and then constructs a </span>
<a name="l00021"></a>00021 <span class="comment">// contained CClassA, CClassB and CClassC object.</span>
<a name="l00022"></a>00022 <span class="comment">// Displays the content of the CClassA, CClassB and CClassC objects</span>
<a name="l00023"></a>00023 <span class="comment">// externalizes the CClassB object in its own stream and  keeps hold of the</span>
<a name="l00024"></a>00024 <span class="comment">// stream id. Externalizes the CClassA object, the streamid of the</span>
<a name="l00025"></a>00025 <span class="comment">// CClassB object and the CClassC object in a single</span>
<a name="l00026"></a>00026 <span class="comment">// stream. Makes this latter stream the root stream of the store</span>
<a name="l00027"></a>00027 <span class="comment">// closes the store and deletes the container and its contained CClassA, </span>
<a name="l00028"></a>00028 <span class="comment">// CClassB and CCLassC objects (from memory)</span>
<a name="l00029"></a>00029 <span class="comment">// re-opens the direct file store</span>
<a name="l00030"></a>00030 <span class="comment">// restores the CClassABC container object; in effect, this restores </span>
<a name="l00031"></a>00031 <span class="comment">// its contained CClassA and CClassC objects and the stream id of its</span>
<a name="l00032"></a>00032 <span class="comment">// CClassB object. The CClassB object is not restored into memory until </span>
<a name="l00033"></a>00033 <span class="comment">// it is needed.</span>
<a name="l00034"></a>00034 <span class="comment">// displays the content of the CClassA, CClassB and CClassC objects; it is</span>
<a name="l00035"></a>00035 <span class="comment">// at this time that the CClassB object is restored into memory. (This </span>
<a name="l00036"></a>00036 <span class="comment">// illustrates the necessity of keeping the store open.</span>
<a name="l00037"></a>00037 <span class="comment">// closes the store and deletes the container and its contained CClassA, </span>
<a name="l00038"></a>00038 <span class="comment">// CClassB and CCLassC objects (from memory)</span>
<a name="l00039"></a>00039 <span class="comment">// Notes:</span>
<a name="l00040"></a>00040 <span class="comment">// The file name and extension of the direct file store is &quot;WriteToMany.dat&quot;.</span>
<a name="l00041"></a>00041 <span class="comment">// and will be created in &quot;\data\&quot; folder of the writable drive.</span>
<a name="l00042"></a>00042 <span class="comment">//</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;WriteToMany.h&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">//***************************************************************</span>
<a name="l00048"></a>00048 <span class="comment">//</span>
<a name="l00049"></a>00049 <span class="comment">// Implementations</span>
<a name="l00050"></a>00050 <span class="comment">//</span>
<a name="l00051"></a>00051 <span class="comment">//***************************************************************</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="comment">// The file name, extension and path for the file store</span>
<a name="l00055"></a>00055 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFullNameOfFileStore,<span class="stringliteral">&quot;\\epoc32ex\\data\\WriteToMany.dat&quot;</span>);
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 
<a name="l00058"></a>00058                                 <span class="comment">//  Do the example</span>
<a name="l00059"></a>00059 <span class="keyword">static</span> <span class="keywordtype">void</span> doExampleL()
<a name="l00060"></a>00060     {
<a name="l00061"></a>00061                             <span class="comment">// make sure directory exists</span>
<a name="l00062"></a>00062         fsSession.MkDirAll(KFullNameOfFileStore);
<a name="l00063"></a>00063         doMakeAndStoreL(KFullNameOfFileStore);
<a name="l00064"></a>00064         doRestoreL(KFullNameOfFileStore);
<a name="l00065"></a>00065         }
<a name="l00066"></a>00066  
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="keyword">static</span> <span class="keywordtype">void</span> doMakeAndStoreL(<span class="keyword">const</span> TDesC&amp; aName)
<a name="l00069"></a>00069         {
<a name="l00070"></a>00070                                 <span class="comment">// Create (replace, if it exists) the direct file store</span>
<a name="l00071"></a>00071         TParse  filestorename;
<a name="l00072"></a>00072         fsSession.Parse(aName,filestorename);
<a name="l00073"></a>00073         CFileStore* store = CDirectFileStore::ReplaceLC(fsSession,filestorename.FullName(),EFileWrite);
<a name="l00074"></a>00074 
<a name="l00075"></a>00075                                 <span class="comment">// Must say what kind of file store.</span>
<a name="l00076"></a>00076         store-&gt;SetTypeL(KDirectFileStoreLayoutUid);
<a name="l00077"></a>00077 
<a name="l00078"></a>00078                                 <span class="comment">// Construct the container object for CClassA,CClassB and CClassC.</span>
<a name="l00079"></a>00079                                 <span class="comment">// Complete the construction of the contained CClassA, CClassB</span>
<a name="l00080"></a>00080                                 <span class="comment">// and CClassC objects.</span>
<a name="l00081"></a>00081         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtDataForClassA,<span class="stringliteral">&quot;Data for the CClassA - AAAAA&quot;</span>);
<a name="l00082"></a>00082         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtDataForClassB,<span class="stringliteral">&quot;Data for the CClassB - BBBBB&quot;</span>);
<a name="l00083"></a>00083         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtDataForClassC,<span class="stringliteral">&quot;Data for the CClassC - CCCCC&quot;</span>);
<a name="l00084"></a>00084 
<a name="l00085"></a>00085         <a class="code" href="class_c_class_a_b_c.html">CClassABC</a>* theABC = CClassABC::NewLC(*store);
<a name="l00086"></a>00086         theABC-&gt;ConstructAL(KTxtDataForClassA,-1,2);
<a name="l00087"></a>00087         theABC-&gt;ConstructB(KTxtDataForClassB,-3,4,5.6);
<a name="l00088"></a>00088         theABC-&gt;ConstructC(KTxtDataForClassC);
<a name="l00089"></a>00089 
<a name="l00090"></a>00090                                 <span class="comment">// Show contents of the CClassA, CClassB &amp; CClassC objects</span>
<a name="l00091"></a>00091         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtClassAContent,<span class="stringliteral">&quot;CClassA content ...&quot;</span>);
<a name="l00092"></a>00092         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtClassBContent,<span class="stringliteral">&quot;CClassB content ...&quot;</span>);
<a name="l00093"></a>00093         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtClassCContent,<span class="stringliteral">&quot;CClassC content ...&quot;</span>);
<a name="l00094"></a>00094 
<a name="l00095"></a>00095         doShow(KTxtClassAContent,*theABC-&gt;PtrA());
<a name="l00096"></a>00096         doShow(KTxtClassBContent,*theABC-&gt;PtrBL());                                     
<a name="l00097"></a>00097         doShow(KTxtClassCContent,*theABC-&gt;PtrC());                                      
<a name="l00098"></a>00098 
<a name="l00099"></a>00099                                 <span class="comment">// Store the object network by:</span>
<a name="l00100"></a>00100                                 <span class="comment">// storing the CClassB object in its own stream and </span>
<a name="l00101"></a>00101                                 <span class="comment">// then storing:</span>
<a name="l00102"></a>00102                                 <span class="comment">//              the CClassA object</span>
<a name="l00103"></a>00103                                 <span class="comment">//              the streamid of the CClassB object</span>
<a name="l00104"></a>00104                                 <span class="comment">//      the CClassC object</span>
<a name="l00105"></a>00105                                 <span class="comment">// in a separate stream.</span>
<a name="l00106"></a>00106         TStreamId <span class="keywordtype">id</span> = theABC-&gt;StoreL();                        
<a name="l00107"></a>00107         
<a name="l00108"></a>00108                                 <span class="comment">// Set this stream id as the root stream</span>
<a name="l00109"></a>00109         store-&gt;SetRootL(<span class="keywordtype">id</span>);
<a name="l00110"></a>00110 
<a name="l00111"></a>00111                                 <span class="comment">// Destroy:</span>
<a name="l00112"></a>00112                                 <span class="comment">//              the container object.</span>
<a name="l00113"></a>00113                                 <span class="comment">//              the direct file store object (closes the file),</span>
<a name="l00114"></a>00114                                 <span class="comment">//              </span>
<a name="l00115"></a>00115         CleanupStack::PopAndDestroy(2); 
<a name="l00116"></a>00116         }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00119"></a>00119 <span class="keyword">static</span> <span class="keywordtype">void</span> doRestoreL(<span class="keyword">const</span> TDesC&amp; aName)
<a name="l00120"></a>00120         {
<a name="l00121"></a>00121                                 <span class="comment">// Open the direct file store</span>
<a name="l00122"></a>00122         TParse  filestorename;
<a name="l00123"></a>00123         fsSession.Parse(aName,filestorename);
<a name="l00124"></a>00124         CFileStore* store = CDirectFileStore::OpenLC(fsSession,filestorename.FullName(),EFileRead);
<a name="l00125"></a>00125 
<a name="l00126"></a>00126                                 <span class="comment">// Restore the container object from the root stream.</span>
<a name="l00127"></a>00127                                 <span class="comment">// This constructs a CClassA and a CClassC object </span>
<a name="l00128"></a>00128                                 <span class="comment">// and restores them from the root stream. </span>
<a name="l00129"></a>00129                                 <span class="comment">// The swizzle for the CClassB object is</span>
<a name="l00130"></a>00130                                 <span class="comment">// constructed from the streamid in the root stream.</span>
<a name="l00131"></a>00131                                 <span class="comment">// Note that the CClassB object itself is not loaded into </span>
<a name="l00132"></a>00132                                 <span class="comment">// memory until it is needed.</span>
<a name="l00133"></a>00133         <a class="code" href="class_c_class_a_b_c.html">CClassABC</a>* theABC = CClassABC::NewLC(*store,store-&gt;Root());
<a name="l00134"></a>00134 
<a name="l00135"></a>00135                                 <span class="comment">// Show restored contents of the CClassA, CClassB and CClassC</span>
<a name="l00136"></a>00136                                 <span class="comment">// objects. Note that the CClassB object may not be in memory and</span>
<a name="l00137"></a>00137                                 <span class="comment">// will be loaded in when needed.</span>
<a name="l00138"></a>00138         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtRestoredClassA,<span class="stringliteral">&quot;Restored CClassA content ...&quot;</span>);
<a name="l00139"></a>00139         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtRestoredClassB,<span class="stringliteral">&quot;Restored CClassB content ...&quot;</span>);
<a name="l00140"></a>00140         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtRestoredClassC,<span class="stringliteral">&quot;Restored CClassC content ...&quot;</span>);
<a name="l00141"></a>00141 
<a name="l00142"></a>00142         doShow(KTxtRestoredClassA,*theABC-&gt;PtrA());
<a name="l00143"></a>00143         doShow(KTxtRestoredClassB,*theABC-&gt;PtrBL());                                    
<a name="l00144"></a>00144         doShow(KTxtRestoredClassC,*theABC-&gt;PtrC());     
<a name="l00145"></a>00145                                 
<a name="l00146"></a>00146                                 <span class="comment">// Destroy:</span>
<a name="l00147"></a>00147                                 <span class="comment">//              the CClassABC object, </span>
<a name="l00148"></a>00148                                 <span class="comment">//      the direct file store object (closes the file) </span>
<a name="l00149"></a>00149         CleanupStack::PopAndDestroy(2);
<a name="l00150"></a>00150         } 
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtNewLine,<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00153"></a>00153 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatType1,<span class="stringliteral">&quot;\n%S, &quot;</span>);
<a name="l00154"></a>00154 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatType2,<span class="stringliteral">&quot;%d, &quot;</span>);
<a name="l00155"></a>00155 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatType3,<span class="stringliteral">&quot;%u  &quot;</span>);
<a name="l00156"></a>00156 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatType4,<span class="stringliteral">&quot;%u, &quot;</span>);
<a name="l00157"></a>00157 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatType5,<span class="stringliteral">&quot;%f  &quot;</span>);
<a name="l00158"></a>00158                                                                         
<a name="l00159"></a>00159 <span class="keyword">static</span> <span class="keywordtype">void</span> doShow(<span class="keyword">const</span> TDesC&amp; aHeading,<span class="keyword">const</span> <a class="code" href="class_c_class_a.html">CClassA</a>&amp; anA)
<a name="l00160"></a>00160         {
<a name="l00161"></a>00161         console-&gt;Printf(KTxtNewLine);
<a name="l00162"></a>00162         console-&gt;Printf(aHeading);
<a name="l00163"></a>00163         console-&gt;Printf(KFormatType1,anA.iVarBuf);
<a name="l00164"></a>00164         console-&gt;Printf(KFormatType2,anA.iIntValue);
<a name="l00165"></a>00165         console-&gt;Printf(KFormatType3,anA.iUintValue);
<a name="l00166"></a>00166         console-&gt;Printf(KTxtNewLine);
<a name="l00167"></a>00167         }
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 <span class="keyword">static</span> <span class="keywordtype">void</span> doShow(<span class="keyword">const</span> TDesC&amp; aHeading,<span class="keyword">const</span> CClassB&amp; aB)
<a name="l00172"></a>00172         {
<a name="l00173"></a>00173         console-&gt;Printf(KTxtNewLine);
<a name="l00174"></a>00174         console-&gt;Printf(aHeading);
<a name="l00175"></a>00175         console-&gt;Printf(KFormatType1,&amp;aB.iFixBuf);
<a name="l00176"></a>00176         console-&gt;Printf(KFormatType2,aB.iIntValue);
<a name="l00177"></a>00177         console-&gt;Printf(KFormatType4,aB.iUintValue);
<a name="l00178"></a>00178         console-&gt;Printf(KFormatType5,aB.iRealValue);
<a name="l00179"></a>00179         console-&gt;Printf(KTxtNewLine);
<a name="l00180"></a>00180         }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 <span class="keyword">static</span> <span class="keywordtype">void</span> doShow(<span class="keyword">const</span> TDesC&amp; aHeading,<span class="keyword">const</span> CClassC&amp; aC)
<a name="l00183"></a>00183         {
<a name="l00184"></a>00184         console-&gt;Printf(KTxtNewLine);
<a name="l00185"></a>00185         console-&gt;Printf(aHeading);
<a name="l00186"></a>00186         console-&gt;Printf(KFormatType1,&amp;aC.iFixBuf);
<a name="l00187"></a>00187         console-&gt;Printf(KTxtNewLine);
<a name="l00188"></a>00188         }
<a name="l00189"></a>00189 
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 <span class="comment">//***************************************************************</span>
<a name="l00192"></a>00192 <span class="comment">//</span>
<a name="l00193"></a>00193 <span class="comment">// CClassABC Implementation</span>
<a name="l00194"></a>00194 <span class="comment">//</span>
<a name="l00195"></a>00195 <span class="comment">//***************************************************************</span>
<a name="l00196"></a>00196 CClassABC::CClassABC(CStreamStore&amp; aStore)
<a name="l00197"></a>00197         : iStore(aStore)
<a name="l00198"></a>00198         {}
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 CClassABC::CClassABC(CStreamStore&amp; aStore,TStreamId anId)
<a name="l00201"></a>00201         : iStore(aStore), iId(anId)
<a name="l00202"></a>00202         {}
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 <a class="code" href="class_c_class_a_b_c.html">CClassABC</a>* CClassABC::NewLC(CStreamStore&amp; aStore)
<a name="l00205"></a>00205         {
<a name="l00206"></a>00206         <a class="code" href="class_c_class_a_b_c.html">CClassABC</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_class_a_b_c.html">CClassABC</a>(aStore);
<a name="l00207"></a>00207         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00208"></a>00208         <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00209"></a>00209         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00210"></a>00210         }
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 <a class="code" href="class_c_class_a_b_c.html">CClassABC</a>* CClassABC::NewLC(CStreamStore&amp; aStore, TStreamId anId)
<a name="l00213"></a>00213         {                                                                                                                       
<a name="l00214"></a>00214         <a class="code" href="class_c_class_a_b_c.html">CClassABC</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_class_a_b_c.html">CClassABC</a>(aStore,anId);
<a name="l00215"></a>00215         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00216"></a>00216         <span class="keyword">self</span>-&gt;RestoreL();
<a name="l00217"></a>00217         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00218"></a>00218         }
<a name="l00219"></a>00219                 
<a name="l00220"></a>00220 <span class="keywordtype">void</span> CClassABC::ConstructL()
<a name="l00221"></a>00221         {
<a name="l00222"></a>00222         iA = CClassA::NewL();
<a name="l00223"></a>00223         iB = CClassB::NewL();<span class="comment">// assigns CClassB* to TSwizzle&lt;CClassB&gt;. Uses TSwizzle operator=(T*)</span>
<a name="l00224"></a>00224         iC = CClassC::NewL();
<a name="l00225"></a>00225         }
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 <span class="keywordtype">void</span> CClassABC::ConstructAL(<span class="keyword">const</span> TDesC&amp; aData,TInt anInt,TUint aUint)
<a name="l00228"></a>00228         {
<a name="l00229"></a>00229         iA-&gt;iVarBuf    = aData.AllocL();        
<a name="l00230"></a>00230         iA-&gt;iIntValue  = anInt;
<a name="l00231"></a>00231         iA-&gt;iUintValue = aUint;
<a name="l00232"></a>00232         }
<a name="l00233"></a>00233                         
<a name="l00234"></a>00234 <span class="keywordtype">void</span> CClassABC::ConstructB(<span class="keyword">const</span> TDesC&amp; aData,TInt anInt,TUint aUint,TReal aReal)
<a name="l00235"></a>00235         {
<a name="l00236"></a>00236         iB-&gt;iFixBuf    = aData;
<a name="l00237"></a>00237         iB-&gt;iIntValue  = anInt; 
<a name="l00238"></a>00238         iB-&gt;iUintValue = aUint;
<a name="l00239"></a>00239         iB-&gt;iRealValue = aReal;
<a name="l00240"></a>00240         }
<a name="l00241"></a>00241                         
<a name="l00242"></a>00242 <span class="keywordtype">void</span> CClassABC::ConstructC(<span class="keyword">const</span> TDesC&amp; aData)
<a name="l00243"></a>00243         {
<a name="l00244"></a>00244         iC-&gt;iFixBuf = aData;
<a name="l00245"></a>00245         }
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 
<a name="l00248"></a>00248                         <span class="comment">// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * </span>
<a name="l00249"></a>00249                         <span class="comment">// Destructor deletes the CClassB object only if it is in memory.</span>
<a name="l00250"></a>00250                         <span class="comment">// The IsPtr() function can be used to determine whether the </span>
<a name="l00251"></a>00251                         <span class="comment">// CClassB object is memory. </span>
<a name="l00252"></a>00252                         <span class="comment">// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * </span>
<a name="l00253"></a>00253 CClassABC::~CClassABC()
<a name="l00254"></a>00254         {
<a name="l00255"></a>00255         <span class="keyword">delete</span> iA;
<a name="l00256"></a>00256         <span class="keyword">delete</span> iC;
<a name="l00257"></a>00257         <span class="keywordflow">if</span> (iB.IsPtr())
<a name="l00258"></a>00258                 <span class="keyword">delete</span> iB.AsPtr(); <span class="comment">// can also &quot;delete iB;&quot; makes implicit call to &quot;operator T*()&quot;</span>
<a name="l00259"></a>00259         }
<a name="l00260"></a>00260 
<a name="l00261"></a>00261         
<a name="l00262"></a>00262                                 <span class="comment">// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * </span>
<a name="l00263"></a>00263                                 <span class="comment">// Stores the CClassB object in its own stream and</span>
<a name="l00264"></a>00264                                 <span class="comment">// then stores:</span>
<a name="l00265"></a>00265                                 <span class="comment">//              the CClassA object,</span>
<a name="l00266"></a>00266                                 <span class="comment">//              the streamid of the CClassB object,</span>
<a name="l00267"></a>00267                                 <span class="comment">//              the CClassC object</span>
<a name="l00268"></a>00268                                 <span class="comment">// in a separate stream.</span>
<a name="l00269"></a>00269                                 <span class="comment">// Returns the streamid of this last stream</span>
<a name="l00270"></a>00270                                 <span class="comment">// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * </span>
<a name="l00271"></a>00271 TStreamId CClassABC::StoreL()
<a name="l00272"></a>00272         {
<a name="l00273"></a>00273                                 <span class="comment">// Construct the output stream which is intended</span>
<a name="l00274"></a>00274                                 <span class="comment">// to hold the CClassB object only.</span>
<a name="l00275"></a>00275         RStoreWriteStream outstream;
<a name="l00276"></a>00276         TStreamId idForB = outstream.CreateLC(iStore);
<a name="l00277"></a>00277                                 <span class="comment">// Stream out the CClassB object.</span>
<a name="l00278"></a>00278                                 <span class="comment">// Note that the right hand side returns a reference</span>
<a name="l00279"></a>00279                                 <span class="comment">// to CClassB</span>
<a name="l00280"></a>00280         outstream  &lt;&lt; *iB; 
<a name="l00281"></a>00281                                 <span class="comment">// Commit changes to the stream</span>
<a name="l00282"></a>00282         outstream.CommitL();
<a name="l00283"></a>00283                                 <span class="comment">// Cleanup the stream object</span>
<a name="l00284"></a>00284         CleanupStack::PopAndDestroy();  
<a name="l00285"></a>00285                                 <span class="comment">// Now construct the output stream which is intended</span>
<a name="l00286"></a>00286                                 <span class="comment">// to hold:</span>
<a name="l00287"></a>00287                                 <span class="comment">//              the CClassA object,</span>
<a name="l00288"></a>00288                                 <span class="comment">//              the streamid of the CClassB object,</span>
<a name="l00289"></a>00289                                 <span class="comment">//              the CClassC object</span>
<a name="l00290"></a>00290         TStreamId <span class="keywordtype">id</span> = outstream.CreateLC(iStore);
<a name="l00291"></a>00291                                 <span class="comment">// Write out the CClassA object.</span>
<a name="l00292"></a>00292         outstream  &lt;&lt; *iA; 
<a name="l00293"></a>00293                                 <span class="comment">// Write out the stream id of the CClassB object</span>
<a name="l00294"></a>00294         outstream  &lt;&lt; idForB;
<a name="l00295"></a>00295                                 <span class="comment">// Write out the CClassC object.</span>
<a name="l00296"></a>00296         outstream  &lt;&lt; *iC;
<a name="l00297"></a>00297                                 <span class="comment">// Commit changes to the stream</span>
<a name="l00298"></a>00298         outstream.CommitL();
<a name="l00299"></a>00299                                 <span class="comment">// Cleanup the stream object,</span>
<a name="l00300"></a>00300         CleanupStack::PopAndDestroy();  
<a name="l00301"></a>00301                                 <span class="comment">// Return this stream id</span>
<a name="l00302"></a>00302         <span class="keywordflow">return</span> id;
<a name="l00303"></a>00303         }
<a name="l00304"></a>00304 
<a name="l00305"></a>00305                                 
<a name="l00306"></a>00306 <span class="keyword">const</span> <a class="code" href="class_c_class_a.html">CClassA</a>* CClassABC::PtrA()
<a name="l00307"></a>00307         {
<a name="l00308"></a>00308         <span class="keywordflow">return</span> iA;      <span class="comment">// Return a pointer to the contained CClassA object</span>
<a name="l00309"></a>00309         }
<a name="l00310"></a>00310 
<a name="l00311"></a>00311                                 
<a name="l00312"></a>00312 <span class="keyword">const</span> CClassB* CClassABC::PtrBL()
<a name="l00313"></a>00313         {
<a name="l00314"></a>00314         <span class="keywordflow">if</span> (iB.IsId())          <span class="comment">// If the contained CClassB object is not in memory, it must</span>
<a name="l00315"></a>00315                 RestoreBL();    <span class="comment">// be loaded in before a pointer can be returned to the caller</span>
<a name="l00316"></a>00316         <span class="keywordflow">return</span> iB.AsPtr();
<a name="l00317"></a>00317         }
<a name="l00318"></a>00318 
<a name="l00319"></a>00319                                 
<a name="l00320"></a>00320 <span class="keyword">const</span> CClassC* CClassABC::PtrC()
<a name="l00321"></a>00321         {
<a name="l00322"></a>00322         <span class="keywordflow">return</span> iC;      <span class="comment">//Returns a pointer to the contained CClassC object</span>
<a name="l00323"></a>00323         }
<a name="l00324"></a>00324                                 
<a name="l00325"></a>00325                                 <span class="comment">// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * </span>
<a name="l00326"></a>00326                                 <span class="comment">// Restores the CClassA and CClassC objects and the streamid for the</span>
<a name="l00327"></a>00327                                 <span class="comment">// CClassB object.</span>
<a name="l00328"></a>00328                                 <span class="comment">// The swizzle for the CClassB object is constructed from the</span>
<a name="l00329"></a>00329                                 <span class="comment">// streamid but the CClassB object itself is NOT restored at </span>
<a name="l00330"></a>00330                                 <span class="comment">// this time.</span>
<a name="l00331"></a>00331                                 <span class="comment">// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * </span>
<a name="l00332"></a>00332 <span class="keywordtype">void</span> CClassABC::RestoreL()
<a name="l00333"></a>00333         {
<a name="l00334"></a>00334                                 <span class="comment">// Construct the input stream.</span>
<a name="l00335"></a>00335         RStoreReadStream instream;
<a name="l00336"></a>00336         instream.OpenLC(iStore,iId);
<a name="l00337"></a>00337                                 <span class="comment">// Construct a CClassA object and restore from the stream</span>
<a name="l00338"></a>00338         iA = CClassA::NewL();
<a name="l00339"></a>00339         instream &gt;&gt; *iA;
<a name="l00340"></a>00340                                 <span class="comment">// Construct the swizzle for the CClassB object. This</span>
<a name="l00341"></a>00341                                 <span class="comment">// stream contains the id of the stream which </span>
<a name="l00342"></a>00342                                 <span class="comment">// actually contains the full CClassB object. The loading of</span>
<a name="l00343"></a>00343                                 <span class="comment">// the CClassB object into memory is deferred until later.</span>
<a name="l00344"></a>00344                                 <span class="comment">// The resulting swizzle represents the CClassB object as </span>
<a name="l00345"></a>00345                                 <span class="comment">// a streamid </span>
<a name="l00346"></a>00346         instream &gt;&gt; iB;
<a name="l00347"></a>00347                                 <span class="comment">// Construct a CClassC object and restrore from the stream</span>
<a name="l00348"></a>00348         iC = CClassC::NewL();
<a name="l00349"></a>00349         instream &gt;&gt; *iC;
<a name="l00350"></a>00350                                 <span class="comment">// Cleanup the stream object</span>
<a name="l00351"></a>00351         CleanupStack::PopAndDestroy();
<a name="l00352"></a>00352         }
<a name="l00353"></a>00353 
<a name="l00354"></a>00354 
<a name="l00355"></a>00355                                 <span class="comment">// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * </span>
<a name="l00356"></a>00356                                 <span class="comment">// Loads the CClassB object into memory and changes the swizzle&#39;s</span>
<a name="l00357"></a>00357                                 <span class="comment">// representation from &quot;streamid&quot; to &quot;pointer&quot;.</span>
<a name="l00358"></a>00358                                 <span class="comment">// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * </span>
<a name="l00359"></a>00359 <span class="keywordtype">void</span> CClassABC::RestoreBL()
<a name="l00360"></a>00360         {
<a name="l00361"></a>00361                                 <span class="comment">// Construct the input stream. Assumes we have the correct store (this</span>
<a name="l00362"></a>00362                                 <span class="comment">// emphasizes the need to ensure that the store remain open)</span>
<a name="l00363"></a>00363         RStoreReadStream instream;
<a name="l00364"></a>00364         instream.OpenLC(iStore,iB.AsId());
<a name="l00365"></a>00365                                 <span class="comment">// Construct a CClassB object and restore from the stream. The </span>
<a name="l00366"></a>00366                                 <span class="comment">// assignment: CClassB* to TSwizzle&lt;CClassB&gt; changes the</span>
<a name="l00367"></a>00367                                 <span class="comment">// swizzle&#39;s representation of the CClassB object </span>
<a name="l00368"></a>00368                                 <span class="comment">// from &quot;streamid&quot; to &quot;pointer&quot;</span>
<a name="l00369"></a>00369         CClassB* ptrB = CClassB::NewLC();
<a name="l00370"></a>00370         instream &gt;&gt; *ptrB;
<a name="l00371"></a>00371         CleanupStack::Pop();
<a name="l00372"></a>00372         iB = ptrB;
<a name="l00373"></a>00373                                 <span class="comment">// Cleanup the stream object                    </span>
<a name="l00374"></a>00374         CleanupStack::PopAndDestroy();
<a name="l00375"></a>00375         }       
<a name="l00376"></a>00376 
<a name="l00377"></a>00377 <span class="comment">//***************************************************************</span>
<a name="l00378"></a>00378 <span class="comment">//</span>
<a name="l00379"></a>00379 <span class="comment">// CClassA Implementation</span>
<a name="l00380"></a>00380 <span class="comment">//</span>
<a name="l00381"></a>00381 <span class="comment">//***************************************************************</span>
<a name="l00382"></a>00382 <a class="code" href="class_c_class_a.html">CClassA</a>* CClassA::NewL()
<a name="l00383"></a>00383         {
<a name="l00384"></a>00384         <a class="code" href="class_c_class_a.html">CClassA</a>* <span class="keyword">self</span> = CClassA::NewLC();
<a name="l00385"></a>00385         CleanupStack::Pop();
<a name="l00386"></a>00386         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00387"></a>00387         }
<a name="l00388"></a>00388 
<a name="l00389"></a>00389 <a class="code" href="class_c_class_a.html">CClassA</a>* CClassA::NewLC()
<a name="l00390"></a>00390         {
<a name="l00391"></a>00391         <a class="code" href="class_c_class_a.html">CClassA</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_class_a.html">CClassA</a>;
<a name="l00392"></a>00392         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00393"></a>00393         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00394"></a>00394         }
<a name="l00395"></a>00395 
<a name="l00396"></a>00396 CClassA::~CClassA()
<a name="l00397"></a>00397         {
<a name="l00398"></a>00398         <span class="keyword">delete</span> iVarBuf;
<a name="l00399"></a>00399         }
<a name="l00400"></a>00400 
<a name="l00401"></a>00401 <span class="keywordtype">void</span> CClassA::ExternalizeL(RWriteStream&amp; aStream)<span class="keyword"> const</span>
<a name="l00402"></a>00402 <span class="keyword">        </span>{
<a name="l00403"></a>00403         aStream.WriteInt32L(iVarBuf-&gt;Des().MaxLength());
<a name="l00404"></a>00404         aStream &lt;&lt; *iVarBuf;
<a name="l00405"></a>00405         aStream.WriteInt32L(iIntValue);
<a name="l00406"></a>00406         aStream.WriteUint32L(iUintValue);
<a name="l00407"></a>00407         }  
<a name="l00408"></a>00408  
<a name="l00409"></a>00409 <span class="keywordtype">void</span> CClassA::InternalizeL(RReadStream&amp; aStream)
<a name="l00410"></a>00410         {
<a name="l00411"></a>00411         TInt maxlen;
<a name="l00412"></a>00412         maxlen     = aStream.ReadInt32L();
<a name="l00413"></a>00413         iVarBuf    = HBufC::NewL(aStream,maxlen);
<a name="l00414"></a>00414         iIntValue  = aStream.ReadInt32L();
<a name="l00415"></a>00415         iUintValue = aStream.ReadUint32L();
<a name="l00416"></a>00416         }  
<a name="l00417"></a>00417                 
<a name="l00418"></a>00418 
<a name="l00419"></a>00419 <span class="comment">//***************************************************************</span>
<a name="l00420"></a>00420 <span class="comment">//</span>
<a name="l00421"></a>00421 <span class="comment">// CClassB Implementation</span>
<a name="l00422"></a>00422 <span class="comment">//</span>
<a name="l00423"></a>00423 <span class="comment">//***************************************************************</span>
<a name="l00424"></a>00424 CClassB* CClassB::NewLC()
<a name="l00425"></a>00425         {
<a name="l00426"></a>00426         CClassB* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) CClassB;
<a name="l00427"></a>00427         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00428"></a>00428         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00429"></a>00429         }
<a name="l00430"></a>00430 
<a name="l00431"></a>00431 CClassB* CClassB::NewL()        
<a name="l00432"></a>00432         {
<a name="l00433"></a>00433         CClassB* <span class="keyword">self</span> = CClassB::NewLC();
<a name="l00434"></a>00434         CleanupStack::Pop();    
<a name="l00435"></a>00435         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00436"></a>00436         }
<a name="l00437"></a>00437 
<a name="l00438"></a>00438 <span class="keywordtype">void</span> CClassB::ExternalizeL(RWriteStream&amp; aStream)<span class="keyword"> const</span>
<a name="l00439"></a>00439 <span class="keyword">        </span>{
<a name="l00440"></a>00440         aStream &lt;&lt; iFixBuf;
<a name="l00441"></a>00441         aStream.WriteInt32L(iIntValue);
<a name="l00442"></a>00442         aStream.WriteUint32L(iUintValue);
<a name="l00443"></a>00443         aStream.WriteReal64L(iRealValue);
<a name="l00444"></a>00444         }  
<a name="l00445"></a>00445  
<a name="l00446"></a>00446 <span class="keywordtype">void</span> CClassB::InternalizeL(RReadStream&amp; aStream)
<a name="l00447"></a>00447         {
<a name="l00448"></a>00448         aStream &gt;&gt; iFixBuf;
<a name="l00449"></a>00449         iIntValue  = aStream.ReadInt32L();
<a name="l00450"></a>00450         iUintValue = aStream.ReadUint32L();
<a name="l00451"></a>00451         iRealValue = aStream.ReadReal64L();
<a name="l00452"></a>00452         }  
<a name="l00453"></a>00453 
<a name="l00454"></a>00454 <span class="comment">//***************************************************************</span>
<a name="l00455"></a>00455 <span class="comment">//</span>
<a name="l00456"></a>00456 <span class="comment">// CClassC Implementation</span>
<a name="l00457"></a>00457 <span class="comment">//</span>
<a name="l00458"></a>00458 <span class="comment">//***************************************************************</span>
<a name="l00459"></a>00459 CClassC* CClassC::NewL()
<a name="l00460"></a>00460         {
<a name="l00461"></a>00461         CClassC* <span class="keyword">self</span> = CClassC::NewLC();
<a name="l00462"></a>00462         CleanupStack::Pop();
<a name="l00463"></a>00463         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00464"></a>00464         }
<a name="l00465"></a>00465 
<a name="l00466"></a>00466 CClassC* CClassC::NewLC()
<a name="l00467"></a>00467         {
<a name="l00468"></a>00468         CClassC* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) CClassC;
<a name="l00469"></a>00469         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00470"></a>00470         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00471"></a>00471         }
<a name="l00472"></a>00472 
<a name="l00473"></a>00473 <span class="keywordtype">void</span> CClassC::ExternalizeL(RWriteStream&amp; aStream)<span class="keyword"> const</span>
<a name="l00474"></a>00474 <span class="keyword">        </span>{
<a name="l00475"></a>00475         aStream &lt;&lt; iFixBuf;
<a name="l00476"></a>00476         }  
<a name="l00477"></a>00477  
<a name="l00478"></a>00478 <span class="keywordtype">void</span> CClassC::InternalizeL(RReadStream&amp; aStream)
<a name="l00479"></a>00479         {
<a name="l00480"></a>00480         aStream &gt;&gt; iFixBuf;
<a name="l00481"></a>00481         }  
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

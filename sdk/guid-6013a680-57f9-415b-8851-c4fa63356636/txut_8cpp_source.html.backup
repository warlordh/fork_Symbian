<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/ForumNokia/S60_3rd_Edition_TextMTM_Example/modules/Util/src/txut.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/ForumNokia/S60_3rd_Edition_TextMTM_Example/modules/Util/src/txut.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// TXUT.CPP</span>
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// © 2004 Nokia Corporation.  All rights reserved.</span>
<a name="l00004"></a>00004 <span class="comment">//</span>
<a name="l00005"></a>00005 
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;msvstd.h&gt;</span>             <span class="comment">// TMsvEntry</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;msvstore.h&gt;</span>   <span class="comment">// CMsvStore</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;MSVUIDS.H&gt;</span>    <span class="comment">//KUidMsvFolderEntry</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;centralrepository.h&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &quot;txut.h&quot;</span>
<a name="l00011"></a>00011 
<a name="l00012"></a>00012 <span class="comment">// system includes</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &lt;msvuids.h&gt;</span>    <span class="comment">//KUidMsvFolderEntry</span>
<a name="l00014"></a>00014 <span class="keyword">const</span> TUint32 KNullId = 0x00000000;
<a name="l00015"></a>00015 <span class="keyword">const</span> TUint32 KIncrementAccount = 0x00100000;
<a name="l00016"></a>00016 <span class="keyword">const</span> TInt KMaxAccount = 2048;
<a name="l00017"></a>00017 <span class="keyword">const</span> TUint32 KDefaultServiceId = 0x80000000; <span class="comment">// set top bit</span>
<a name="l00018"></a>00018 <span class="keyword">const</span> TUint32 EAccountMask = 0x800FFFFF;
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="comment">// Key IDs for particular text mtm settings in repository</span>
<a name="l00021"></a>00021 <span class="keyword">enum</span>
<a name="l00022"></a>00022         {
<a name="l00023"></a>00023         EServiceId = 0,
<a name="l00024"></a>00024         EFolderSettingId = 1
<a name="l00025"></a>00025         };
<a name="l00026"></a>00026 <span class="comment">// user includes</span>
<a name="l00027"></a>00027 <span class="comment">// standard NewL</span>
<a name="l00028"></a>00028 EXPORT_C <a class="code" href="class_c_m_t_m_txt_settings.html">CMTMTxtSettings</a>* CMTMTxtSettings::NewL()
<a name="l00029"></a>00029         {
<a name="l00030"></a>00030         <a class="code" href="class_c_m_t_m_txt_settings.html">CMTMTxtSettings</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_m_t_m_txt_settings.html">CMTMTxtSettings</a>();
<a name="l00031"></a>00031         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00032"></a>00032         <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00033"></a>00033         CleanupStack::Pop();
<a name="l00034"></a>00034         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00035"></a>00035         }
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">// destructor</span>
<a name="l00038"></a>00038 CMTMTxtSettings::~CMTMTxtSettings()
<a name="l00039"></a>00039         {
<a name="l00040"></a>00040         <span class="keyword">delete</span> iRepository;
<a name="l00041"></a>00041         }
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">// delete all settings for specified service</span>
<a name="l00044"></a>00044 EXPORT_C <span class="keywordtype">void</span> CMTMTxtSettings::DeleteSettingsL(TMsvId aServiceId)
<a name="l00045"></a>00045         {
<a name="l00046"></a>00046         TUint32 serviceKey = FindAccountL(aServiceId);
<a name="l00047"></a>00047         DeleteSettingL(serviceKey);
<a name="l00048"></a>00048         DeleteSettingL(serviceKey + EFolderSettingId);
<a name="l00049"></a>00049         }
<a name="l00050"></a>00050 
<a name="l00058"></a><a class="code" href="class_c_m_t_m_txt_settings.html#a8bacda6a17021938317daba7326cfb0b">00058</a> EXPORT_C <span class="keywordtype">void</span> <a class="code" href="class_c_m_t_m_txt_settings.html#a8bacda6a17021938317daba7326cfb0b">CMTMTxtSettings::LoadSettingsL</a>(TMsvId aServiceId, <a class="code" href="class_t_m_t_m_txt_settings.html">TMTMTxtSettings</a>&amp; aSettings)<span class="keyword"> const</span>
<a name="l00059"></a>00059 <span class="keyword">        </span>{
<a name="l00060"></a>00060         TUint32 serviceKey = FindAccountL(aServiceId);
<a name="l00061"></a>00061         TFileName rootFolder;
<a name="l00062"></a>00062         User::LeaveIfError(iRepository-&gt;Get(serviceKey + EFolderSettingId, rootFolder));
<a name="l00063"></a>00063         aSettings.SetRootFolder(rootFolder);
<a name="l00064"></a>00064         }
<a name="l00065"></a>00065 
<a name="l00073"></a><a class="code" href="class_c_m_t_m_txt_settings.html#ac9c5ff6643fb0a7c7e573da18159b08d">00073</a> EXPORT_C <span class="keywordtype">void</span> <a class="code" href="class_c_m_t_m_txt_settings.html#ac9c5ff6643fb0a7c7e573da18159b08d">CMTMTxtSettings::SaveSettingsL</a>(TMsvId aServiceId, <span class="keyword">const</span> <a class="code" href="class_t_m_t_m_txt_settings.html">TMTMTxtSettings</a>&amp; aSettings)
<a name="l00074"></a>00074         {
<a name="l00075"></a>00075         TUint32 accountId = 0;
<a name="l00076"></a>00076         TInt error = 0;
<a name="l00077"></a>00077         <span class="comment">// see if account already exists</span>
<a name="l00078"></a>00078         TRAP(error, accountId = FindAccountL(aServiceId));
<a name="l00079"></a>00079         <span class="keywordflow">if</span> (error != KErrUnknown) User::LeaveIfError(error);
<a name="l00080"></a>00080         <span class="comment">// doesn&#39;t already exist, so get id of new account</span>
<a name="l00081"></a>00081         <span class="keywordflow">if</span> (error == KErrUnknown) accountId = GetNextAccountSlotL();
<a name="l00082"></a>00082 
<a name="l00083"></a>00083         TRAP( error,
<a name="l00084"></a>00084                 <span class="comment">// Save settings to CenRep</span>
<a name="l00085"></a>00085                 CreateOrSetL(accountId, static_cast&lt;TInt&gt;(aServiceId));
<a name="l00086"></a>00086                 CreateOrSetL(accountId + EFolderSettingId, aSettings.RootFolder());
<a name="l00087"></a>00087                 );
<a name="l00088"></a>00088         <span class="keywordflow">if</span> (error != KErrNone)
<a name="l00089"></a>00089                 {
<a name="l00090"></a>00090                 <span class="comment">// saving settings to CenRep failed, so cleanup account and leave</span>
<a name="l00091"></a>00091                 DeleteSettingsL(aServiceId);
<a name="l00092"></a>00092                 User::Leave(error);
<a name="l00093"></a>00093                 }
<a name="l00094"></a>00094         }
<a name="l00095"></a>00095 
<a name="l00101"></a><a class="code" href="class_c_m_t_m_txt_settings.html#ab27db4213d9b7e484389146f4f43226b">00101</a> EXPORT_C <span class="keywordtype">void</span> <a class="code" href="class_c_m_t_m_txt_settings.html#ab27db4213d9b7e484389146f4f43226b">CMTMTxtSettings::SetDefaultServiceL</a>(TMsvId aService)
<a name="l00102"></a>00102         {
<a name="l00103"></a>00103         CreateOrSetL(KDefaultServiceId, static_cast&lt;TInt&gt;(aService));
<a name="l00104"></a>00104         }
<a name="l00105"></a>00105 
<a name="l00113"></a><a class="code" href="class_c_m_t_m_txt_settings.html#a281520d5af2750933608c80ceba8b91e">00113</a> EXPORT_C TMsvId <a class="code" href="class_c_m_t_m_txt_settings.html#a281520d5af2750933608c80ceba8b91e">CMTMTxtSettings::DefaultServiceL</a>()<span class="keyword"> const</span>
<a name="l00114"></a>00114 <span class="keyword">        </span>{
<a name="l00115"></a>00115         <span class="comment">// Get the service Id from CenRep</span>
<a name="l00116"></a>00116         TInt temp = 0;
<a name="l00117"></a>00117         User::LeaveIfError(iRepository-&gt;Get(KDefaultServiceId, temp));
<a name="l00118"></a>00118         <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>TMsvId<span class="keyword">&gt;</span>(temp);
<a name="l00119"></a>00119         }
<a name="l00120"></a>00120 
<a name="l00124"></a><a class="code" href="class_c_m_t_m_txt_settings.html#a8de0c6d0a83ffe238b4495281305b3d0">00124</a> EXPORT_C <span class="keywordtype">void</span> <a class="code" href="class_c_m_t_m_txt_settings.html#a8de0c6d0a83ffe238b4495281305b3d0">CMTMTxtSettings::DeleteDefaultServiceSettingL</a>()
<a name="l00125"></a>00125         {
<a name="l00126"></a>00126         DeleteSettingL(KDefaultServiceId);
<a name="l00127"></a>00127         }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129 <span class="comment">// create cenrep repository in which to store textmtm settings</span>
<a name="l00130"></a>00130 <span class="keywordtype">void</span> CMTMTxtSettings::ConstructL()
<a name="l00131"></a>00131         {
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 <span class="comment">//#ifdef __WINS__</span>
<a name="l00134"></a>00134 <span class="comment">//      const TUid KUidMtm = { KUidMsgTypeText };</span>
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 <span class="comment">//#else</span>
<a name="l00137"></a>00137         <span class="keyword">const</span> TInt KUidDefaultMtmRepositoryFileValue = 0x10274556;
<a name="l00138"></a>00138         <span class="keyword">const</span> TUid KUidMtm = { KUidDefaultMtmRepositoryFileValue };
<a name="l00139"></a>00139 <span class="comment">//#endif</span>
<a name="l00140"></a>00140 
<a name="l00141"></a>00141         iRepository = CRepository::NewL(KUidMtm);
<a name="l00142"></a>00142 
<a name="l00143"></a>00143         }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 <span class="comment">// sets (or creates if it does not already exist) a string key</span>
<a name="l00146"></a>00146 <span class="keywordtype">void</span> CMTMTxtSettings::CreateOrSetL(TUint aKey, <span class="keyword">const</span> TDesC&amp; aValue)
<a name="l00147"></a>00147         {
<a name="l00148"></a>00148         TInt error = iRepository-&gt;Set(aKey, aValue);
<a name="l00149"></a>00149         <span class="keywordflow">if</span> (error == KErrNotFound)
<a name="l00150"></a>00150                 {
<a name="l00151"></a>00151                 <span class="comment">// setting does not exist, so create it</span>
<a name="l00152"></a>00152                 User::LeaveIfError(iRepository-&gt;Create(aKey, aValue));
<a name="l00153"></a>00153                 }
<a name="l00154"></a>00154         <span class="keywordflow">else</span>
<a name="l00155"></a>00155                 {
<a name="l00156"></a>00156                 User::LeaveIfError(error);
<a name="l00157"></a>00157                 }
<a name="l00158"></a>00158         }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 <span class="comment">// sets (or creates if it does not already exist) an integer key</span>
<a name="l00161"></a>00161 <span class="keywordtype">void</span> CMTMTxtSettings::CreateOrSetL(TUint aKey, TInt aValue)
<a name="l00162"></a>00162         {
<a name="l00163"></a>00163         TInt error = iRepository-&gt;Set(aKey, aValue);
<a name="l00164"></a>00164         <span class="keywordflow">if</span> (error == KErrNotFound)
<a name="l00165"></a>00165                 {
<a name="l00166"></a>00166                 <span class="comment">// setting does not exist, so create it</span>
<a name="l00167"></a>00167                 User::LeaveIfError(iRepository-&gt;Create(aKey, aValue));
<a name="l00168"></a>00168                 }
<a name="l00169"></a>00169         <span class="keywordflow">else</span>
<a name="l00170"></a>00170                 {
<a name="l00171"></a>00171                 User::LeaveIfError(error);
<a name="l00172"></a>00172                 }
<a name="l00173"></a>00173         }
<a name="l00174"></a>00174 
<a name="l00175"></a>00175 <span class="comment">// Leaves with KErrUnknown if account does not exist</span>
<a name="l00176"></a>00176 TUint32 CMTMTxtSettings::FindAccountL(TMsvId aService)<span class="keyword"> const</span>
<a name="l00177"></a>00177 <span class="keyword">        </span>{
<a name="l00178"></a>00178         RArray&lt;TUint32&gt; accounts;
<a name="l00179"></a>00179         CleanupClosePushL(accounts);
<a name="l00180"></a>00180         TInt error = iRepository-&gt;FindEqL(KNullId, static_cast&lt;TUint32&gt;(EAccountMask), static_cast&lt;TInt&gt;(aService), accounts);
<a name="l00181"></a>00181         <span class="keywordflow">if</span> (error == KErrNotFound)
<a name="l00182"></a>00182                 {
<a name="l00183"></a>00183                 <span class="comment">// account does not exist</span>
<a name="l00184"></a>00184                 User::Leave(KErrUnknown);
<a name="l00185"></a>00185                 }
<a name="l00186"></a>00186         <span class="keywordflow">else</span>
<a name="l00187"></a>00187                 {
<a name="l00188"></a>00188                 User::LeaveIfError(error);
<a name="l00189"></a>00189                 }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191         <span class="keywordflow">if</span> (accounts.Count()&gt;1)
<a name="l00192"></a>00192                 {
<a name="l00193"></a>00193                 <span class="comment">// There should be only one account for the service</span>
<a name="l00194"></a>00194                 User::Leave(KErrOverflow);
<a name="l00195"></a>00195                 }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197         TUint32 account = accounts[0];
<a name="l00198"></a>00198         CleanupStack::PopAndDestroy(&amp;accounts);
<a name="l00199"></a>00199         <span class="keywordflow">return</span> account;
<a name="l00200"></a>00200         }
<a name="l00201"></a>00201 <span class="comment">//      TMTMTxtSettings: service settings storage</span>
<a name="l00202"></a>00202 <span class="comment">//</span>
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 EXPORT_C <span class="keywordtype">void</span> TMTMTxtSettings::ExternalizeL( RMsvWriteStream&amp; aWriteStream )<span class="keyword"> const</span>
<a name="l00205"></a>00205 <span class="keyword">        </span>{
<a name="l00206"></a>00206         <span class="comment">// store iRootFolder</span>
<a name="l00207"></a>00207         aWriteStream &lt;&lt; iRootFolder;
<a name="l00208"></a>00208         <span class="keywordflow">return</span>;
<a name="l00209"></a>00209         }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 EXPORT_C <span class="keywordtype">void</span> TMTMTxtSettings::InternalizeL( RMsvReadStream&amp; aReadStream )
<a name="l00212"></a>00212         {
<a name="l00213"></a>00213         aReadStream &gt;&gt; iRootFolder;
<a name="l00214"></a>00214         <span class="keywordflow">return</span>;
<a name="l00215"></a>00215         }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 EXPORT_C <span class="keywordtype">void</span> TMTMTxtSettings::StoreL(CMsvStore&amp; aMsvStore)<span class="keyword"> const</span>
<a name="l00218"></a>00218 <span class="keyword">        </span>{
<a name="l00219"></a>00219         RMsvWriteStream out;
<a name="l00220"></a>00220         out.AssignLC( aMsvStore, KUidTxtMTMSettings ); <span class="comment">// pushes &#39;out&#39; to the stack</span>
<a name="l00221"></a>00221         ExternalizeL(out);
<a name="l00222"></a>00222         out.CommitL();
<a name="l00223"></a>00223         CleanupStack::PopAndDestroy();
<a name="l00224"></a>00224         }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 <span class="comment">// get a base (account) id to identify all keys for a particular service</span>
<a name="l00227"></a>00227 TUint CMTMTxtSettings::GetNextAccountSlotL()
<a name="l00228"></a>00228         {
<a name="l00229"></a>00229         TUint32 accountId = KNullId;
<a name="l00230"></a>00230         TInt serviceId = 0;
<a name="l00231"></a>00231         TInt error = 0;
<a name="l00232"></a>00232         TBool found = EFalse;
<a name="l00233"></a>00233 
<a name="l00234"></a>00234         <span class="keywordflow">for</span> (TInt count = 0; count &lt; KMaxAccount; ++count)
<a name="l00235"></a>00235                 {
<a name="l00236"></a>00236                 accountId = accountId + KIncrementAccount;
<a name="l00237"></a>00237                 error = iRepository-&gt;Get(accountId, serviceId);
<a name="l00238"></a>00238                 <span class="keywordflow">if</span> (error == KErrNotFound)
<a name="l00239"></a>00239                         {
<a name="l00240"></a>00240                         found = ETrue;
<a name="l00241"></a>00241                         <span class="keywordflow">break</span>;
<a name="l00242"></a>00242                         }
<a name="l00243"></a>00243                 <span class="keywordflow">else</span>
<a name="l00244"></a>00244                         {
<a name="l00245"></a>00245                         User::LeaveIfError(error);
<a name="l00246"></a>00246                         }
<a name="l00247"></a>00247                 }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249         <span class="keywordflow">if</span> (found == EFalse)
<a name="l00250"></a>00250                 {
<a name="l00251"></a>00251                 <span class="comment">// No empty slot available</span>
<a name="l00252"></a>00252                 User::Leave(KErrNotFound);
<a name="l00253"></a>00253                 }
<a name="l00254"></a>00254 
<a name="l00255"></a>00255         <span class="keywordflow">return</span> accountId;
<a name="l00256"></a>00256         }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 <span class="comment">// delete a setting, and don&#39;t give an error if it doesn&#39;t exist</span>
<a name="l00259"></a>00259 <span class="keywordtype">void</span> CMTMTxtSettings::DeleteSettingL(TUint32 settingId)
<a name="l00260"></a>00260         {
<a name="l00261"></a>00261         TInt error = iRepository-&gt;Delete(settingId);
<a name="l00262"></a>00262         <span class="keywordflow">if</span> (error != KErrNotFound)
<a name="l00263"></a>00263                 {
<a name="l00264"></a>00264                 User::LeaveIfError(error);
<a name="l00265"></a>00265                 }
<a name="l00266"></a>00266         }
<a name="l00267"></a>00267 EXPORT_C <span class="keywordtype">void</span> TMTMTxtSettings::RestoreL(<span class="keyword">const</span> CMsvStore&amp; aMessageStore )
<a name="l00268"></a>00268 
<a name="l00269"></a>00269         {
<a name="l00270"></a>00270         <span class="keywordflow">if</span> (aMessageStore.IsPresentL(KUidTxtMTMSettings))
<a name="l00271"></a>00271                 {
<a name="l00272"></a>00272                 RMsvReadStream in;
<a name="l00273"></a>00273                 in.OpenLC( aMessageStore, KUidTxtMTMSettings ); <span class="comment">// pushes &#39;in&#39; to the stack</span>
<a name="l00274"></a>00274                 InternalizeL(in);
<a name="l00275"></a>00275                 CleanupStack::PopAndDestroy();
<a name="l00276"></a>00276                 }
<a name="l00277"></a>00277         }
<a name="l00278"></a>00278 
<a name="l00279"></a>00279 <span class="comment">//</span>
<a name="l00280"></a>00280 <span class="comment">// TxtUtils: Generic static utility functions</span>
<a name="l00281"></a>00281 <span class="comment">//</span>
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 EXPORT_C <span class="keywordtype">void</span> TxtUtils::GetEntryFileNameL(TFileName&amp; aFileName, TMsvEntry&amp; aEntry)
<a name="l00284"></a>00284 <span class="comment">// Create absolute file name: default path + aEntry.iDetails + aEntry.iDescription</span>
<a name="l00285"></a>00285         {
<a name="l00286"></a>00286         <a class="code" href="class_c_m_t_m_txt_settings.html">CMTMTxtSettings</a>* settings = CMTMTxtSettings::NewL();
<a name="l00287"></a>00287         CleanupStack::PushL(settings);
<a name="l00288"></a>00288         <a class="code" href="class_t_m_t_m_txt_settings.html">TMTMTxtSettings</a> root;
<a name="l00289"></a>00289         settings-&gt;<a class="code" href="class_c_m_t_m_txt_settings.html#a8bacda6a17021938317daba7326cfb0b">LoadSettingsL</a>(aEntry.iServiceId, root);
<a name="l00290"></a>00290         CleanupStack::PopAndDestroy(); <span class="comment">//settings</span>
<a name="l00291"></a>00291         aFileName = root.RootFolder();
<a name="l00292"></a>00292         aFileName.Append(aEntry.iDetails);
<a name="l00293"></a>00293         aFileName.Append(aEntry.iDescription);
<a name="l00294"></a>00294         <span class="keywordflow">if</span> (aEntry.iType == KUidMsvFolderEntry)
<a name="l00295"></a>00295                 aFileName.Append(KPathDelimiter);
<a name="l00296"></a>00296         }
<a name="l00297"></a>00297 
<a name="l00298"></a>00298 EXPORT_C <span class="keywordtype">void</span> TxtUtils::FindFileL(<span class="keyword">const</span> TDesC&amp; aFileName, <span class="keyword">const</span> TDesC&amp; aLocation, TFileName&amp; aRetVal)
<a name="l00299"></a>00299     {
<a name="l00300"></a>00300     RFs fs;
<a name="l00301"></a>00301     User::LeaveIfError(fs.Connect());
<a name="l00302"></a>00302     CleanupClosePushL(fs);
<a name="l00303"></a>00303     TFindFile finder(fs);
<a name="l00304"></a>00304     User::LeaveIfError(finder.FindByDir(aFileName, aLocation));
<a name="l00305"></a>00305     aRetVal = finder.File();
<a name="l00306"></a>00306     CleanupStack::PopAndDestroy();
<a name="l00307"></a>00307     }
<a name="l00308"></a>00308 
<a name="l00309"></a>00309 <span class="comment">//</span>
<a name="l00310"></a>00310 <span class="comment">// CMsvOpWait</span>
<a name="l00311"></a>00311 <span class="comment">//      Allows a synchronous wait on a operation</span>
<a name="l00312"></a>00312 <span class="comment">//</span>
<a name="l00313"></a>00313 EXPORT_C <a class="code" href="class_c_msv_op_wait.html">CMsvOpWait</a>* CMsvOpWait::NewLC(TInt aPriority)
<a name="l00314"></a>00314         {
<a name="l00315"></a>00315         <a class="code" href="class_c_msv_op_wait.html">CMsvOpWait</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_msv_op_wait.html">CMsvOpWait</a>(aPriority);
<a name="l00316"></a>00316         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00317"></a>00317         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00318"></a>00318         }
<a name="l00319"></a>00319 
<a name="l00320"></a>00320 CMsvOpWait::CMsvOpWait(TInt aPriority)
<a name="l00321"></a>00321 : CActive(aPriority)
<a name="l00322"></a>00322         {
<a name="l00323"></a>00323         CActiveScheduler::Add(<span class="keyword">this</span>);
<a name="l00324"></a>00324         }
<a name="l00325"></a>00325 
<a name="l00326"></a>00326 EXPORT_C CMsvOpWait::~CMsvOpWait()
<a name="l00327"></a>00327         {
<a name="l00328"></a>00328         Cancel();
<a name="l00329"></a>00329         }
<a name="l00330"></a>00330 
<a name="l00331"></a>00331 EXPORT_C <span class="keywordtype">void</span> CMsvOpWait::Start()
<a name="l00332"></a>00332         {
<a name="l00333"></a>00333         SetActive();
<a name="l00334"></a>00334         }
<a name="l00335"></a>00335 
<a name="l00336"></a>00336 <span class="keywordtype">void</span> CMsvOpWait::RunL()
<a name="l00337"></a>00337         {
<a name="l00338"></a>00338         CActiveScheduler::Stop();
<a name="l00339"></a>00339         }
<a name="l00340"></a>00340 
<a name="l00341"></a>00341 <span class="keywordtype">void</span> CMsvOpWait::DoCancel()
<a name="l00342"></a>00342         {
<a name="l00343"></a>00343         TRequestStatus* s=&amp;iStatus;
<a name="l00344"></a>00344         User::RequestComplete(s, KErrCancel);
<a name="l00345"></a>00345         }
<a name="l00346"></a>00346 <span class="comment">//</span>
<a name="l00347"></a>00347 <span class="comment">// CMsvCompOperation</span>
<a name="l00348"></a>00348 <span class="comment">//      An operation which is already completed on construction</span>
<a name="l00349"></a>00349 <span class="comment">//</span>
<a name="l00350"></a>00350 EXPORT_C <a class="code" href="class_c_msv_comp_operation.html">CMsvCompOperation</a>* CMsvCompOperation::NewL(CMsvSession&amp; aSession, TUid aMtm,
<a name="l00351"></a>00351         <span class="keyword">const</span> TDesC8&amp; aProgress, TMsvId aService, TRequestStatus&amp; aObserverRequestStatus, TInt aError)
<a name="l00352"></a>00352 <span class="comment">// aMtm and aService set CMsvOperation protected data members</span>
<a name="l00353"></a>00353 <span class="comment">// aProgress is progress information</span>
<a name="l00354"></a>00354 <span class="comment">// aObserverRequestStatus is the active object to signal on completion</span>
<a name="l00355"></a>00355 <span class="comment">// aError is the error code from the relevant operation</span>
<a name="l00356"></a>00356         {
<a name="l00357"></a>00357         <a class="code" href="class_c_msv_comp_operation.html">CMsvCompOperation</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_msv_comp_operation.html">CMsvCompOperation</a>(aSession, aObserverRequestStatus);
<a name="l00358"></a>00358         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00359"></a>00359         <span class="keyword">self</span>-&gt;ConstructL(aMtm, aError, aProgress, aService);
<a name="l00360"></a>00360         CleanupStack::Pop(<span class="keyword">self</span>);
<a name="l00361"></a>00361         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00362"></a>00362         }
<a name="l00363"></a>00363 
<a name="l00364"></a>00364 CMsvCompOperation::CMsvCompOperation(CMsvSession&amp; aSession, TRequestStatus&amp; aObserverRequestStatus)
<a name="l00365"></a>00365 : CMsvOperation(aSession, EPriorityStandard, aObserverRequestStatus)
<a name="l00366"></a>00366         {
<a name="l00367"></a>00367         }
<a name="l00368"></a>00368 
<a name="l00369"></a>00369 EXPORT_C CMsvCompOperation::~CMsvCompOperation()
<a name="l00370"></a>00370         {
<a name="l00371"></a>00371         Cancel();
<a name="l00372"></a>00372         <span class="keyword">delete</span> iProgress;
<a name="l00373"></a>00373         }
<a name="l00374"></a>00374 
<a name="l00375"></a>00375 <span class="keywordtype">void</span> CMsvCompOperation::ConstructL(TUid aMtm, TInt aError, <span class="keyword">const</span> TDesC8&amp; aProgress, TMsvId aService)
<a name="l00376"></a>00376         {
<a name="l00377"></a>00377         iProgress = HBufC8::NewL(aProgress.Length());
<a name="l00378"></a>00378         *iProgress = aProgress;
<a name="l00379"></a>00379         iMtm=aMtm;
<a name="l00380"></a>00380         iService=aService;
<a name="l00381"></a>00381         <span class="comment">//</span>
<a name="l00382"></a>00382         CActiveScheduler::Add(<span class="keyword">this</span>);
<a name="l00383"></a>00383         iStatus = KRequestPending;
<a name="l00384"></a>00384         SetActive();
<a name="l00385"></a>00385         <span class="comment">//</span>
<a name="l00386"></a>00386         TRequestStatus* pstat=&amp;iStatus;
<a name="l00387"></a>00387         User::RequestComplete(pstat, aError);
<a name="l00388"></a>00388         iObserverRequestStatus = KRequestPending;
<a name="l00389"></a>00389         }
<a name="l00390"></a>00390 
<a name="l00391"></a>00391 <span class="keyword">const</span> TDesC8&amp; CMsvCompOperation::ProgressL()
<a name="l00392"></a>00392         {
<a name="l00393"></a>00393         <span class="keywordflow">return</span> *iProgress;
<a name="l00394"></a>00394         }
<a name="l00395"></a>00395 
<a name="l00396"></a>00396 <span class="keywordtype">void</span> CMsvCompOperation::DoCancel()
<a name="l00397"></a>00397         {
<a name="l00398"></a>00398         <span class="comment">// does nothing as iStatus has already been completed in in ConstructL()</span>
<a name="l00399"></a>00399         }
<a name="l00400"></a>00400 
<a name="l00401"></a>00401 <span class="keywordtype">void</span> CMsvCompOperation::RunL()
<a name="l00402"></a>00402         {
<a name="l00403"></a>00403         TRequestStatus* pstat=&amp;iObserverRequestStatus;
<a name="l00404"></a>00404         User::RequestComplete(pstat, iStatus.Int());
<a name="l00405"></a>00405         }
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

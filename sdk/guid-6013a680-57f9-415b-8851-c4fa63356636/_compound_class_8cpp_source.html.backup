<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/SysLibs/Streaming/CompoundClass/CompoundClass.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/SysLibs/Streaming/CompoundClass/CompoundClass.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2000-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// Example to demonstrate the streaming of a compound object to</span>
<a name="l00015"></a>00015 <span class="comment">// a single stream.</span>
<a name="l00016"></a>00016 <span class="comment">//</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;CommonStreamStore.h&quot;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;s32file.h&gt;</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022                                 <span class="comment">// Constructs a CCompound object and externalizes</span>
<a name="l00023"></a>00023                                 <span class="comment">// it to a single stream.</span>
<a name="l00024"></a>00024 LOCAL_C <span class="keywordtype">void</span> doMakeAndExternalizeL(<span class="keyword">const</span> TDesC&amp; aName);
<a name="l00025"></a>00025 
<a name="l00026"></a>00026                                 <span class="comment">// Internalizes a CCompound object from</span>
<a name="l00027"></a>00027                                 <span class="comment">// the stream</span>
<a name="l00028"></a>00028 LOCAL_C <span class="keywordtype">void</span> doInternalizeL(<span class="keyword">const</span> TDesC&amp; aName);
<a name="l00029"></a>00029 
<a name="l00030"></a>00030                                 <span class="comment">// Displays content of a CCompound object</span>
<a name="l00031"></a>00031 <span class="keyword">class </span>CCompound;
<a name="l00032"></a>00032 LOCAL_C <span class="keywordtype">void</span> doShow(<span class="keyword">const</span> TDesC&amp; aHeading,<span class="keyword">const</span> CCompound&amp; theSimple);
<a name="l00033"></a>00033 
<a name="l00034"></a>00034                                 <span class="comment">// Defintion of classes used by the example</span>
<a name="l00035"></a>00035 <span class="keyword">class </span><a class="code" href="class_c_class_a.html">CClassA</a>
<a name="l00036"></a>00036         {
<a name="l00037"></a>00037 <span class="keyword">public</span> :
<a name="l00038"></a>00038         <span class="keywordtype">void</span> ExternalizeL(RWriteStream&amp; aStream) <span class="keyword">const</span>;
<a name="l00039"></a>00039         <span class="keywordtype">void</span> InternalizeL(RReadStream&amp; aStream);
<a name="l00040"></a>00040 <span class="keyword">public</span> :
<a name="l00041"></a>00041         TBuf&lt;32&gt; iBufferA;
<a name="l00042"></a>00042         TInt     iXA;
<a name="l00043"></a>00043         TUint    iYA;
<a name="l00044"></a>00044         };
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="keyword">class </span>CClassB
<a name="l00048"></a>00048         {
<a name="l00049"></a>00049 <span class="keyword">public</span> :
<a name="l00050"></a>00050         <span class="keywordtype">void</span> ExternalizeL(RWriteStream&amp; aStream) <span class="keyword">const</span>;
<a name="l00051"></a>00051         <span class="keywordtype">void</span> InternalizeL(RReadStream&amp; aStream);
<a name="l00052"></a>00052 <span class="keyword">public</span> :
<a name="l00053"></a>00053         TBuf&lt;32&gt; iBufferB;
<a name="l00054"></a>00054         };
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="keyword">class </span>TClassC
<a name="l00058"></a>00058         {
<a name="l00059"></a>00059 <span class="keyword">public</span> :
<a name="l00060"></a>00060         <span class="keywordtype">void</span> ExternalizeL(RWriteStream&amp; aStream) <span class="keyword">const</span>;
<a name="l00061"></a>00061         <span class="keywordtype">void</span> InternalizeL(RReadStream&amp; aStream);
<a name="l00062"></a>00062 <span class="keyword">public</span> :
<a name="l00063"></a>00063         TReal iZC;
<a name="l00064"></a>00064         };
<a name="l00065"></a>00065 
<a name="l00066"></a>00066         
<a name="l00067"></a>00067 <span class="keyword">class </span>CCompound : <span class="keyword">public</span> CBase
<a name="l00068"></a>00068         {
<a name="l00069"></a>00069 <span class="keyword">public</span> :
<a name="l00070"></a>00070         ~CCompound();
<a name="l00071"></a>00071         <span class="keyword">static</span>          CCompound* NewLC();
<a name="l00072"></a>00072         <span class="keyword">static</span>          CCompound* NewLC(CStreamStore&amp; aStore,TStreamId anId);
<a name="l00073"></a>00073         <span class="keyword">static</span>          CCompound* NewL(CStreamStore&amp; aStore,TStreamId anId);
<a name="l00074"></a>00074         TStreamId       StoreL(CStreamStore&amp; store);
<a name="l00075"></a>00075         <span class="keywordtype">void</span>            RestoreL(CStreamStore&amp; aStore,TStreamId anId);
<a name="l00076"></a>00076         <span class="keywordtype">void</span>            InternalizeL(RReadStream&amp; aStream);
<a name="l00077"></a>00077         <span class="keywordtype">void</span>            ExternalizeL(RWriteStream&amp; aStream) <span class="keyword">const</span>;
<a name="l00078"></a>00078 <span class="keyword">private</span>:
<a name="l00079"></a>00079     <span class="keywordtype">void</span>                ConstructL();
<a name="l00080"></a>00080         <span class="keywordtype">void</span>            ConstructL(CStreamStore&amp; aStore,TStreamId anId);
<a name="l00081"></a>00081 <span class="keyword">public</span> :
<a name="l00082"></a>00082         <a class="code" href="class_c_class_a.html">CClassA</a>* iCa;
<a name="l00083"></a>00083         CClassB* iCb;
<a name="l00084"></a>00084         TClassC  iTc;
<a name="l00085"></a>00085         };
<a name="l00086"></a>00086          
<a name="l00087"></a>00087 <span class="comment">// The file name, extension and path for the file store</span>
<a name="l00088"></a>00088         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFullNameOfFileStore,<span class="stringliteral">&quot;\\epoc32ex\\data\\stcompnd.dat&quot;</span>);
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 <span class="comment">// Do the example</span>
<a name="l00092"></a>00092 LOCAL_C <span class="keywordtype">void</span> doExampleL()
<a name="l00093"></a>00093     {
<a name="l00094"></a>00094                                             <span class="comment">// make sure directory exists</span>
<a name="l00095"></a>00095         fsSession.MkDirAll(KFullNameOfFileStore);
<a name="l00096"></a>00096         doMakeAndExternalizeL(KFullNameOfFileStore);
<a name="l00097"></a>00097         doInternalizeL(KFullNameOfFileStore);
<a name="l00098"></a>00098         }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 LOCAL_C <span class="keywordtype">void</span> doMakeAndExternalizeL(<span class="keyword">const</span> TDesC&amp; aName)
<a name="l00101"></a>00101         {
<a name="l00102"></a>00102         TParse  filestorename;
<a name="l00103"></a>00103 
<a name="l00104"></a>00104         fsSession.Parse(aName,filestorename);
<a name="l00105"></a>00105                                 <span class="comment">// construct file store object - the file to contain the</span>
<a name="l00106"></a>00106                                 <span class="comment">// the store replaces any existing file of the same name.</span>
<a name="l00107"></a>00107         CFileStore* store = CDirectFileStore::ReplaceLC(fsSession,filestorename.FullName(),EFileWrite);
<a name="l00108"></a>00108 
<a name="l00109"></a>00109                                 <span class="comment">// Must say what kind of file store</span>
<a name="l00110"></a>00110     store-&gt;SetTypeL(KDirectFileStoreLayoutUid);
<a name="l00111"></a>00111 
<a name="l00112"></a>00112                                 <span class="comment">// Construct an object of type CCompound </span>
<a name="l00113"></a>00113                                 <span class="comment">// and put some data into it.</span>
<a name="l00114"></a>00114         CCompound* thecompound = CCompound::NewLC();
<a name="l00115"></a>00115 
<a name="l00116"></a>00116         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtClassAText,<span class="stringliteral">&quot;CClassA text&quot;</span>);
<a name="l00117"></a>00117         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtClassBText,<span class="stringliteral">&quot;CClassB text&quot;</span>);
<a name="l00118"></a>00118 
<a name="l00119"></a>00119         thecompound-&gt;iCa-&gt;iBufferA = KTxtClassAText;
<a name="l00120"></a>00120         thecompound-&gt;iCa-&gt;iXA      = -1;
<a name="l00121"></a>00121         thecompound-&gt;iCa-&gt;iYA      = 2;
<a name="l00122"></a>00122         thecompound-&gt;iCb-&gt;iBufferB = KTxtClassBText;
<a name="l00123"></a>00123         thecompound-&gt;iTc.iZC       = 3.456;
<a name="l00124"></a>00124 
<a name="l00125"></a>00125                                 <span class="comment">// Show contents of the CCompound object (and its</span>
<a name="l00126"></a>00126                                 <span class="comment">// components)</span>
<a name="l00127"></a>00127         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtInitialContent,<span class="stringliteral">&quot;... Initial content of CCompound&quot;</span>);
<a name="l00128"></a>00128         doShow(KTxtInitialContent,*thecompound);
<a name="l00129"></a>00129                                         
<a name="l00130"></a>00130                                 <span class="comment">// Store the compound object to a single stream</span>
<a name="l00131"></a>00131                                 <span class="comment">// and save the stream id as the root id. </span>
<a name="l00132"></a>00132         TStreamId  <span class="keywordtype">id</span> = thecompound-&gt;StoreL(*store);
<a name="l00133"></a>00133 
<a name="l00134"></a>00134                                 <span class="comment">// Set the stream id as the root</span>
<a name="l00135"></a>00135         store-&gt;SetRootL(<span class="keywordtype">id</span>);
<a name="l00136"></a>00136 
<a name="l00137"></a>00137                                 <span class="comment">// Commit changes to the store</span>
<a name="l00138"></a>00138         store-&gt;CommitL();
<a name="l00139"></a>00139 
<a name="l00140"></a>00140                                 <span class="comment">// Destroy:</span>
<a name="l00141"></a>00141                                 <span class="comment">// 1. the CCompound object</span>
<a name="l00142"></a>00142                                 <span class="comment">// 2. the store object (this also closes </span>
<a name="l00143"></a>00143                                 <span class="comment">//    the file containing the store)</span>
<a name="l00144"></a>00144                                 <span class="comment">// Remove both from the cleanup stack</span>
<a name="l00145"></a>00145         CleanupStack::PopAndDestroy(2);
<a name="l00146"></a>00146         }
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 LOCAL_C <span class="keywordtype">void</span> doInternalizeL(<span class="keyword">const</span> TDesC&amp; aName)
<a name="l00149"></a>00149         {
<a name="l00150"></a>00150         TParse  filestorename;
<a name="l00151"></a>00151         
<a name="l00152"></a>00152         fsSession.Parse(aName,filestorename);
<a name="l00153"></a>00153                                 <span class="comment">// construct file store object - specifying the file</span>
<a name="l00154"></a>00154                                 <span class="comment">// containing the store.</span>
<a name="l00155"></a>00155         CFileStore* store = CDirectFileStore::OpenLC(fsSession,filestorename.FullName(),EFileRead);
<a name="l00156"></a>00156         
<a name="l00157"></a>00157                                 <span class="comment">// Construct a CCompound object  </span>
<a name="l00158"></a>00158                                 <span class="comment">// from the root stream created earlier.</span>
<a name="l00159"></a>00159         CCompound* thecompound = CCompound::NewL(*store,store-&gt;Root());
<a name="l00160"></a>00160 
<a name="l00161"></a>00161                                 <span class="comment">// Show contents of the CCompound object (and its</span>
<a name="l00162"></a>00162                                 <span class="comment">// components)</span>
<a name="l00163"></a>00163         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtRestoredContent,<span class="stringliteral">&quot;... Restored CCompound content.&quot;</span>);
<a name="l00164"></a>00164         doShow(KTxtRestoredContent,*thecompound);
<a name="l00165"></a>00165                                 
<a name="l00166"></a>00166                                 <span class="comment">// destroy the store object (this also closes the file</span>
<a name="l00167"></a>00167                                 <span class="comment">// containing the store) </span>
<a name="l00168"></a>00168         CleanupStack::PopAndDestroy();
<a name="l00169"></a>00169 
<a name="l00170"></a>00170                                 <span class="comment">// Now destroy the CCompound object</span>
<a name="l00171"></a>00171         <span class="keyword">delete</span> thecompound;
<a name="l00172"></a>00172         }
<a name="l00173"></a>00173 
<a name="l00174"></a>00174 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtNewLine,<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00175"></a>00175 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatType1,<span class="stringliteral">&quot;\n%d&quot;</span>);
<a name="l00176"></a>00176 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatType2,<span class="stringliteral">&quot;\n%S&quot;</span>);
<a name="l00177"></a>00177 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatType3,<span class="stringliteral">&quot;\n%u&quot;</span>);
<a name="l00178"></a>00178 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatType4,<span class="stringliteral">&quot;\n%f&quot;</span>);
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 LOCAL_C <span class="keywordtype">void</span> doShow(<span class="keyword">const</span> TDesC&amp; aHeading,<span class="keyword">const</span> CCompound&amp; aCompound)
<a name="l00181"></a>00181         {
<a name="l00182"></a>00182         console-&gt;Printf(KTxtNewLine);
<a name="l00183"></a>00183         console-&gt;Printf(aHeading);
<a name="l00184"></a>00184         console-&gt;Printf(KFormatType2,&amp;aCompound.iCa-&gt;iBufferA);
<a name="l00185"></a>00185         console-&gt;Printf(KFormatType1,aCompound.iCa-&gt;iXA);
<a name="l00186"></a>00186         console-&gt;Printf(KFormatType3,aCompound.iCa-&gt;iYA);
<a name="l00187"></a>00187         console-&gt;Printf(KFormatType2,&amp;aCompound.iCb-&gt;iBufferB);
<a name="l00188"></a>00188         console-&gt;Printf(KFormatType4,aCompound.iTc.iZC);
<a name="l00189"></a>00189         console-&gt;Printf(KTxtNewLine);
<a name="l00190"></a>00190         }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 <span class="comment">//***************************************************************</span>
<a name="l00193"></a>00193 <span class="comment">//***************************************************************</span>
<a name="l00194"></a>00194 
<a name="l00195"></a>00195                                 <span class="comment">// The CCompound destructor</span>
<a name="l00196"></a>00196 CCompound::~CCompound()
<a name="l00197"></a>00197         {
<a name="l00198"></a>00198         <span class="keyword">delete</span> iCa;
<a name="l00199"></a>00199         <span class="keyword">delete</span> iCb;
<a name="l00200"></a>00200         }
<a name="l00201"></a>00201 
<a name="l00202"></a>00202                                 <span class="comment">// Construct a new plain CCompound object and</span>
<a name="l00203"></a>00203                                 <span class="comment">// place on the cleanup stack.</span>
<a name="l00204"></a>00204 CCompound* CCompound::NewLC()
<a name="l00205"></a>00205         {
<a name="l00206"></a>00206         CCompound* <span class="keyword">self</span>=<span class="keyword">new</span> (ELeave) CCompound;
<a name="l00207"></a>00207         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00208"></a>00208         <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00209"></a>00209         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00210"></a>00210         }
<a name="l00211"></a>00211 
<a name="l00212"></a>00212                                 <span class="comment">// Complete the construction of the </span>
<a name="l00213"></a>00213                                 <span class="comment">// plain CCompound object</span>
<a name="l00214"></a>00214 <span class="keywordtype">void</span> CCompound::ConstructL()
<a name="l00215"></a>00215         {
<a name="l00216"></a>00216         iCa = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_class_a.html">CClassA</a>;
<a name="l00217"></a>00217         iCb = <span class="keyword">new</span> (ELeave) CClassB;
<a name="l00218"></a>00218         }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220                                 <span class="comment">// Construct a new CCompound object from </span>
<a name="l00221"></a>00221                                 <span class="comment">// the input stream.</span>
<a name="l00222"></a>00222 CCompound* CCompound::NewL(CStreamStore&amp; aStore,TStreamId anId)
<a name="l00223"></a>00223         {
<a name="l00224"></a>00224         CCompound* <span class="keyword">self</span>=<a class="code" href="class_c_sql_example.html#a8b115210a3fbfa19de5c7f6a0abf3e43">CCompound::NewLC</a>(aStore,anId);
<a name="l00225"></a>00225         CleanupStack::Pop();
<a name="l00226"></a>00226         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00227"></a>00227         }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229                                 <span class="comment">// Construct a new CCompound object from </span>
<a name="l00230"></a>00230                                 <span class="comment">// the root stream of the store and </span>
<a name="l00231"></a>00231                                 <span class="comment">// place on the cleanup stack.</span>
<a name="l00232"></a>00232 CCompound* CCompound::NewLC(CStreamStore&amp; aStore,TStreamId anId)
<a name="l00233"></a>00233         {
<a name="l00234"></a>00234         CCompound* <span class="keyword">self</span>=<span class="keyword">new</span> (ELeave) CCompound;
<a name="l00235"></a>00235         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00236"></a>00236         <span class="keyword">self</span>-&gt;ConstructL(aStore,anId);
<a name="l00237"></a>00237         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00238"></a>00238         }
<a name="l00239"></a>00239 
<a name="l00240"></a>00240                                 <span class="comment">// Complete the construction of the </span>
<a name="l00241"></a>00241                                 <span class="comment">// CCompound object</span>
<a name="l00242"></a>00242 <span class="keywordtype">void</span> CCompound::ConstructL(CStreamStore&amp; aStore,TStreamId anId)
<a name="l00243"></a>00243         {
<a name="l00244"></a>00244         iCa = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_class_a.html">CClassA</a>;
<a name="l00245"></a>00245         iCb = <span class="keyword">new</span> (ELeave) CClassB;
<a name="l00246"></a>00246         RestoreL(aStore,anId);
<a name="l00247"></a>00247         }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 <span class="keywordtype">void</span> CCompound::RestoreL(CStreamStore&amp; aStore,TStreamId anId)
<a name="l00250"></a>00250         {
<a name="l00251"></a>00251         RStoreReadStream instream;
<a name="l00252"></a>00252         instream.OpenLC(aStore,anId);
<a name="l00253"></a>00253         InternalizeL(instream);
<a name="l00254"></a>00254                                         <span class="comment">// Cleanup the stream object.</span>
<a name="l00255"></a>00255         CleanupStack::PopAndDestroy();                  
<a name="l00256"></a>00256         }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258                                 <span class="comment">// Read the components and data members </span>
<a name="l00259"></a>00259                                 <span class="comment">// of the CCompound object from the stream.</span>
<a name="l00260"></a>00260 <span class="keywordtype">void</span> CCompound::InternalizeL(RReadStream&amp; aStream)
<a name="l00261"></a>00261         {
<a name="l00262"></a>00262         aStream &gt;&gt; *iCa;        
<a name="l00263"></a>00263         aStream &gt;&gt; *iCb;
<a name="l00264"></a>00264         aStream &gt;&gt; iTc;
<a name="l00265"></a>00265         }
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 TStreamId CCompound::StoreL(CStreamStore&amp; aStore)
<a name="l00268"></a>00268         {
<a name="l00269"></a>00269         RStoreWriteStream outstream;
<a name="l00270"></a>00270         TStreamId <span class="keywordtype">id</span> = outstream.CreateLC(aStore);
<a name="l00271"></a>00271                                 <span class="comment">// Stream out this CCompound object</span>
<a name="l00272"></a>00272         ExternalizeL(outstream);
<a name="l00273"></a>00273                                 <span class="comment">// Commit changes to the stream</span>
<a name="l00274"></a>00274         outstream.CommitL();
<a name="l00275"></a>00275                                 <span class="comment">// Cleanup the stream object.</span>
<a name="l00276"></a>00276         CleanupStack::PopAndDestroy();
<a name="l00277"></a>00277         <span class="keywordflow">return</span> id;
<a name="l00278"></a>00278         }
<a name="l00279"></a>00279                                 <span class="comment">// Write the components and data members </span>
<a name="l00280"></a>00280                                 <span class="comment">// of the CCompound object to the stream</span>
<a name="l00281"></a>00281 <span class="keywordtype">void</span> CCompound::ExternalizeL(RWriteStream&amp; aStream)<span class="keyword"> const</span>
<a name="l00282"></a>00282 <span class="keyword">        </span>{
<a name="l00283"></a>00283         aStream &lt;&lt; *iCa;
<a name="l00284"></a>00284         aStream &lt;&lt; *iCb;
<a name="l00285"></a>00285         aStream &lt;&lt; iTc;
<a name="l00286"></a>00286         }
<a name="l00287"></a>00287 
<a name="l00288"></a>00288 <span class="comment">//***************************************************************</span>
<a name="l00289"></a>00289 <span class="comment">//***************************************************************</span>
<a name="l00290"></a>00290 
<a name="l00291"></a>00291                                 <span class="comment">// Read the data members of the CClassA </span>
<a name="l00292"></a>00292                                 <span class="comment">// object from the stream.</span>
<a name="l00293"></a>00293 <span class="keywordtype">void</span> CClassA::InternalizeL(RReadStream&amp; aStream)
<a name="l00294"></a>00294         {
<a name="l00295"></a>00295         aStream &gt;&gt; iBufferA;
<a name="l00296"></a>00296         iXA = aStream.ReadInt32L();
<a name="l00297"></a>00297         iYA = aStream.ReadUint32L();
<a name="l00298"></a>00298         }  
<a name="l00299"></a>00299                                 <span class="comment">// Write the data members of the CClassA </span>
<a name="l00300"></a>00300                                 <span class="comment">// object to the stream.</span>
<a name="l00301"></a>00301 <span class="keywordtype">void</span> CClassA::ExternalizeL(RWriteStream&amp; aStream)<span class="keyword">const</span>
<a name="l00302"></a>00302 <span class="keyword">        </span>{
<a name="l00303"></a>00303         aStream &lt;&lt; iBufferA;
<a name="l00304"></a>00304         aStream.WriteInt32L(iXA);
<a name="l00305"></a>00305         aStream.WriteUint32L(iYA);
<a name="l00306"></a>00306         }  
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 <span class="comment">//***************************************************************</span>
<a name="l00309"></a>00309 <span class="comment">//***************************************************************</span>
<a name="l00310"></a>00310 
<a name="l00311"></a>00311                                 <span class="comment">// Read the data member(s) of the CClassB </span>
<a name="l00312"></a>00312                                 <span class="comment">// object from the stream.</span>
<a name="l00313"></a>00313 <span class="keywordtype">void</span> CClassB::InternalizeL(RReadStream&amp; aStream)
<a name="l00314"></a>00314         {
<a name="l00315"></a>00315         aStream &gt;&gt; iBufferB;
<a name="l00316"></a>00316         }
<a name="l00317"></a>00317                                 <span class="comment">// Write the data member(s) of the CClassB </span>
<a name="l00318"></a>00318                                 <span class="comment">// object to the stream.</span>
<a name="l00319"></a>00319 <span class="keywordtype">void</span> CClassB::ExternalizeL(RWriteStream&amp; aStream)<span class="keyword"> const</span>
<a name="l00320"></a>00320 <span class="keyword">        </span>{
<a name="l00321"></a>00321         aStream &lt;&lt; iBufferB;
<a name="l00322"></a>00322         }  
<a name="l00323"></a>00323 
<a name="l00324"></a>00324 <span class="comment">//***************************************************************</span>
<a name="l00325"></a>00325 <span class="comment">//***************************************************************</span>
<a name="l00326"></a>00326 
<a name="l00327"></a>00327                                 <span class="comment">// Write the data member(s) of the TClassC </span>
<a name="l00328"></a>00328                                 <span class="comment">// object to the stream.</span>
<a name="l00329"></a>00329 <span class="keywordtype">void</span> TClassC::ExternalizeL(RWriteStream&amp; aStream)<span class="keyword"> const</span>
<a name="l00330"></a>00330 <span class="keyword">        </span>{
<a name="l00331"></a>00331         aStream.WriteReal64L(iZC);
<a name="l00332"></a>00332         }  
<a name="l00333"></a>00333                                 <span class="comment">// Read the data member(s) of the TClassC </span>
<a name="l00334"></a>00334                                 <span class="comment">// object from the stream.</span>
<a name="l00335"></a>00335 <span class="keywordtype">void</span> TClassC::InternalizeL(RReadStream&amp; aStream)
<a name="l00336"></a>00336         {
<a name="l00337"></a>00337         iZC = aStream.ReadReal64L();
<a name="l00338"></a>00338         }  
<a name="l00339"></a>00339                 
<a name="l00340"></a>00340 
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 
<a name="l00343"></a>00343         
<a name="l00344"></a>00344         
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Base/FileServer/DriveInfo/DriveInfo.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Base/FileServer/DriveInfo/DriveInfo.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2000-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;f32file.h&gt;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &quot;CommonFramework.h&quot;</span>
<a name="l00019"></a>00019         
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 LOCAL_D RFs fsSession;
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// example functions</span>
<a name="l00024"></a>00024 <span class="keywordtype">void</span> PrintDriveVolInfoL();
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="comment">// utility functions</span>
<a name="l00027"></a>00027 <span class="keywordtype">void</span> FormatDriveInfo(TDes&amp; aBuffer, <span class="keyword">const</span> TDriveInfo aDriveInfo);
<a name="l00028"></a>00028 <span class="keywordtype">void</span> FormatVolumeInfo(TDes&amp; aBuffer, <span class="keyword">const</span> TVolumeInfo aVolumeInfo);
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="keywordtype">void</span> WaitForKey()
<a name="l00031"></a>00031         {
<a name="l00032"></a>00032         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMessage,<span class="stringliteral">&quot;Press any key to continue\n\n&quot;</span>);
<a name="l00033"></a>00033         console-&gt;Printf(KMessage);
<a name="l00034"></a>00034         console-&gt;Getch();
<a name="l00035"></a>00035         }
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">// do the example</span>
<a name="l00038"></a>00038 LOCAL_C <span class="keywordtype">void</span> doExampleL()
<a name="l00039"></a>00039     {
<a name="l00040"></a>00040         <span class="comment">// Connect to file server</span>
<a name="l00041"></a>00041         User::LeaveIfError(fsSession.Connect()); <span class="comment">// Start session</span>
<a name="l00042"></a>00042         PrintDriveVolInfoL();
<a name="l00043"></a>00043         fsSession.Close(); <span class="comment">// close file server session</span>
<a name="l00044"></a>00044         }
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="keywordtype">void</span> PrintDriveVolInfoL()
<a name="l00047"></a>00047         {
<a name="l00048"></a>00048         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMessage,<span class="stringliteral">&quot;PrintDriveVolInfoL()\n&quot;</span>);
<a name="l00049"></a>00049         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KValidDriveMsg,<span class="stringliteral">&quot;\nValid drives as characters (and as numbers) are:\n&quot;</span>);
<a name="l00050"></a>00050         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KDriveChar,<span class="stringliteral">&quot;%c&quot;</span>);
<a name="l00051"></a>00051         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KDriveNum,<span class="stringliteral">&quot;(%d) &quot;</span>);
<a name="l00052"></a>00052         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KNewLine,<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00053"></a>00053         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KAvailDriveMsg,<span class="stringliteral">&quot;\nUsing DriveList(), available drives are: &quot;</span>);
<a name="l00054"></a>00054         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KDriveAtts,<span class="stringliteral">&quot;%c: %02x &quot;</span>);
<a name="l00055"></a>00055         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KDriveInfo,<span class="stringliteral">&quot;\nDrive information for %c: drive is:\n%S&quot;</span>);
<a name="l00056"></a>00056         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KVolInfo,<span class="stringliteral">&quot;\nVolume information for %c: is:\n%S&quot;</span>);
<a name="l00057"></a>00057 
<a name="l00058"></a>00058         console-&gt;Printf(KMessage);
<a name="l00059"></a>00059 
<a name="l00060"></a>00060         <span class="comment">// Print the valid drives as characters and as numbers. </span>
<a name="l00061"></a>00061         <span class="comment">// Then print the drive list (list of available drives), and</span>
<a name="l00062"></a>00062         <span class="comment">// information about each drive in the list using Drive(). </span>
<a name="l00063"></a>00063         <span class="comment">// Finally, print volume information.</span>
<a name="l00064"></a>00064 
<a name="l00065"></a>00065         console-&gt;Printf(KValidDriveMsg);
<a name="l00066"></a>00066 
<a name="l00067"></a>00067         TInt driveNumber=EDriveA; 
<a name="l00068"></a>00068         TChar driveLetter; 
<a name="l00069"></a>00069         <span class="keywordflow">for</span> (; driveNumber&lt;=EDriveZ; driveNumber++)
<a name="l00070"></a>00070                 {
<a name="l00071"></a>00071                 <span class="keywordflow">if</span> (fsSession.IsValidDrive(driveNumber))
<a name="l00072"></a>00072                         {
<a name="l00073"></a>00073                         fsSession.DriveToChar(driveNumber,driveLetter);
<a name="l00074"></a>00074                         console-&gt;Printf(KDriveChar,TUint(driveLetter));
<a name="l00075"></a>00075                         fsSession.CharToDrive(driveLetter, driveNumber);
<a name="l00076"></a>00076                         console-&gt;Printf(KDriveNum,driveNumber);
<a name="l00077"></a>00077                         }
<a name="l00078"></a>00078                 }
<a name="l00079"></a>00079         console-&gt;Printf(KNewLine);
<a name="l00080"></a>00080 
<a name="l00081"></a>00081         TDriveList drivelist; 
<a name="l00082"></a>00082         User::LeaveIfError(fsSession.DriveList(drivelist));
<a name="l00083"></a>00083         <span class="comment">// A TDriveList (the list of available drives), is an array of </span>
<a name="l00084"></a>00084         <span class="comment">// 26 bytes. Each byte with a non zero value signifies that the </span>
<a name="l00085"></a>00085         <span class="comment">// corresponding drive is available.</span>
<a name="l00086"></a>00086 
<a name="l00087"></a>00087         console-&gt;Printf(KAvailDriveMsg);
<a name="l00088"></a>00088         <span class="keywordflow">for</span> (driveNumber=EDriveA; driveNumber&lt;=EDriveZ;driveNumber++)
<a name="l00089"></a>00089                 {
<a name="l00090"></a>00090                 <span class="keywordflow">if</span> (drivelist[driveNumber]) <span class="comment">// if drive-list entry non-zero, drive is available</span>
<a name="l00091"></a>00091                         {
<a name="l00092"></a>00092                         TInt err = fsSession.DriveToChar(driveNumber,driveLetter);
<a name="l00093"></a>00093                         <span class="keywordflow">if</span>(err == KErrNone)
<a name="l00094"></a>00094                                 {
<a name="l00095"></a>00095                                 <span class="comment">// The following line prints the drive letter followed by the hex value </span>
<a name="l00096"></a>00096                                 <span class="comment">// of the integer indicating that drive&#39;s attributes </span>
<a name="l00097"></a>00097                                 console-&gt;Printf(KDriveAtts,TUint(driveLetter), drivelist[driveNumber]);
<a name="l00098"></a>00098                                 }
<a name="l00099"></a>00099                         <span class="keywordflow">else</span> <span class="keywordflow">if</span>(err == KErrArgument)
<a name="l00100"></a>00100                                 {
<a name="l00101"></a>00101                                 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextInvalidDriveNumber, <span class="stringliteral">&quot;Drive Number %d is invalid\n&quot;</span>);
<a name="l00102"></a>00102                                 console-&gt;Printf(KTextInvalidDriveNumber, driveNumber);
<a name="l00103"></a>00103                                 }
<a name="l00104"></a>00104                         <span class="keywordflow">else</span>
<a name="l00105"></a>00105                                 {
<a name="l00106"></a>00106                                 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextErrCode, <span class="stringliteral">&quot;DriveToChar() returned %d error code&quot;</span>);
<a name="l00107"></a>00107                                 console-&gt;Printf(KTextErrCode, err);
<a name="l00108"></a>00108                                 }
<a name="l00109"></a>00109                         }
<a name="l00110"></a>00110                 }
<a name="l00111"></a>00111         console-&gt;Printf(KNewLine);
<a name="l00112"></a>00112 
<a name="l00113"></a>00113         <span class="comment">// Print information about available drives </span>
<a name="l00114"></a>00114 
<a name="l00115"></a>00115         TBuf&lt;200&gt; buffer;
<a name="l00116"></a>00116         TDriveInfo driveInfo; 
<a name="l00117"></a>00117         <span class="keywordflow">for</span> (driveNumber=EDriveA; driveNumber&lt;=EDriveZ; driveNumber++)
<a name="l00118"></a>00118                 {
<a name="l00119"></a>00119                 fsSession.Drive(driveInfo,driveNumber);
<a name="l00120"></a>00120                 <span class="keywordflow">if</span> (TInt(driveInfo.iDriveAtt)==KDriveAbsent)
<a name="l00121"></a>00121                         <span class="comment">// test whether drive is available. If not, skip to next drive</span>
<a name="l00122"></a>00122                         <span class="keywordflow">continue</span>;
<a name="l00123"></a>00123                 FormatDriveInfo(buffer,driveInfo);
<a name="l00124"></a>00124                 TInt errNum = fsSession.DriveToChar(driveNumber,driveLetter);
<a name="l00125"></a>00125                 <span class="keywordflow">if</span>(errNum == KErrNone)
<a name="l00126"></a>00126                         {
<a name="l00127"></a>00127                         console-&gt;Printf(KDriveInfo,TUint(driveLetter),&amp;buffer);
<a name="l00128"></a>00128                         buffer.Zero();
<a name="l00129"></a>00129                         WaitForKey();
<a name="l00130"></a>00130                         }
<a name="l00131"></a>00131                 }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133         <span class="comment">// Print volume information for all available drives. TVolumeInfo</span>
<a name="l00134"></a>00134         <span class="comment">// provides drive information, and additional information about</span>
<a name="l00135"></a>00135         <span class="comment">// the volume. Just print out the volume information.</span>
<a name="l00136"></a>00136  
<a name="l00137"></a>00137         TVolumeInfo volumeInfo;
<a name="l00138"></a>00138         <span class="keywordflow">for</span> (driveNumber=EDriveA; driveNumber&lt;=EDriveZ; driveNumber++)
<a name="l00139"></a>00139                 {
<a name="l00140"></a>00140                 TInt err=fsSession.Volume(volumeInfo,driveNumber);
<a name="l00141"></a>00141                 <span class="keywordflow">if</span> (err!=KErrNotReady) 
<a name="l00142"></a>00142                         <span class="comment">// Volume() returns KErrNotReady if no volume present.</span>
<a name="l00143"></a>00143                         <span class="comment">// In this case, check next drive number</span>
<a name="l00144"></a>00144                         {
<a name="l00145"></a>00145                         buffer.Zero();
<a name="l00146"></a>00146                         FormatVolumeInfo(buffer,volumeInfo);
<a name="l00147"></a>00147                         TInt errNum = fsSession.DriveToChar(driveNumber,driveLetter);
<a name="l00148"></a>00148                         <span class="keywordflow">if</span>(errNum == KErrNone)
<a name="l00149"></a>00149                                 {
<a name="l00150"></a>00150                                 console-&gt;Printf(KVolInfo,
<a name="l00151"></a>00151                                 (TUint)driveLetter,&amp;buffer);
<a name="l00152"></a>00152                                 WaitForKey();
<a name="l00153"></a>00153                                 }                       
<a name="l00154"></a>00154                         }
<a name="l00155"></a>00155                 }
<a name="l00156"></a>00156         }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="keywordtype">void</span> FormatDriveInfo(TDes&amp; aBuffer, <span class="keyword">const</span> TDriveInfo aDriveInfo)
<a name="l00159"></a>00159         {
<a name="l00160"></a>00160         <span class="comment">// Append battery, media and drive information to aBuffer</span>
<a name="l00161"></a>00161         <span class="comment">// Define descriptor constants using the _LIT macro </span>
<a name="l00162"></a>00162         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatString,<span class="stringliteral">&quot;iType=%02x,iBattery=%02x,iDriveAtt=%02x,iMediaAtt=%02x\n&quot;</span>);
<a name="l00163"></a>00163         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KBatLow,<span class="stringliteral">&quot;Battery low\n&quot;</span>);
<a name="l00164"></a>00164         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KBatGood,<span class="stringliteral">&quot;Battery good\n&quot;</span>);
<a name="l00165"></a>00165         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KBatNotSupported,<span class="stringliteral">&quot;Battery not supported\n&quot;</span>);
<a name="l00166"></a>00166         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KNotPresent,<span class="stringliteral">&quot;No media present\n&quot;</span>);
<a name="l00167"></a>00167         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFloppy,<span class="stringliteral">&quot;Media is floppy disk\n&quot;</span>);
<a name="l00168"></a>00168         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KHard,<span class="stringliteral">&quot;Media is hard disk\n&quot;</span>);
<a name="l00169"></a>00169         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KCDROM,<span class="stringliteral">&quot;Media is CD-ROM\n&quot;</span>);
<a name="l00170"></a>00170         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KRam,<span class="stringliteral">&quot;Media is RAM\n&quot;</span>);
<a name="l00171"></a>00171         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFlash,<span class="stringliteral">&quot;Media is flash\n&quot;</span>);
<a name="l00172"></a>00172         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KRom,<span class="stringliteral">&quot;Media is ROM\n&quot;</span>);
<a name="l00173"></a>00173         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KRemote,<span class="stringliteral">&quot;Media is remote\n&quot;</span>);
<a name="l00174"></a>00174         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KNANDFlash,<span class="stringliteral">&quot;Media is NAND flash\n&quot;</span>);
<a name="l00175"></a>00175         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KUnknown,<span class="stringliteral">&quot;Media unknown\n&quot;</span>);
<a name="l00176"></a>00176         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KDriveAtts,<span class="stringliteral">&quot;Drive attributes:&quot;</span>);
<a name="l00177"></a>00177         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KLocal,<span class="stringliteral">&quot; local&quot;</span>);
<a name="l00178"></a>00178         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KROMDrive,<span class="stringliteral">&quot; ROM&quot;</span>);
<a name="l00179"></a>00179         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KRedirected,<span class="stringliteral">&quot; redirected&quot;</span>);
<a name="l00180"></a>00180         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KSubstituted,<span class="stringliteral">&quot; substituted&quot;</span>);
<a name="l00181"></a>00181         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KInternal,<span class="stringliteral">&quot; internal&quot;</span>);
<a name="l00182"></a>00182         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KRemovable,<span class="stringliteral">&quot; removable&quot;</span>);
<a name="l00183"></a>00183         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMediaAtts,<span class="stringliteral">&quot;\nMedia attributes:&quot;</span>);
<a name="l00184"></a>00184         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KDynamic,<span class="stringliteral">&quot; dynamic&quot;</span>);
<a name="l00185"></a>00185         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KDual,<span class="stringliteral">&quot; dual-density&quot;</span>);
<a name="l00186"></a>00186         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormattable,<span class="stringliteral">&quot; formattable&quot;</span>);
<a name="l00187"></a>00187         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KLockable,<span class="stringliteral">&quot; lockable&quot;</span>);
<a name="l00188"></a>00188         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KLocked,<span class="stringliteral">&quot; locked&quot;</span>);
<a name="l00189"></a>00189         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KHasPassword,<span class="stringliteral">&quot; has password&quot;</span>);
<a name="l00190"></a>00190         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KWriteProtected,<span class="stringliteral">&quot; write-protected&quot;</span>);
<a name="l00191"></a>00191         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KNewLine,<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00192"></a>00192 
<a name="l00193"></a>00193         aBuffer.AppendFormat(KFormatString, TInt(aDriveInfo.iType), 
<a name="l00194"></a>00194                 TInt(aDriveInfo.iBattery), TInt(aDriveInfo.iDriveAtt), TInt(aDriveInfo.iMediaAtt));
<a name="l00195"></a>00195 
<a name="l00196"></a>00196         <span class="keywordflow">switch</span> (aDriveInfo.iBattery)
<a name="l00197"></a>00197                 {
<a name="l00198"></a>00198                 <span class="keywordflow">case</span> EBatLow:
<a name="l00199"></a>00199                         aBuffer.Append(KBatLow);
<a name="l00200"></a>00200                         <span class="keywordflow">break</span>;
<a name="l00201"></a>00201                 <span class="keywordflow">case</span> EBatGood:
<a name="l00202"></a>00202                         aBuffer.Append(KBatGood);
<a name="l00203"></a>00203                         <span class="keywordflow">break</span>;
<a name="l00204"></a>00204                 <span class="keywordflow">default</span>:
<a name="l00205"></a>00205                         aBuffer.Append(KBatNotSupported);
<a name="l00206"></a>00206                 }
<a name="l00207"></a>00207 
<a name="l00208"></a>00208         <span class="keywordflow">switch</span> (aDriveInfo.iType)
<a name="l00209"></a>00209                         {
<a name="l00210"></a>00210                 <span class="keywordflow">case</span> EMediaNotPresent:
<a name="l00211"></a>00211                         aBuffer.Append(KNotPresent);                    
<a name="l00212"></a>00212                         <span class="keywordflow">break</span>;
<a name="l00213"></a>00213                 <span class="keywordflow">case</span> EMediaFloppy:
<a name="l00214"></a>00214                         aBuffer.Append(KFloppy);
<a name="l00215"></a>00215                         <span class="keywordflow">break</span>;
<a name="l00216"></a>00216                 <span class="keywordflow">case</span> EMediaHardDisk:    
<a name="l00217"></a>00217                         aBuffer.Append(KHard);
<a name="l00218"></a>00218                         <span class="keywordflow">break</span>;
<a name="l00219"></a>00219                 <span class="keywordflow">case</span> EMediaCdRom:
<a name="l00220"></a>00220                         aBuffer.Append(KCDROM);
<a name="l00221"></a>00221                         <span class="keywordflow">break</span>;
<a name="l00222"></a>00222                 <span class="keywordflow">case</span> EMediaRam:
<a name="l00223"></a>00223                         aBuffer.Append(KRam);
<a name="l00224"></a>00224                         <span class="keywordflow">break</span>;
<a name="l00225"></a>00225                 <span class="keywordflow">case</span> EMediaFlash:
<a name="l00226"></a>00226                         aBuffer.Append(KFlash);
<a name="l00227"></a>00227                         <span class="keywordflow">break</span>;
<a name="l00228"></a>00228                 <span class="keywordflow">case</span> EMediaRom:
<a name="l00229"></a>00229                         aBuffer.Append(KRom);
<a name="l00230"></a>00230                         <span class="keywordflow">break</span>;
<a name="l00231"></a>00231                 <span class="keywordflow">case</span> EMediaRemote:
<a name="l00232"></a>00232                         aBuffer.Append(KRemote);
<a name="l00233"></a>00233                         <span class="keywordflow">break</span>;
<a name="l00234"></a>00234                 <span class="keywordflow">case</span> EMediaNANDFlash:
<a name="l00235"></a>00235             aBuffer.Append(KNANDFlash);
<a name="l00236"></a>00236                         <span class="keywordflow">break</span>;
<a name="l00237"></a>00237                 <span class="keywordflow">default</span>: 
<a name="l00238"></a>00238                         aBuffer.Append(KUnknown);
<a name="l00239"></a>00239 
<a name="l00240"></a>00240                 }
<a name="l00241"></a>00241                 aBuffer.Append(KDriveAtts);
<a name="l00242"></a>00242                 <span class="keywordflow">if</span> (aDriveInfo.iDriveAtt &amp; KDriveAttLocal)
<a name="l00243"></a>00243                         aBuffer.Append(KLocal);
<a name="l00244"></a>00244                 <span class="keywordflow">if</span> (aDriveInfo.iDriveAtt &amp; KDriveAttRom)
<a name="l00245"></a>00245                         aBuffer.Append(KROMDrive);
<a name="l00246"></a>00246                 <span class="keywordflow">if</span> (aDriveInfo.iDriveAtt &amp; KDriveAttRedirected)
<a name="l00247"></a>00247                         aBuffer.Append(KRedirected);
<a name="l00248"></a>00248                 <span class="keywordflow">if</span> (aDriveInfo.iDriveAtt &amp; KDriveAttSubsted)
<a name="l00249"></a>00249                         aBuffer.Append(KSubstituted);
<a name="l00250"></a>00250                 <span class="keywordflow">if</span> (aDriveInfo.iDriveAtt &amp; KDriveAttInternal)
<a name="l00251"></a>00251                         aBuffer.Append(KInternal);
<a name="l00252"></a>00252                 <span class="keywordflow">if</span> (aDriveInfo.iDriveAtt &amp; KDriveAttRemovable)
<a name="l00253"></a>00253                         aBuffer.Append(KRemovable);
<a name="l00254"></a>00254                 aBuffer.Append(KMediaAtts);
<a name="l00255"></a>00255                 <span class="keywordflow">if</span> (aDriveInfo.iMediaAtt &amp; KMediaAttVariableSize)
<a name="l00256"></a>00256                         aBuffer.Append(KDynamic);
<a name="l00257"></a>00257                 <span class="keywordflow">if</span> (aDriveInfo.iMediaAtt &amp; KMediaAttDualDensity)
<a name="l00258"></a>00258                         aBuffer.Append(KDual);
<a name="l00259"></a>00259                 <span class="keywordflow">if</span> (aDriveInfo.iMediaAtt &amp; KMediaAttFormattable)
<a name="l00260"></a>00260                         aBuffer.Append(KFormattable);
<a name="l00261"></a>00261                 <span class="keywordflow">if</span> (aDriveInfo.iMediaAtt &amp; KMediaAttWriteProtected)
<a name="l00262"></a>00262                         aBuffer.Append(KWriteProtected);
<a name="l00263"></a>00263                 <span class="keywordflow">if</span> (aDriveInfo.iMediaAtt &amp; KMediaAttLockable)
<a name="l00264"></a>00264                         aBuffer.Append(KLockable);
<a name="l00265"></a>00265                 <span class="keywordflow">if</span> (aDriveInfo.iMediaAtt &amp; KMediaAttLocked)
<a name="l00266"></a>00266                         aBuffer.Append(KLocked);
<a name="l00267"></a>00267                 <span class="keywordflow">if</span> (aDriveInfo.iMediaAtt &amp; KMediaAttHasPassword)
<a name="l00268"></a>00268                         aBuffer.Append(KHasPassword);
<a name="l00269"></a>00269                 aBuffer.Append(KNewLine);
<a name="l00270"></a>00270         }
<a name="l00271"></a>00271 
<a name="l00272"></a>00272 <span class="keywordtype">void</span> FormatVolumeInfo(TDes&amp; aBuffer, <span class="keyword">const</span> TVolumeInfo aVolumeInfo)
<a name="l00273"></a>00273         {
<a name="l00274"></a>00274         <span class="comment">// Append volume information to aBuffer</span>
<a name="l00275"></a>00275         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KUID,<span class="stringliteral">&quot;Unique ID: %08x\n&quot;</span>);
<a name="l00276"></a>00276         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KSize,<span class="stringliteral">&quot;Size: %Ld bytes\n&quot;</span>);
<a name="l00277"></a>00277         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFree,<span class="stringliteral">&quot;Free space: %Ld bytes\n&quot;</span>);
<a name="l00278"></a>00278         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KVolName,<span class="stringliteral">&quot;Volume name: %S\n&quot;</span>);
<a name="l00279"></a>00279         aBuffer.AppendFormat(KUID,aVolumeInfo.iUniqueID);
<a name="l00280"></a>00280         aBuffer.AppendFormat(KSize,aVolumeInfo.iSize);
<a name="l00281"></a>00281         aBuffer.AppendFormat(KFree,aVolumeInfo.iFree);
<a name="l00282"></a>00282         aBuffer.AppendFormat(KVolName,&amp;aVolumeInfo.iName);
<a name="l00283"></a>00283         }
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

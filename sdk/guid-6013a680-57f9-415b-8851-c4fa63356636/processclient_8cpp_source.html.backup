<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Base/IPC/AdvancedClientServerExample/ProcessClient/src/processclient.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Base/IPC/AdvancedClientServerExample/ProcessClient/src/processclient.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2007-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#include &quot;processclient.h&quot;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &quot;processclientserver.h&quot;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include&lt;e32debug.h&gt;</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#define KMaxServerNameLength 256</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="keyword">static</span> <span class="keyword">const</span> TUid KUidProcessServer = {0x10283037}; <span class="comment">// Process Server UID</span>
<a name="l00024"></a>00024 <span class="keyword">const</span> TInt KCreateSessionRetryCount = 2;                                        <span class="comment">//CreateSession retry count</span>
<a name="l00025"></a>00025 <span class="keyword">const</span> TInt KServerDefaultMessageSlots = 2;                      <span class="comment">//server async Message Slots</span>
<a name="l00026"></a>00026 
<a name="l00033"></a>00033 <span class="keyword">static</span> TInt StartServer()
<a name="l00034"></a>00034         {
<a name="l00035"></a>00035         <span class="keyword">const</span> TUidType serverUid(KNullUid,KNullUid,KUidProcessServer);
<a name="l00036"></a>00036 
<a name="l00037"></a>00037         RProcess server;
<a name="l00038"></a>00038         TInt r=server.Create(KProcessServerServerImg,KNullDesC,serverUid);
<a name="l00039"></a>00039         <span class="keywordflow">if</span> (r!=KErrNone)
<a name="l00040"></a>00040                 <span class="keywordflow">return</span> r;
<a name="l00041"></a>00041         TRequestStatus stat;
<a name="l00042"></a>00042         server.Rendezvous(stat);
<a name="l00043"></a>00043 
<a name="l00044"></a>00044         <span class="keywordflow">if</span> (stat!=KRequestPending)
<a name="l00045"></a>00045                 server.Kill(KErrCouldNotConnect);               <span class="comment">// abort startup</span>
<a name="l00046"></a>00046         <span class="keywordflow">else</span>
<a name="l00047"></a>00047                 server.Resume();        <span class="comment">// logon OK - start the server</span>
<a name="l00048"></a>00048         
<a name="l00049"></a>00049         User::WaitForRequest(stat);             <span class="comment">// wait for start or death</span>
<a name="l00050"></a>00050         <span class="comment">// The server exit type may be a panic value and a panic value can be zero, which is the same </span>
<a name="l00051"></a>00051         <span class="comment">// value as KErrNone. So, the exit type is tested for a panic before being returned.</span>
<a name="l00052"></a>00052         <span class="keywordflow">if</span> (server.ExitType()==EExitPanic)
<a name="l00053"></a>00053                 {
<a name="l00054"></a>00054                 r = KErrServerTerminated;
<a name="l00055"></a>00055                 }
<a name="l00056"></a>00056         <span class="keywordflow">else</span>
<a name="l00057"></a>00057                 {
<a name="l00058"></a>00058                 r = stat.Int();
<a name="l00059"></a>00059                 }
<a name="l00060"></a>00060         server.Close();
<a name="l00061"></a>00061         <span class="keywordflow">return</span> r;
<a name="l00062"></a>00062         }
<a name="l00067"></a><a class="code" href="class_r_process_client.html#a363afab5db2bd5f1bdb94eb2d2604d7d">00067</a> EXPORT_C TInt <a class="code" href="class_r_process_client.html#a363afab5db2bd5f1bdb94eb2d2604d7d">RProcessClient::Connect</a>()
<a name="l00068"></a>00068         {
<a name="l00069"></a>00069         TInt retry=KCreateSessionRetryCount; <span class="comment">//number of CreateSession retries</span>
<a name="l00070"></a>00070         FOREVER
<a name="l00071"></a>00071                 {
<a name="l00072"></a>00072                 <span class="comment">// try to create a session with the server which has KServerDefaultMessageSlots async message slots.</span>
<a name="l00073"></a>00073                 TInt r=CreateSession(KProcessServerName,
<a name="l00074"></a>00074                                                          TVersion(KProcessServerVersion,
<a name="l00075"></a>00075                                                                           KProcessServerMinorVersionNumber,
<a name="l00076"></a>00076                                                                           KProcessServerBuildVersionNumber),
<a name="l00077"></a>00077                                                          KServerDefaultMessageSlots);                                                    
<a name="l00078"></a>00078                 <span class="keywordflow">if</span> (r!=KErrNotFound &amp;&amp; r!=KErrServerTerminated)
<a name="l00079"></a>00079                         <span class="keywordflow">return</span> r;
<a name="l00080"></a>00080                 <span class="keywordflow">if</span> (--retry==0)
<a name="l00081"></a>00081                         <span class="keywordflow">return</span> r;
<a name="l00082"></a>00082                 r=StartServer();        
<a name="l00083"></a>00083                 <span class="keywordflow">if</span> (r!=KErrNone &amp;&amp; r!=KErrAlreadyExists)
<a name="l00084"></a>00084                         <span class="keywordflow">return</span> r;
<a name="l00085"></a>00085                 <span class="comment">// 1. r=KErrNone means server starts up successfully.</span>
<a name="l00086"></a>00086                 <span class="comment">// 2. r=KErrAlreadyExists means a duplicate server was trying to start up.</span>
<a name="l00087"></a>00087                 <span class="comment">//              Note: if there are other functions called before CServer2::StartL() during construction,</span>
<a name="l00088"></a>00088                 <span class="comment">//                other errors might happen when the duplicate server is trying to start.</span>
<a name="l00089"></a>00089                 <span class="comment">//            Therefore, we recommend CServer2::StartL() is the first function in server construction</span>
<a name="l00090"></a>00090                 <span class="comment">//            @see CProcessServer::ConstructL()</span>
<a name="l00091"></a>00091                 <span class="comment">//</span>
<a name="l00092"></a>00092                 <span class="comment">// NOTE: If users would like to retry start up server after other scenarios happened, e.g. panic,then go </span>
<a name="l00093"></a>00093                 <span class="comment">//               through the following steps:</span>
<a name="l00094"></a>00094                 <span class="comment">//                1. Increase the value of KCreateSessionRetryCount (only start up server once in this example)</span>
<a name="l00095"></a>00095                 <span class="comment">//                2. Need another variable, e.g. TExitType, together with error code returned in StartServer()</span>
<a name="l00096"></a>00096                 <span class="comment">//                      to distinguish these scenarios</span>
<a name="l00097"></a>00097                 <span class="comment">//                3. Modify the third if statement to stop exit when the required scenarios happens.</span>
<a name="l00098"></a>00098                 <span class="comment">//           </span>
<a name="l00099"></a>00099                 }
<a name="l00100"></a>00100         }
<a name="l00105"></a><a class="code" href="class_r_process_client.html#aa7bd9ded2aeadfd0045bb4d72c2f265e">00105</a> EXPORT_C TInt <a class="code" href="class_r_process_client.html#aa7bd9ded2aeadfd0045bb4d72c2f265e">RProcessClient::OpenDriver</a>()
<a name="l00106"></a>00106         {
<a name="l00107"></a>00107         <span class="keywordflow">return</span> SendReceive(EOpenDriver);
<a name="l00108"></a>00108         }
<a name="l00114"></a><a class="code" href="class_r_process_client.html#abd90b378adab67b51920841c9979651c">00114</a> EXPORT_C <span class="keywordtype">void</span> <a class="code" href="class_r_process_client.html#abd90b378adab67b51920841c9979651c">RProcessClient::Send</a>(<span class="keyword">const</span> TDesC8&amp; aBuf, TRequestStatus&amp; aStatus)
<a name="l00115"></a>00115         {
<a name="l00116"></a>00116         SendReceive(EDummyLDDSendData, TIpcArgs(&amp;aBuf), aStatus);
<a name="l00117"></a>00117         }
<a name="l00121"></a><a class="code" href="class_r_process_client.html#a182846342d293c4b3e4e28eb45a350a7">00121</a> EXPORT_C <span class="keywordtype">void</span> <a class="code" href="class_r_process_client.html#a182846342d293c4b3e4e28eb45a350a7">RProcessClient::SendCancel</a>()
<a name="l00122"></a>00122         {
<a name="l00123"></a>00123         SendReceive(EDummyLDDSendDataCancel);
<a name="l00124"></a>00124         }
<a name="l00129"></a><a class="code" href="class_r_process_client.html#af16ca75a38a34ce5845d8306be97d5ce">00129</a> EXPORT_C TInt <a class="code" href="class_r_process_client.html#af16ca75a38a34ce5845d8306be97d5ce">RProcessClient::UnloadDeviceDriver</a>()
<a name="l00130"></a>00130         {
<a name="l00131"></a>00131         <span class="keywordflow">return</span> SendReceive(EUnloadDeviceDriver);
<a name="l00132"></a>00132         }
<a name="l00137"></a><a class="code" href="class_r_process_client.html#a5ba4941db07032faf602c8b0f80ef073">00137</a> EXPORT_C TInt <a class="code" href="class_r_process_client.html#a5ba4941db07032faf602c8b0f80ef073">RProcessClient::LoadDeviceDriver</a>()
<a name="l00138"></a>00138         {
<a name="l00139"></a>00139         <span class="keywordflow">return</span> SendReceive(ELoadDeviceDriver);
<a name="l00140"></a>00140         }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 <span class="comment">//EOF</span>
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

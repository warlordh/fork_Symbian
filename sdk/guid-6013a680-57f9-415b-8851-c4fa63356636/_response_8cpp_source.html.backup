<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/ForumNokia/Symbian_OS_End-to-End_Sockets_API_Example/SocketTaskManager_S60/engine/Response.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/ForumNokia/Symbian_OS_End-to-End_Sockets_API_Example/SocketTaskManager_S60/engine/Response.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* ============================================================================</span>
<a name="l00003"></a>00003 <span class="comment">*  Name     : CResponse from Response.cpp</span>
<a name="l00004"></a>00004 <span class="comment">*  Part of  : TaskManager</span>
<a name="l00005"></a>00005 <span class="comment">*  Created  : 15/03/2006 by Forum Nokia</span>
<a name="l00006"></a>00006 <span class="comment">*  Version  : 1.2</span>
<a name="l00007"></a>00007 <span class="comment">*  Copyright: Nokia Corporation</span>
<a name="l00008"></a>00008 <span class="comment">* ============================================================================</span>
<a name="l00009"></a>00009 <span class="comment">*/</span>
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 <span class="comment">// INCLUDE FILES</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &quot;Response.h&quot;</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &quot;TaskManager.pan&quot;</span>
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 <span class="comment">// CONSTANTS</span>
<a name="l00016"></a>00016 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KError, <span class="stringliteral">&quot;#Error:&quot;</span>);
<a name="l00017"></a>00017 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KOkMessage, <span class="stringliteral">&quot;#OK&quot;</span>);
<a name="l00018"></a>00018 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTab, <span class="stringliteral">&quot;\t&quot;</span>);
<a name="l00019"></a>00019 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KSeparator, <span class="stringliteral">&quot;#&quot;</span>);
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">// ================= MEMBER FUNCTIONS =======================</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// constructor</span>
<a name="l00024"></a>00024 CResponse::CResponse()
<a name="l00025"></a>00025 : iMessageBuffer( NULL ), iExpectedPackageSize( 0 ), iState( ENotComplete )
<a name="l00026"></a>00026         {
<a name="l00027"></a>00027         }
<a name="l00028"></a>00028         
<a name="l00029"></a>00029 <span class="comment">// destructor   </span>
<a name="l00030"></a><a class="code" href="class_c_response.html#a6f1fbd7e819a3f55a84d3e3ea757faa7">00030</a> <a class="code" href="class_c_response.html#a6f1fbd7e819a3f55a84d3e3ea757faa7">CResponse::~CResponse</a>()
<a name="l00031"></a>00031         {
<a name="l00032"></a>00032         iIds.Close();
<a name="l00033"></a>00033         <span class="keyword">delete</span> iDescriptions;
<a name="l00034"></a>00034         <span class="keyword">delete</span> iMessageBuffer;
<a name="l00035"></a>00035         }
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">// ----------------------------------------------------</span>
<a name="l00038"></a>00038 <span class="comment">// CResponse::NewL()</span>
<a name="l00039"></a>00039 <span class="comment">// Two-phased constructor.</span>
<a name="l00040"></a>00040 <span class="comment">// ----------------------------------------------------</span>
<a name="l00041"></a>00041 <span class="comment">//      </span>
<a name="l00042"></a><a class="code" href="class_c_response.html#a2a6a27395f054e6912d4491f98ca3c54">00042</a> <a class="code" href="class_c_response.html">CResponse</a>* <a class="code" href="class_c_response.html#a2a6a27395f054e6912d4491f98ca3c54">CResponse::NewL</a>()
<a name="l00043"></a>00043         {
<a name="l00044"></a>00044         <a class="code" href="class_c_response.html">CResponse</a>* <span class="keyword">self</span> = <a class="code" href="class_c_response.html#a78c01ecd70d8477731923b4bc12f9628">CResponse::NewLC</a>();
<a name="l00045"></a>00045         CleanupStack::Pop(<span class="keyword">self</span>);
<a name="l00046"></a>00046         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00047"></a>00047         }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="comment">// ----------------------------------------------------</span>
<a name="l00050"></a>00050 <span class="comment">// CResponse::NewLC()</span>
<a name="l00051"></a>00051 <span class="comment">// Two-phased constructor.</span>
<a name="l00052"></a>00052 <span class="comment">// ----------------------------------------------------</span>
<a name="l00053"></a>00053 <span class="comment">//      </span>
<a name="l00054"></a><a class="code" href="class_c_response.html#a78c01ecd70d8477731923b4bc12f9628">00054</a> <a class="code" href="class_c_response.html">CResponse</a>* <a class="code" href="class_c_response.html#a78c01ecd70d8477731923b4bc12f9628">CResponse::NewLC</a>()
<a name="l00055"></a>00055         {
<a name="l00056"></a>00056         <a class="code" href="class_c_response.html">CResponse</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_response.html">CResponse</a>;
<a name="l00057"></a>00057         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00058"></a>00058         <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00059"></a>00059         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00060"></a>00060         }
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="comment">// ----------------------------------------------------</span>
<a name="l00063"></a>00063 <span class="comment">// CResponse::ConstructL()</span>
<a name="l00064"></a>00064 <span class="comment">// Symbian OS default constructor can leave.</span>
<a name="l00065"></a>00065 <span class="comment">// ----------------------------------------------------</span>
<a name="l00066"></a>00066 <span class="comment">//      </span>
<a name="l00067"></a>00067 <span class="keywordtype">void</span> CResponse::ConstructL()
<a name="l00068"></a>00068         {
<a name="l00069"></a>00069         iDescriptions = <span class="keyword">new</span> (ELeave) CDesCArrayFlat(1);
<a name="l00070"></a>00070     iMessageBuffer = <a class="code" href="class_c_response.html#a2a6a27395f054e6912d4491f98ca3c54">HBufC::NewL</a>(0);
<a name="l00071"></a>00071         }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="comment">// ----------------------------------------------------</span>
<a name="l00074"></a>00074 <span class="comment">// CResponse::InputDataL()</span>
<a name="l00075"></a>00075 <span class="comment">// This functions constructs a response object from the </span>
<a name="l00076"></a>00076 <span class="comment">// data received from the server. E.g. if aData contains </span>
<a name="l00077"></a>00077 <span class="comment">// tasks, tasks are parsed to arrays, where they can be </span>
<a name="l00078"></a>00078 <span class="comment">// easily fetched. </span>
<a name="l00079"></a>00079 <span class="comment">// ----------------------------------------------------</span>
<a name="l00080"></a>00080 <span class="comment">//      </span>
<a name="l00081"></a><a class="code" href="class_c_response.html#a5eea58b909203d7f9e5731eb1f7a7243">00081</a> <span class="keywordtype">void</span> <a class="code" href="class_c_response.html#a5eea58b909203d7f9e5731eb1f7a7243">CResponse::ParseDataL</a>( TDesC&amp; aData )
<a name="l00082"></a>00082         {
<a name="l00083"></a>00083         <span class="comment">// error occurred in the server side (i.e. the aData begins #Error: ).</span>
<a name="l00084"></a>00084         <span class="keywordflow">if</span> (KError() == aData.Left(7))
<a name="l00085"></a>00085                 {
<a name="l00086"></a>00086                 iState = EError;
<a name="l00087"></a>00087                 <span class="comment">// remove the #-character.</span>
<a name="l00088"></a>00088                 iError = aData.Mid(1);
<a name="l00089"></a>00089                 <span class="keywordflow">return</span>;
<a name="l00090"></a>00090                 }
<a name="l00091"></a>00091         
<a name="l00092"></a>00092         <span class="comment">// response for completing task.</span>
<a name="l00093"></a>00093         <span class="keywordflow">if</span> (aData.Find(KOkMessage) != KErrNotFound)
<a name="l00094"></a>00094                 {
<a name="l00095"></a>00095                 iResponseType = ETaskComplete;
<a name="l00096"></a>00096                 <span class="keywordflow">return</span>;
<a name="l00097"></a>00097                 }
<a name="l00098"></a>00098                 
<a name="l00099"></a>00099         TLex lex(aData);
<a name="l00100"></a>00100         TTaskReadStatus status = EStart;
<a name="l00101"></a>00101         
<a name="l00102"></a>00102         <span class="comment">// Tasks are in form: #id#description#id#description#</span>
<a name="l00103"></a>00103         <span class="keywordflow">while</span> (!lex.Eos())
<a name="l00104"></a>00104                 {
<a name="l00105"></a>00105                 <span class="keywordflow">if</span> (lex.Peek() == TChar(KSeparator()[0]))
<a name="l00106"></a>00106                         {
<a name="l00107"></a>00107                         <span class="keywordflow">switch</span> (status)
<a name="l00108"></a>00108                                 {
<a name="l00109"></a>00109                                 <span class="comment">// first #-character found</span>
<a name="l00110"></a>00110                                 <span class="keywordflow">case</span> EStart:
<a name="l00111"></a>00111                                         {
<a name="l00112"></a>00112                                         status = EReadId;
<a name="l00113"></a>00113                                         <span class="keywordflow">break</span>;
<a name="l00114"></a>00114                                         }
<a name="l00115"></a>00115                                 <span class="comment">// read the id of the tasks.</span>
<a name="l00116"></a>00116                                 <span class="keywordflow">case</span> EReadId:
<a name="l00117"></a>00117                                         {
<a name="l00118"></a>00118                                         status = EReadTask;
<a name="l00119"></a>00119                                         TInt id;
<a name="l00120"></a>00120                                         TLex tmp(lex.MarkedToken());
<a name="l00121"></a>00121                                         User::LeaveIfError(tmp.Val(<span class="keywordtype">id</span>));
<a name="l00122"></a>00122                                         User::LeaveIfError(iIds.Append(<span class="keywordtype">id</span>));
<a name="l00123"></a>00123                                         <span class="keywordflow">break</span>;
<a name="l00124"></a>00124                                         }
<a name="l00125"></a>00125                                 <span class="comment">// read the description of the task.</span>
<a name="l00126"></a>00126                                 <span class="keywordflow">case</span> EReadTask:
<a name="l00127"></a>00127                                         {
<a name="l00128"></a>00128                                         status = EReadId;
<a name="l00129"></a>00129                                         TPtrC task = lex.MarkedToken();
<a name="l00130"></a>00130                                         iDescriptions-&gt;AppendL(task);
<a name="l00131"></a>00131                                         <span class="keywordflow">break</span>;
<a name="l00132"></a>00132                                         }
<a name="l00133"></a>00133                                 }
<a name="l00134"></a>00134                         lex.Inc();
<a name="l00135"></a>00135                         lex.Mark();
<a name="l00136"></a>00136                         }
<a name="l00137"></a>00137                 <span class="keywordflow">else</span>
<a name="l00138"></a>00138                         {
<a name="l00139"></a>00139                         lex.Inc();      
<a name="l00140"></a>00140                         }
<a name="l00141"></a>00141                 }       
<a name="l00142"></a>00142         }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="comment">// ----------------------------------------------------</span>
<a name="l00145"></a>00145 <span class="comment">// CResponse::HasError()</span>
<a name="l00146"></a>00146 <span class="comment">// Returns whether errors occurred in the server side </span>
<a name="l00147"></a>00147 <span class="comment">// or not.</span>
<a name="l00148"></a>00148 <span class="comment">// ----------------------------------------------------</span>
<a name="l00149"></a>00149 <span class="comment">//      </span>
<a name="l00150"></a><a class="code" href="class_c_response.html#aa2c211eba8208a0659bbecc31929a607">00150</a> TBool <a class="code" href="class_c_response.html#aa2c211eba8208a0659bbecc31929a607">CResponse::HasError</a>()<span class="keyword"> const</span>
<a name="l00151"></a>00151 <span class="keyword">        </span>{
<a name="l00152"></a>00152         TBool retval = EFalse;
<a name="l00153"></a>00153         <span class="keywordflow">if</span> (iError.Length() &gt; 0)
<a name="l00154"></a>00154                 {
<a name="l00155"></a>00155                 retval = ETrue;
<a name="l00156"></a>00156                 }
<a name="l00157"></a>00157         <span class="keywordflow">return</span> retval;
<a name="l00158"></a>00158         }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 <span class="comment">// ----------------------------------------------------</span>
<a name="l00161"></a>00161 <span class="comment">// CResponse::Error()</span>
<a name="l00162"></a>00162 <span class="comment">// Returns the error description. </span>
<a name="l00163"></a>00163 <span class="comment">// ----------------------------------------------------</span>
<a name="l00164"></a>00164 <span class="comment">//      </span>
<a name="l00165"></a><a class="code" href="class_c_response.html#abcd4ed6c6427bfe23a51989db29bd85e">00165</a> TBuf&lt;KMaxError&gt; <a class="code" href="class_c_response.html#abcd4ed6c6427bfe23a51989db29bd85e">CResponse::Error</a>()<span class="keyword"> const</span>
<a name="l00166"></a>00166 <span class="keyword">        </span>{
<a name="l00167"></a>00167         <span class="keywordflow">return</span> iError;
<a name="l00168"></a>00168         }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 <span class="comment">// ----------------------------------------------------</span>
<a name="l00171"></a>00171 <span class="comment">// CResponse::TaskCount()</span>
<a name="l00172"></a>00172 <span class="comment">// Returns the amount of tasks received from the server. </span>
<a name="l00173"></a>00173 <span class="comment">// ----------------------------------------------------</span>
<a name="l00174"></a>00174 <span class="comment">//      </span>
<a name="l00175"></a><a class="code" href="class_c_response.html#a7f13737551cb7c1a5dce6b901f1892b6">00175</a> TInt <a class="code" href="class_c_response.html#a7f13737551cb7c1a5dce6b901f1892b6">CResponse::TaskCount</a>()<span class="keyword"> const</span>
<a name="l00176"></a>00176 <span class="keyword">        </span>{
<a name="l00177"></a>00177         <span class="keywordflow">return</span> iIds.Count();
<a name="l00178"></a>00178         }
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 <span class="comment">// ----------------------------------------------------</span>
<a name="l00181"></a>00181 <span class="comment">// CResponse::TaskDescription()</span>
<a name="l00182"></a>00182 <span class="comment">// Returns a task description. </span>
<a name="l00183"></a>00183 <span class="comment">// ----------------------------------------------------</span>
<a name="l00184"></a>00184 <span class="comment">//      </span>
<a name="l00185"></a><a class="code" href="class_c_response.html#a4bd26f70c829e7f88367457b445c2ce2">00185</a> TBuf&lt;KMaxTaskLength&gt; <a class="code" href="class_c_response.html#a4bd26f70c829e7f88367457b445c2ce2">CResponse::TaskDescription</a>(<span class="keyword">const</span> TInt&amp; aIndex)<span class="keyword"> const</span>
<a name="l00186"></a>00186 <span class="keyword">        </span>{
<a name="l00187"></a>00187         <span class="keywordflow">if</span> (aIndex &gt;= iDescriptions-&gt;Count() || 0 &gt; aIndex)
<a name="l00188"></a>00188                 {
<a name="l00189"></a>00189                 Panic(ETaskManagerInvalidTaskIndex);
<a name="l00190"></a>00190                 }
<a name="l00191"></a>00191                 
<a name="l00192"></a>00192         <span class="keywordflow">return</span> (*iDescriptions)[aIndex];
<a name="l00193"></a>00193         }
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 <span class="comment">// ----------------------------------------------------</span>
<a name="l00196"></a>00196 <span class="comment">// CResponse::TaskId()</span>
<a name="l00197"></a>00197 <span class="comment">// Returns a task id. </span>
<a name="l00198"></a>00198 <span class="comment">// ----------------------------------------------------</span>
<a name="l00199"></a>00199 <span class="comment">//      </span>
<a name="l00200"></a><a class="code" href="class_c_response.html#a95771f9a7090029b7ff675553432adcf">00200</a> TInt <a class="code" href="class_c_response.html#a95771f9a7090029b7ff675553432adcf">CResponse::TaskId</a>(<span class="keyword">const</span> TInt&amp; aIndex)<span class="keyword"> const</span>
<a name="l00201"></a>00201 <span class="keyword">        </span>{
<a name="l00202"></a>00202         <span class="keywordflow">if</span> (aIndex &gt;= iDescriptions-&gt;Count() || 0 &gt; aIndex)
<a name="l00203"></a>00203                 {
<a name="l00204"></a>00204                 Panic(ETaskManagerInvalidTaskIndex);
<a name="l00205"></a>00205                 }
<a name="l00206"></a>00206 
<a name="l00207"></a>00207         <span class="keywordflow">return</span> iIds[aIndex];
<a name="l00208"></a>00208         }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 <span class="comment">// ----------------------------------------------------</span>
<a name="l00211"></a>00211 <span class="comment">// CResponse::ResponseType()</span>
<a name="l00212"></a>00212 <span class="comment">// Returns the type of this response. </span>
<a name="l00213"></a>00213 <span class="comment">// ----------------------------------------------------</span>
<a name="l00214"></a>00214 <span class="comment">//      </span>
<a name="l00215"></a><a class="code" href="class_c_response.html#a886806fe15bd7b490be051f258aa1c6b">00215</a> <a class="code" href="class_c_response.html#a66d7d28d83f038b1f1fbd4421376bbfd">CResponse::TResponseType</a> <a class="code" href="class_c_response.html#a886806fe15bd7b490be051f258aa1c6b">CResponse::ResponseType</a>()<span class="keyword"> const</span>
<a name="l00216"></a>00216 <span class="keyword">        </span>{
<a name="l00217"></a>00217         <span class="keywordflow">return</span> iResponseType;
<a name="l00218"></a>00218         }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 <span class="comment">// ----------------------------------------------------</span>
<a name="l00221"></a>00221 <span class="comment">// CResponse::InputDataL()</span>
<a name="l00222"></a>00222 <span class="comment">// Makes it possible to store a part of the data into the</span>
<a name="l00223"></a>00223 <span class="comment">// CResponse class.</span>
<a name="l00224"></a>00224 <span class="comment">// ----------------------------------------------------</span>
<a name="l00225"></a>00225 <span class="comment">//      </span>
<a name="l00226"></a><a class="code" href="class_c_response.html#abbd142a6b537780d136cb9b12e3d6572">00226</a> <span class="keywordtype">void</span> <a class="code" href="class_c_response.html#abbd142a6b537780d136cb9b12e3d6572">CResponse::InputDataL</a>( <span class="keyword">const</span> TDesC8&amp; aData )
<a name="l00227"></a>00227     {
<a name="l00228"></a>00228     iMessageBuffer = iMessageBuffer-&gt;ReAllocL(iMessageBuffer-&gt;Length() + aData.Length());
<a name="l00229"></a>00229     HBufC* newData = <a class="code" href="class_c_response.html#a78c01ecd70d8477731923b4bc12f9628">HBufC::NewLC</a>(aData.Length());
<a name="l00230"></a>00230     newData-&gt;Des().Copy(aData);
<a name="l00231"></a>00231     iMessageBuffer-&gt;Des() += newData-&gt;Des();
<a name="l00232"></a>00232     CleanupStack::PopAndDestroy(newData);
<a name="l00233"></a>00233     
<a name="l00234"></a>00234     DoCheck();
<a name="l00235"></a>00235     }
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 <span class="comment">// ----------------------------------------------------</span>
<a name="l00238"></a>00238 <span class="comment">// CResponse::DoCheck()</span>
<a name="l00239"></a>00239 <span class="comment">// Does a check on the received package and sets the state</span>
<a name="l00240"></a>00240 <span class="comment">// that determines what the engine should do next.</span>
<a name="l00241"></a>00241 <span class="comment">// ----------------------------------------------------</span>
<a name="l00242"></a>00242 <span class="comment">//      </span>
<a name="l00243"></a>00243 <span class="keywordtype">void</span> CResponse::DoCheck()
<a name="l00244"></a>00244     {
<a name="l00245"></a>00245         <span class="keywordflow">if</span>( iExpectedPackageSize == 0 )
<a name="l00246"></a>00246                 {
<a name="l00247"></a>00247                 <span class="comment">// We try to extract the size of the package, which should be found in the beginning</span>
<a name="l00248"></a>00248                 <span class="comment">// of the package, before the first separator character</span>
<a name="l00249"></a>00249                 TInt separatorIndex = iMessageBuffer-&gt;Find( KSeparator );
<a name="l00250"></a>00250 
<a name="l00251"></a>00251                 <span class="keywordflow">if</span>( separatorIndex == KErrNotFound )
<a name="l00252"></a>00252                         { <span class="comment">// The size of the package can&#39;t be read before the first separator sign is found</span>
<a name="l00253"></a>00253             iState = ENotComplete;
<a name="l00254"></a>00254             <span class="keywordflow">return</span>;
<a name="l00255"></a>00255                         }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257         <span class="comment">// Extracted size is converted into TInt</span>
<a name="l00258"></a>00258                 TPtrC sizePtr = iMessageBuffer-&gt;Left( separatorIndex );
<a name="l00259"></a>00259 
<a name="l00260"></a>00260                 TLex converter( sizePtr );
<a name="l00261"></a>00261                 <span class="keywordflow">if</span>( converter.Val( iExpectedPackageSize ) != KErrNone )
<a name="l00262"></a>00262                         { <span class="comment">// conversion failed</span>
<a name="l00263"></a>00263             iState = EError;
<a name="l00264"></a>00264             <span class="keywordflow">return</span>;
<a name="l00265"></a>00265                         }
<a name="l00266"></a>00266                 }
<a name="l00267"></a>00267 
<a name="l00268"></a>00268     TBuf&lt;6&gt; asciiSize;
<a name="l00269"></a>00269     asciiSize.Num( iExpectedPackageSize );
<a name="l00270"></a>00270 
<a name="l00271"></a>00271     <span class="keywordflow">if</span>( iMessageBuffer-&gt;Length() - asciiSize.Length() &lt; iExpectedPackageSize )
<a name="l00272"></a>00272         { <span class="comment">// The entire package hasn&#39;t been received</span>
<a name="l00273"></a>00273         iState = ENotComplete;
<a name="l00274"></a>00274         <span class="keywordflow">return</span>;
<a name="l00275"></a>00275         }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277     iExpectedPackageSize = 0;
<a name="l00278"></a>00278 
<a name="l00279"></a>00279     <span class="comment">// The size component is cut from the message</span>
<a name="l00280"></a>00280     TPtrC data = iMessageBuffer-&gt;Right( iMessageBuffer-&gt;Length() -
<a name="l00281"></a>00281                                         iMessageBuffer-&gt;Find( KSeparator ) );
<a name="l00282"></a>00282     
<a name="l00283"></a>00283         TRAPD(error, <a class="code" href="class_c_response.html#a5eea58b909203d7f9e5731eb1f7a7243">ParseDataL</a>( data );)
<a name="l00284"></a>00284         PanicIfError(error);
<a name="l00285"></a>00285         
<a name="l00286"></a>00286         iState = EComplete;
<a name="l00287"></a>00287     }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289 <span class="comment">// ----------------------------------------------------</span>
<a name="l00290"></a>00290 <span class="comment">// CResponse::GetState()</span>
<a name="l00291"></a>00291 <span class="comment">// Returns the state to the engine.</span>
<a name="l00292"></a>00292 <span class="comment">// ----------------------------------------------------</span>
<a name="l00293"></a>00293 <span class="comment">//      </span>
<a name="l00294"></a><a class="code" href="class_c_response.html#a118506616c44d373a0a924f6fd4dea0b">00294</a> <a class="code" href="class_c_response.html#a797ea6210eadf0408870a77f242b333d">CResponse::TResponseState</a> <a class="code" href="class_c_response.html#a118506616c44d373a0a924f6fd4dea0b">CResponse::GetState</a>()<span class="keyword"> const</span>
<a name="l00295"></a>00295 <span class="keyword">    </span>{
<a name="l00296"></a>00296     <span class="keywordflow">return</span> iState;
<a name="l00297"></a>00297     }
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 <span class="comment">// End of file</span>
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

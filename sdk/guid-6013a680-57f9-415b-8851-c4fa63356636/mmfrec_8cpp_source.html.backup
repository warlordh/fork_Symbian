<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Multimedia/MmfRec/src/mmfrec.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Multimedia/MmfRec/src/mmfrec.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;e32base.h&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;e32cons.h&gt;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;mdaaudiosampleeditor.h&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;bautils.h&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;ecom/ecom.h&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &quot;mmfrec.h&quot;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFileNameFormat, <span class="stringliteral">&quot;c:\\record%03d%S&quot;</span>);
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="keyword">const</span> TInt KRecordTimeMicros = 2000000; <span class="comment">//2s</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 TInt E32Main()
<a name="l00028"></a>00028         {
<a name="l00029"></a>00029         __UHEAP_MARK;
<a name="l00030"></a>00030 
<a name="l00031"></a>00031         CTrapCleanup* cleanup=CTrapCleanup::New();
<a name="l00032"></a>00032         TInt r=KErrNoMemory;
<a name="l00033"></a>00033         <span class="keywordflow">if</span> (cleanup)
<a name="l00034"></a>00034                 {
<a name="l00035"></a>00035                 TRAP(r,MainL());
<a name="l00036"></a>00036                 <span class="keyword">delete</span> cleanup;
<a name="l00037"></a>00037                 }
<a name="l00038"></a>00038         REComSession::FinalClose();
<a name="l00039"></a>00039         __UHEAP_MARKEND;
<a name="l00040"></a>00040 
<a name="l00041"></a>00041         <span class="keywordflow">return</span> r;
<a name="l00042"></a>00042         }
<a name="l00043"></a>00043         
<a name="l00044"></a>00044 <span class="keywordtype">void</span> MainL()
<a name="l00045"></a>00045         {
<a name="l00046"></a>00046         <span class="comment">// The recorder utility requires an active scheduler to be running in the thread before</span>
<a name="l00047"></a>00047         <span class="comment">// it can be used. This would normally be done by the application framework</span>
<a name="l00048"></a>00048         CActiveScheduler* s=<span class="keyword">new</span>(ELeave) CActiveScheduler;
<a name="l00049"></a>00049         CleanupStack::PushL(s);
<a name="l00050"></a>00050         CActiveScheduler::Install(s);
<a name="l00051"></a>00051         
<a name="l00052"></a>00052         <a class="code" href="class_c_m_m_f_record_test.html">CMMFRecordTest</a>* test = CMMFRecordTest::NewLC();
<a name="l00053"></a>00053         
<a name="l00054"></a>00054         test-&gt;Go();
<a name="l00055"></a>00055 
<a name="l00056"></a>00056         CActiveScheduler::Start();
<a name="l00057"></a>00057         CleanupStack::PopAndDestroy(2);
<a name="l00058"></a>00058         }
<a name="l00059"></a>00059         
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 <span class="comment">//______________________________________________________________________________</span>
<a name="l00062"></a>00062 <span class="comment">//                                              CMMFRecordTest</span>
<a name="l00063"></a>00063 <a class="code" href="class_c_m_m_f_record_test.html">CMMFRecordTest</a>* CMMFRecordTest::NewLC()
<a name="l00064"></a>00064         {
<a name="l00065"></a>00065         <a class="code" href="class_c_m_m_f_record_test.html">CMMFRecordTest</a>* <span class="keyword">self</span> = <span class="keyword">new</span>(ELeave)<a class="code" href="class_c_m_m_f_record_test.html">CMMFRecordTest</a>();
<a name="l00066"></a>00066         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00067"></a>00067         <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00068"></a>00068         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00069"></a>00069         }
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 CMMFRecordTest::~CMMFRecordTest()
<a name="l00072"></a>00072         {
<a name="l00073"></a>00073         <span class="keyword">delete</span> iRecorder;
<a name="l00074"></a>00074         <span class="keyword">delete</span> iConsole;
<a name="l00075"></a>00075         <span class="keyword">delete</span> iCallBack;
<a name="l00076"></a>00076         <span class="keyword">delete</span> iTimer;
<a name="l00077"></a>00077         iFs.Close();
<a name="l00078"></a>00078         <span class="keywordflow">for</span> (TInt i=0; i&lt;iControllers.Count(); ++i)
<a name="l00079"></a>00079                 {
<a name="l00080"></a>00080                 <span class="keyword">delete</span> iControllers[i];
<a name="l00081"></a>00081                 }
<a name="l00082"></a>00082         iControllers.Close();
<a name="l00083"></a>00083         }
<a name="l00084"></a>00084         
<a name="l00085"></a>00085 <span class="keywordtype">void</span> CMMFRecordTest::NextState(TState aState)
<a name="l00086"></a>00086         {
<a name="l00087"></a>00087         iState = aState;
<a name="l00088"></a>00088         iCallBack-&gt;Set(iCbFn);
<a name="l00089"></a>00089         iCallBack-&gt;CallBack();
<a name="l00090"></a>00090         }
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="keywordtype">void</span> CMMFRecordTest::Go()
<a name="l00093"></a>00093         {
<a name="l00094"></a>00094         NextState(ENone);
<a name="l00095"></a>00095         }
<a name="l00096"></a>00096 
<a name="l00102"></a><a class="code" href="class_c_m_m_f_record_test.html#a7d51322057936bba891cc6f375671e80">00102</a> <span class="keywordtype">void</span> <a class="code" href="class_c_m_m_f_record_test.html#a7d51322057936bba891cc6f375671e80">CMMFRecordTest::MoscoStateChangeEvent</a>(CBase* aObject, TInt aPreviousState, TInt aCurrentState, TInt aErrorCode)
<a name="l00103"></a>00103         {
<a name="l00104"></a>00104         
<a name="l00105"></a>00105         __ASSERT_ALWAYS(aObject == iRecorder, User::Panic(_L(<span class="stringliteral">&quot;Objects NotEqual&quot;</span>),KErrNotFound));
<a name="l00106"></a>00106         
<a name="l00107"></a>00107         <span class="keywordflow">switch</span> (iState)
<a name="l00108"></a>00108                 {
<a name="l00109"></a>00109         <span class="keywordflow">case</span> EInitFile:
<a name="l00110"></a>00110                 Printf(_L(<span class="stringliteral">&quot;Initialising file:&quot;</span>));
<a name="l00111"></a>00111                 <span class="keywordflow">break</span>;
<a name="l00112"></a>00112         <span class="keywordflow">case</span> EInitDesc:
<a name="l00113"></a>00113                 Printf(_L(<span class="stringliteral">&quot;Initialising des:&quot;</span>));
<a name="l00114"></a>00114                 <span class="keywordflow">break</span>;
<a name="l00115"></a>00115         <span class="keywordflow">case</span> ENone:
<a name="l00116"></a>00116         <span class="keywordflow">case</span> EDoOpenFile:
<a name="l00117"></a>00117         <span class="keywordflow">case</span> ERecordFile:
<a name="l00118"></a>00118         <span class="keywordflow">case</span> EDoOpenDesc:
<a name="l00119"></a>00119         <span class="keywordflow">case</span> ERecordDesc:
<a name="l00120"></a>00120         <span class="keywordflow">case</span> ENext:
<a name="l00121"></a>00121         <span class="keywordflow">case</span> EDone:
<a name="l00122"></a>00122         <span class="keywordflow">default</span>:
<a name="l00123"></a>00123                         <span class="keywordflow">break</span>;
<a name="l00124"></a>00124                 }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126         Printf(_L(<span class="stringliteral">&quot;MoscoStateChangeEvent(%d, %d, %d)&quot;</span>), aPreviousState, aCurrentState, aErrorCode);     
<a name="l00127"></a>00127 
<a name="l00128"></a>00128         TTimeIntervalMicroSeconds32 delay(KRecordTimeMicros);
<a name="l00129"></a>00129 
<a name="l00130"></a>00130         <span class="keywordflow">switch</span> (iState)
<a name="l00131"></a>00131                 {
<a name="l00132"></a>00132         <span class="keywordflow">case</span> EInitFile:
<a name="l00133"></a>00133                 <span class="keywordflow">if</span> (aErrorCode == KErrNone)
<a name="l00134"></a>00134                         { <span class="comment">// file was opened successfully</span>
<a name="l00135"></a>00135                         Printf(_L(<span class="stringliteral">&quot;call: RecordL() (to file)&quot;</span>));
<a name="l00136"></a>00136                         iState = ERecordFile;
<a name="l00137"></a>00137                         TRAPD(err,iRecorder-&gt;RecordL());
<a name="l00138"></a>00138                         <span class="keywordflow">if</span>(err)
<a name="l00139"></a>00139                                 {
<a name="l00140"></a>00140                                 <span class="keywordflow">return</span>;
<a name="l00141"></a>00141                                 }
<a name="l00142"></a>00142                         iTimer-&gt;Start(delay, delay, iCbFn);
<a name="l00143"></a>00143                         }
<a name="l00144"></a>00144                 <span class="keywordflow">else</span>
<a name="l00145"></a>00145                         {
<a name="l00146"></a>00146                         Printf(_L(<span class="stringliteral">&quot;OpenFile failed with error %d&quot;</span>), aErrorCode);
<a name="l00147"></a>00147                         <span class="comment">// move onto next stage: record to descriptor</span>
<a name="l00148"></a>00148                         NextState(EDoOpenDesc);
<a name="l00149"></a>00149                         }
<a name="l00150"></a>00150                 <span class="keywordflow">break</span>;
<a name="l00151"></a>00151         <span class="keywordflow">case</span> EInitDesc:
<a name="l00152"></a>00152                 <span class="keywordflow">if</span> (aErrorCode == KErrNone)
<a name="l00153"></a>00153                         {
<a name="l00154"></a>00154                         Printf(_L(<span class="stringliteral">&quot;call: RecordL() (to des)&quot;</span>));
<a name="l00155"></a>00155                         iState = ERecordDesc;
<a name="l00156"></a>00156                         TRAPD(err,iRecorder-&gt;RecordL());
<a name="l00157"></a>00157                         <span class="keywordflow">if</span>(err)
<a name="l00158"></a>00158                                 {
<a name="l00159"></a>00159                                 <span class="keywordflow">return</span>;
<a name="l00160"></a>00160                                 }
<a name="l00161"></a>00161                         iTimer-&gt;Start(delay, delay, iCbFn);
<a name="l00162"></a>00162                         }
<a name="l00163"></a>00163                 <span class="keywordflow">else</span>
<a name="l00164"></a>00164                         {
<a name="l00165"></a>00165                         Printf(_L(<span class="stringliteral">&quot;OpenDesc failed with error %d&quot;</span>), aErrorCode);
<a name="l00166"></a>00166                         <span class="comment">// move onto next stage: try next format</span>
<a name="l00167"></a>00167                         NextState(ENext);
<a name="l00168"></a>00168                         }                       
<a name="l00169"></a>00169                 <span class="keywordflow">break</span>;
<a name="l00170"></a>00170         <span class="keywordflow">case</span> ERecordFile:
<a name="l00171"></a>00171                 <span class="comment">// an error has occurred during recording. Stop the recording and move onto the next test.</span>
<a name="l00172"></a>00172                 <span class="keywordflow">if</span> (aCurrentState!=CMdaAudioClipUtility::ERecording)
<a name="l00173"></a>00173                         {
<a name="l00174"></a>00174                         iTimer-&gt;Cancel();
<a name="l00175"></a>00175                         Printf(_L(<span class="stringliteral">&quot;call: Stop()&quot;</span>));
<a name="l00176"></a>00176                         iRecorder-&gt;Stop();
<a name="l00177"></a>00177                         NextState(EDoOpenDesc);
<a name="l00178"></a>00178                         }
<a name="l00179"></a>00179                 <span class="keywordflow">break</span>;
<a name="l00180"></a>00180         <span class="keywordflow">case</span> ERecordDesc:
<a name="l00181"></a>00181                 <span class="comment">// an error has occurred during recording. Stop the recording and move onto the next test.</span>
<a name="l00182"></a>00182                 <span class="keywordflow">if</span> (aCurrentState!=CMdaAudioClipUtility::ERecording)
<a name="l00183"></a>00183                         {
<a name="l00184"></a>00184                         iTimer-&gt;Cancel();
<a name="l00185"></a>00185                         Printf(_L(<span class="stringliteral">&quot;call: Stop()&quot;</span>));
<a name="l00186"></a>00186                         iRecorder-&gt;Stop();
<a name="l00187"></a>00187                         NextState(ENext);
<a name="l00188"></a>00188                         }
<a name="l00189"></a>00189                 <span class="keywordflow">break</span>;
<a name="l00190"></a>00190         <span class="keywordflow">case</span> ENone:
<a name="l00191"></a>00191         <span class="keywordflow">case</span> EDoOpenFile:
<a name="l00192"></a>00192         <span class="keywordflow">case</span> EDoOpenDesc:
<a name="l00193"></a>00193         <span class="keywordflow">case</span> ENext:
<a name="l00194"></a>00194         <span class="keywordflow">case</span> EDone:
<a name="l00195"></a>00195         <span class="keywordflow">default</span>:
<a name="l00196"></a>00196                         <span class="keywordflow">break</span>;
<a name="l00197"></a>00197         
<a name="l00198"></a>00198                 }
<a name="l00199"></a>00199         }
<a name="l00200"></a>00200         
<a name="l00201"></a>00201 CMMFRecordTest::CMMFRecordTest()
<a name="l00202"></a>00202         {
<a name="l00203"></a>00203         }
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 <span class="keywordtype">void</span> CMMFRecordTest::ConstructL()
<a name="l00206"></a>00206         {
<a name="l00207"></a>00207         iCallBack = <span class="keyword">new</span>(ELeave)CAsyncCallBack(CActive::EPriorityStandard);
<a name="l00208"></a>00208         iTimer = CPeriodic::NewL(CActive::EPriorityStandard);
<a name="l00209"></a>00209         iConsole = Console::NewL(_L(<span class="stringliteral">&quot; RecTest &quot;</span>), TSize(KConsFullScreen, KConsFullScreen));
<a name="l00210"></a>00210         User::LeaveIfNull(iConsole);
<a name="l00211"></a>00211         iRecorder = CMdaAudioRecorderUtility::NewL(*<span class="keyword">this</span>);
<a name="l00212"></a>00212         User::LeaveIfError(iFs.Connect());
<a name="l00213"></a>00213         
<a name="l00214"></a>00214         iCbFn = TCallBack(Callback, <span class="keyword">this</span>);
<a name="l00215"></a>00215         }
<a name="l00216"></a>00216 
<a name="l00221"></a>00221 <span class="keywordtype">void</span> CMMFRecordTest::GetPluginInformationL()
<a name="l00222"></a>00222         {
<a name="l00223"></a>00223         CMMFControllerPluginSelectionParameters* controllerSelection = NULL;
<a name="l00224"></a>00224         CMMFFormatSelectionParameters* formatSelect = NULL;
<a name="l00225"></a>00225 
<a name="l00226"></a>00226         iControllers.ResetAndDestroy();
<a name="l00227"></a>00227         iControllers.Close();
<a name="l00228"></a>00228 
<a name="l00229"></a>00229         controllerSelection = CMMFControllerPluginSelectionParameters::NewLC();
<a name="l00230"></a>00230 
<a name="l00231"></a>00231         RArray&lt;TUid&gt; mediaIds; <span class="comment">//Array to hold media types we wish to support</span>
<a name="l00232"></a>00232         CleanupClosePushL(mediaIds);
<a name="l00233"></a>00233         
<a name="l00234"></a>00234         <span class="comment">// specify that we&#39;re interested in audio</span>
<a name="l00235"></a>00235         mediaIds.AppendL(KUidMediaTypeAudio);
<a name="l00236"></a>00236         controllerSelection-&gt;SetMediaIdsL(
<a name="l00237"></a>00237                 mediaIds, CMMFPluginSelectionParameters::EAllowOnlySuppliedMediaIds);
<a name="l00238"></a>00238 
<a name="l00239"></a>00239         formatSelect = CMMFFormatSelectionParameters::NewLC();
<a name="l00240"></a>00240         <span class="comment">/*</span>
<a name="l00241"></a>00241 <span class="comment">        specify that were only interested in formats for recording.</span>
<a name="l00242"></a>00242 <span class="comment">        If you were intersted in recording to a specific format rather than just excercising</span>
<a name="l00243"></a>00243 <span class="comment">        every record format supported by the system, you could (for example) specify which </span>
<a name="l00244"></a>00244 <span class="comment">        format by calling formatSelect-&gt;SetMatchToMimeTypeL().  </span>
<a name="l00245"></a>00245 <span class="comment">        */</span>
<a name="l00246"></a>00246         controllerSelection-&gt;SetRequiredRecordFormatSupportL(*formatSelect);
<a name="l00247"></a>00247         
<a name="l00248"></a>00248         <span class="comment">// get the list of controller plugins that support audio recording in one or </span>
<a name="l00249"></a>00249         <span class="comment">// more formats.</span>
<a name="l00250"></a>00250         controllerSelection-&gt;ListImplementationsL(iControllers);
<a name="l00251"></a>00251         
<a name="l00252"></a>00252         <span class="comment">// iControllers now contains details of all audio controller plugins that support</span>
<a name="l00253"></a>00253         <span class="comment">// audio recording. Each of the controller in the array will support one or more</span>
<a name="l00254"></a>00254         <span class="comment">// recording formats.</span>
<a name="l00255"></a>00255         Printf(_L(<span class="stringliteral">&quot;GetPluginInformationL() - iControllers.Count() : %d&quot;</span>), iControllers.Count());
<a name="l00256"></a>00256 
<a name="l00257"></a>00257         CleanupStack::PopAndDestroy(3, controllerSelection);
<a name="l00258"></a>00258         }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 <span class="keywordtype">void</span> CMMFRecordTest::Printf(TRefByValue&lt;const TDesC16&gt; aFmt, ...)
<a name="l00261"></a>00261         {
<a name="l00262"></a>00262         VA_LIST list;
<a name="l00263"></a>00263         VA_START(list, aFmt);
<a name="l00264"></a>00264 
<a name="l00265"></a>00265         <a class="code" href="class_t_truncate_overflow.html">TTruncateOverflow</a> overflow;
<a name="l00266"></a>00266         iFormattingBuf.Zero();
<a name="l00267"></a>00267         iFormattingBuf.AppendFormatList(aFmt, list, &amp;overflow);
<a name="l00268"></a>00268         
<a name="l00269"></a>00269         <span class="comment">// output the message to the console on the screen, and also to debug output</span>
<a name="l00270"></a>00270         iConsole-&gt;Printf(iFormattingBuf);
<a name="l00271"></a>00271         iConsole-&gt;Printf(_L(<span class="stringliteral">&quot;\n&quot;</span>));
<a name="l00272"></a>00272         RDebug::RawPrint(iFormattingBuf);
<a name="l00273"></a>00273         }
<a name="l00274"></a>00274         
<a name="l00275"></a>00275 TInt CMMFRecordTest::Callback(TAny* <span class="keyword">self</span>)
<a name="l00276"></a>00276         {
<a name="l00277"></a>00277         TState state = ((<a class="code" href="class_c_m_m_f_record_test.html">CMMFRecordTest</a>*)<span class="keyword">self</span>)-&gt;iState;
<a name="l00278"></a>00278         TRAPD(err, ((<a class="code" href="class_c_m_m_f_record_test.html">CMMFRecordTest</a>*)<span class="keyword">self</span>)-&gt;DoCallbackL());
<a name="l00279"></a>00279         <span class="keywordflow">if</span> (err!=KErrNone)
<a name="l00280"></a>00280                 {
<a name="l00281"></a>00281                 ((<a class="code" href="class_c_m_m_f_record_test.html">CMMFRecordTest</a>*)<span class="keyword">self</span>)-&gt;Printf(_L(<span class="stringliteral">&quot;Left with %d in state %d&quot;</span>), err, state);
<a name="l00282"></a>00282                 }
<a name="l00283"></a>00283         <span class="keywordflow">return</span> err;             
<a name="l00284"></a>00284         }
<a name="l00285"></a>00285         
<a name="l00286"></a>00286 <span class="keywordtype">void</span> CMMFRecordTest::DoCallbackL()
<a name="l00287"></a>00287         {
<a name="l00288"></a>00288         iTimer-&gt;Cancel();
<a name="l00289"></a>00289         <span class="keywordflow">switch</span> (iState)
<a name="l00290"></a>00290                 {
<a name="l00291"></a>00291         <span class="keywordflow">case</span> ENone:
<a name="l00292"></a>00292                 <span class="comment">// start by getting details of all the </span>
<a name="l00293"></a>00293                 GetPluginInformationL();
<a name="l00294"></a>00294                 iControllerIndex = 0;
<a name="l00295"></a>00295                 iFormatIndex = 0;
<a name="l00296"></a>00296                 <span class="comment">// get the detail of the first format UID</span>
<a name="l00297"></a>00297                 <span class="keywordflow">if</span> (GetNextFormatUid())
<a name="l00298"></a>00298                         {
<a name="l00299"></a>00299                         <span class="comment">// and begin initialization</span>
<a name="l00300"></a>00300                         NextState(EDoOpenFile);
<a name="l00301"></a>00301                         }
<a name="l00302"></a>00302                 <span class="keywordflow">else</span>
<a name="l00303"></a>00303                         {
<a name="l00304"></a>00304                         <span class="comment">// if this fails for some reason, move onto the next controller</span>
<a name="l00305"></a>00305                         Next();
<a name="l00306"></a>00306                         }
<a name="l00307"></a>00307                 <span class="keywordflow">break</span>;
<a name="l00308"></a>00308                 
<a name="l00309"></a>00309         <span class="keywordflow">case</span> EDoOpenFile:
<a name="l00310"></a>00310                 InitializeFileL();
<a name="l00311"></a>00311                 <span class="keywordflow">break</span>;
<a name="l00312"></a>00312                 
<a name="l00313"></a>00313         <span class="keywordflow">case</span> EDoOpenDesc:
<a name="l00314"></a>00314                 InitializeDesL();
<a name="l00315"></a>00315                 <span class="keywordflow">break</span>;
<a name="l00316"></a>00316                 
<a name="l00317"></a>00317         <span class="keywordflow">case</span> ERecordFile:
<a name="l00318"></a>00318                 <span class="comment">// stop recording to a file after the timer expires</span>
<a name="l00319"></a>00319                 Printf(_L(<span class="stringliteral">&quot;call: Stop()&quot;</span>));
<a name="l00320"></a>00320                 iRecorder-&gt;Stop();
<a name="l00321"></a>00321                 NextState(EDoOpenDesc);
<a name="l00322"></a>00322                 <span class="keywordflow">break</span>;
<a name="l00323"></a>00323 
<a name="l00324"></a>00324         <span class="keywordflow">case</span> ERecordDesc:
<a name="l00325"></a>00325                 <span class="comment">// stop recording to a descriptor after the timer expires</span>
<a name="l00326"></a>00326                 Printf(_L(<span class="stringliteral">&quot;call: Stop()&quot;</span>));
<a name="l00327"></a>00327                 iRecorder-&gt;Stop();
<a name="l00328"></a>00328                 NextState(ENext);
<a name="l00329"></a>00329                 <span class="keywordflow">break</span>;
<a name="l00330"></a>00330 
<a name="l00331"></a>00331         <span class="keywordflow">case</span> ENext:
<a name="l00332"></a>00332                 Next();
<a name="l00333"></a>00333                 <span class="keywordflow">break</span>;
<a name="l00334"></a>00334                 
<a name="l00335"></a>00335         <span class="keywordflow">case</span> EDone:
<a name="l00336"></a>00336                 CActiveScheduler::Stop();
<a name="l00337"></a>00337                 <span class="keywordflow">break</span>;
<a name="l00338"></a>00338         <span class="keywordflow">case</span> EInitFile:
<a name="l00339"></a>00339         <span class="keywordflow">case</span> EInitDesc:
<a name="l00340"></a>00340         <span class="keywordflow">default</span>:
<a name="l00341"></a>00341                         <span class="keywordflow">break</span>;
<a name="l00342"></a>00342 
<a name="l00343"></a>00343                 }
<a name="l00344"></a>00344         
<a name="l00345"></a>00345         
<a name="l00346"></a>00346         }
<a name="l00347"></a>00347         
<a name="l00351"></a>00351 <span class="keywordtype">void</span> CMMFRecordTest::Next()
<a name="l00352"></a>00352         {
<a name="l00353"></a>00353         <span class="keywordflow">if</span> (iControllerIndex &gt;= iControllers.Count())
<a name="l00354"></a>00354                 {
<a name="l00355"></a>00355                 NextState(EDone);
<a name="l00356"></a>00356                 <span class="keywordflow">return</span>;
<a name="l00357"></a>00357                 }
<a name="l00358"></a>00358                 
<a name="l00359"></a>00359         CMMFControllerImplementationInformation* info = iControllers[iControllerIndex];
<a name="l00360"></a>00360         
<a name="l00361"></a>00361         ++iFormatIndex;
<a name="l00362"></a>00362         
<a name="l00363"></a>00363         <span class="keywordflow">if</span> (iFormatIndex &gt;= info-&gt;RecordFormats().Count())
<a name="l00364"></a>00364                 {
<a name="l00365"></a>00365                 iFormatIndex = -1;
<a name="l00366"></a>00366                 ++iControllerIndex;
<a name="l00367"></a>00367                 NextState(ENext);
<a name="l00368"></a>00368                 <span class="keywordflow">return</span>;
<a name="l00369"></a>00369                 }       
<a name="l00370"></a>00370                 
<a name="l00371"></a>00371         NextState(GetNextFormatUid() ? EDoOpenFile : EDone);    
<a name="l00372"></a>00372         }
<a name="l00373"></a>00373         
<a name="l00377"></a>00377 TBool CMMFRecordTest::GetNextFormatUid()
<a name="l00378"></a>00378         {
<a name="l00379"></a>00379         <span class="comment">// if we have already excercised all of the controllers, then finish:</span>
<a name="l00380"></a>00380         <span class="keywordflow">if</span> (iControllerIndex &gt;= iControllers.Count())
<a name="l00381"></a>00381                 {
<a name="l00382"></a>00382                 <span class="keywordflow">return</span> EFalse;
<a name="l00383"></a>00383                 }
<a name="l00384"></a>00384                 
<a name="l00385"></a>00385         CMMFControllerImplementationInformation* info = iControllers[iControllerIndex];
<a name="l00386"></a>00386         
<a name="l00387"></a>00387         <span class="comment">// if we have already tried all record formats supported by the current</span>
<a name="l00388"></a>00388         <span class="comment">// controller, then move onto the next:</span>
<a name="l00389"></a>00389         <span class="keywordflow">if</span> (iFormatIndex &gt;= info-&gt;RecordFormats().Count())
<a name="l00390"></a>00390                 {
<a name="l00391"></a>00391                 <span class="keywordflow">return</span> EFalse;
<a name="l00392"></a>00392                 }
<a name="l00393"></a>00393                 
<a name="l00394"></a>00394         <span class="comment">// get the unique IDs of the controller and the record format we&#39;re using</span>
<a name="l00395"></a>00395         iControllerUid = info-&gt;Uid();
<a name="l00396"></a>00396         iDestinationFormatUid = info-&gt;RecordFormats()[iFormatIndex]-&gt;Uid();
<a name="l00397"></a>00397         
<a name="l00398"></a>00398         <span class="comment">// find the recommended extension for a file of this format</span>
<a name="l00399"></a>00399         iExtension.Zero();
<a name="l00400"></a>00400         <span class="keyword">const</span> CDesC8Array&amp; extns = info-&gt;RecordFormats()[iFormatIndex]-&gt;SupportedFileExtensions();
<a name="l00401"></a>00401         <span class="keywordflow">if</span> (extns.Count()&gt;0)
<a name="l00402"></a>00402                 {
<a name="l00403"></a>00403                 iExtension.Copy(extns[0]);
<a name="l00404"></a>00404                 }
<a name="l00405"></a>00405         
<a name="l00406"></a>00406         <span class="comment">// finally display some information about the format we&#39;re using</span>
<a name="l00407"></a>00407         Printf(_L(<span class="stringliteral">&quot;Using controller &#39;%S&#39;, record format &#39;%S&#39;&quot;</span>), &amp;info-&gt;DisplayName(), &amp;info-&gt;RecordFormats()[iFormatIndex]-&gt;DisplayName());
<a name="l00408"></a>00408                 
<a name="l00409"></a>00409                 
<a name="l00410"></a>00410         <span class="keywordflow">return</span> ETrue;
<a name="l00411"></a>00411         }
<a name="l00412"></a>00412 
<a name="l00413"></a>00413 <span class="keywordtype">void</span> CMMFRecordTest::DeleteFileL(<span class="keyword">const</span> TDesC&amp; aFileName)
<a name="l00414"></a>00414         {
<a name="l00415"></a>00415         TInt result = BaflUtils::DeleteFile(iFs, aFileName);
<a name="l00416"></a>00416 
<a name="l00417"></a>00417         <span class="keywordflow">if</span> ((result != KErrNotFound)&amp;&amp;(result!=KErrPathNotFound))
<a name="l00418"></a>00418                 {
<a name="l00419"></a>00419                 User::LeaveIfError(result);
<a name="l00420"></a>00420                 }
<a name="l00421"></a>00421         }
<a name="l00422"></a>00422 
<a name="l00427"></a>00427 <span class="keywordtype">void</span> CMMFRecordTest::InitializeFileL()
<a name="l00428"></a>00428         {
<a name="l00429"></a>00429         iFileName.Zero();
<a name="l00430"></a>00430         iFileName.Format(KFileNameFormat, iFileNum, &amp;iExtension);
<a name="l00431"></a>00431         
<a name="l00432"></a>00432         <span class="comment">// delte the file if it already exists</span>
<a name="l00433"></a>00433         DeleteFileL(iFileName);
<a name="l00434"></a>00434         
<a name="l00435"></a>00435         Printf(_L(<span class="stringliteral">&quot;call: OpenFileL(%S, %x, %x, %x)&quot;</span>), &amp;iFileName, iControllerUid, KNullUid, iDestinationFormatUid);
<a name="l00436"></a>00436         iState = EInitFile;
<a name="l00437"></a>00437         iRecorder-&gt;OpenFileL(iFileName, iControllerUid, KNullUid, iDestinationFormatUid);
<a name="l00438"></a>00438         
<a name="l00439"></a>00439         ++iFileNum;
<a name="l00440"></a>00440         }
<a name="l00441"></a>00441         
<a name="l00446"></a>00446 <span class="keywordtype">void</span> CMMFRecordTest::InitializeDesL()
<a name="l00447"></a>00447         {
<a name="l00448"></a>00448         Printf(_L(<span class="stringliteral">&quot;call: OpenDesL(buf, %x, %x, %x)&quot;</span>), iControllerUid, KNullUid, iDestinationFormatUid);
<a name="l00449"></a>00449         iState = EInitDesc;
<a name="l00450"></a>00450         iRecorder-&gt;OpenDesL(iRecBuf, iControllerUid, KNullUid, iDestinationFormatUid);
<a name="l00451"></a>00451         }
<a name="l00452"></a>00452 
<a name="l00453"></a>00453 
<a name="l00454"></a>00454 
<a name="l00455"></a>00455         
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

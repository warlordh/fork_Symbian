<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/RemoteConn/MtpDataProviderExample/src/mtpdataproviderpluginexample.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/RemoteConn/MtpDataProviderExample/src/mtpdataproviderpluginexample.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2010 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;bautils.h&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;mtp/mmtpconnection.h&gt;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;mtp/mtpprotocolconstants.h&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;mtp/mmtpdataproviderframework.h&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;mtp/mmtpstoragemgr.h&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;mtp/cmtpobjectmetadata.h&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;mtp/mmtpobjectmgr.h&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;mtpdataproviderpluginexample.h&quot;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;mtpexamplerequestprocessor.h&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;cmtpexampledprequestprocessor.h&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;cmtpexampledpconst.h&quot;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="comment">// Class constants.</span>
<a name="l00034"></a>00034 <span class="comment"></span><span class="keyword">static</span> <span class="keyword">const</span> TInt KMTPExampleDpSessionGranualrity = 3;
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00041"></a><a class="code" href="class_c_m_t_p_example_data_provider.html#aa66d6e7d36061e94067741ad4357102a">00041</a> TAny* <a class="code" href="class_c_m_t_p_example_data_provider.html#aa66d6e7d36061e94067741ad4357102a">CMTPExampleDataProvider::NewL</a>(TAny* aParams)
<a name="l00042"></a>00042         {
<a name="l00043"></a>00043         <a class="code" href="class_c_m_t_p_example_data_provider.html">CMTPExampleDataProvider</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_m_t_p_example_data_provider.html">CMTPExampleDataProvider</a>(aParams);
<a name="l00044"></a>00044         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00045"></a>00045         <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00046"></a>00046         CleanupStack::Pop(<span class="keyword">self</span>);
<a name="l00047"></a>00047         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00048"></a>00048         }
<a name="l00049"></a>00049         
<a name="l00054"></a>00054 CMTPExampleDataProvider::CMTPExampleDataProvider(TAny* aParams)
<a name="l00055"></a>00055         :CMTPDataProviderPlugin(aParams),
<a name="l00056"></a>00056         iActiveProcessors(KMTPExampleDpSessionGranualrity),
<a name="l00057"></a>00057     iActiveProcessor(-1)
<a name="l00058"></a>00058         {
<a name="l00059"></a>00059         
<a name="l00060"></a>00060         }
<a name="l00061"></a>00061 
<a name="l00065"></a><a class="code" href="class_c_m_t_p_example_data_provider.html#a349b79ae0bbc918b22b39e0a7ca0efe7">00065</a> <a class="code" href="class_c_m_t_p_example_data_provider.html#a349b79ae0bbc918b22b39e0a7ca0efe7">CMTPExampleDataProvider::~CMTPExampleDataProvider</a>()
<a name="l00066"></a>00066         {
<a name="l00067"></a>00067     TUint count(iActiveProcessors.Count());
<a name="l00068"></a>00068     <span class="keywordflow">while</span> (count--)
<a name="l00069"></a>00069         {
<a name="l00070"></a>00070         iActiveProcessors[count]-&gt;Release();
<a name="l00071"></a>00071         }
<a name="l00072"></a>00072     iActiveProcessors.Close();
<a name="l00073"></a>00073         }
<a name="l00074"></a>00074         
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="keywordtype">void</span> CMTPExampleDataProvider::Cancel()
<a name="l00077"></a>00077         {
<a name="l00078"></a>00078         }
<a name="l00079"></a>00079 
<a name="l00085"></a>00085 <span class="keywordtype">void</span> CMTPExampleDataProvider::Supported(TMTPSupportCategory aCategory, RArray&lt;TUint&gt;&amp; aArray)<span class="keyword"> const</span>
<a name="l00086"></a>00086 <span class="keyword">    </span>{
<a name="l00087"></a>00087     <span class="keywordflow">switch</span> (aCategory) 
<a name="l00088"></a>00088         {        
<a name="l00089"></a>00089         <span class="keywordflow">case</span> EEvents:
<a name="l00090"></a>00090             <span class="keywordflow">break</span>;
<a name="l00091"></a>00091         <span class="keywordflow">case</span> EObjectPlaybackFormats:
<a name="l00092"></a>00092         <span class="keywordflow">case</span> EObjectCaptureFormats:
<a name="l00093"></a>00093             <span class="keywordflow">break</span>;
<a name="l00094"></a>00094         <span class="keywordflow">case</span> EObjectProperties:
<a name="l00095"></a>00095             <span class="keywordflow">break</span>; 
<a name="l00096"></a>00096     
<a name="l00097"></a>00097         <span class="keywordflow">case</span> EOperations:
<a name="l00098"></a>00098             {
<a name="l00099"></a>00099             TInt count(<span class="keyword">sizeof</span>(KMTPExampleDpSupportedOperations) / <span class="keyword">sizeof</span>(KMTPExampleDpSupportedOperations[0]));
<a name="l00100"></a>00100             <span class="keywordflow">for</span> (TInt i(0); (i &lt; count); i++)
<a name="l00101"></a>00101                 {
<a name="l00102"></a>00102                 aArray.Append(KMTPExampleDpSupportedOperations[i]);
<a name="l00103"></a>00103                 }   
<a name="l00104"></a>00104             }
<a name="l00105"></a>00105             <span class="keywordflow">break</span>;  
<a name="l00106"></a>00106    
<a name="l00107"></a>00107         <span class="keywordflow">default</span>:   
<a name="l00108"></a>00108             <span class="keywordflow">break</span>;
<a name="l00109"></a>00109         }
<a name="l00110"></a>00110     }
<a name="l00117"></a>00117 <span class="keywordtype">void</span> CMTPExampleDataProvider::SupportedL(TMTPSupportCategory aCategory, CDesCArray&amp; <span class="comment">/*aStrings*/</span>)<span class="keyword"> const</span>
<a name="l00118"></a>00118 <span class="keyword">        </span>{
<a name="l00119"></a>00119         <span class="keywordflow">switch</span> (aCategory) 
<a name="l00120"></a>00120         {
<a name="l00121"></a>00121         <span class="keywordflow">case</span> EFolderExclusionSets:
<a name="l00122"></a>00122             <span class="keywordflow">break</span>;
<a name="l00123"></a>00123         <span class="keywordflow">case</span> EFormatExtensionSets:
<a name="l00124"></a>00124             <span class="keywordflow">break</span>;
<a name="l00125"></a>00125         <span class="keywordflow">default</span>:
<a name="l00126"></a>00126             <span class="keywordflow">break</span>;
<a name="l00127"></a>00127         }
<a name="l00128"></a>00128         }
<a name="l00129"></a>00129 
<a name="l00133"></a>00133 <span class="keywordtype">void</span> CMTPExampleDataProvider::StartObjectEnumerationL(TUint32 aStorageId)
<a name="l00134"></a>00134     {
<a name="l00135"></a>00135     Framework().ObjectEnumerationCompleteL(aStorageId);
<a name="l00136"></a>00136 
<a name="l00137"></a>00137     }
<a name="l00138"></a>00138     
<a name="l00142"></a>00142 <span class="keywordtype">void</span> CMTPExampleDataProvider::StartStorageEnumerationL()
<a name="l00143"></a>00143     {
<a name="l00144"></a>00144     Framework().StorageEnumerationCompleteL();
<a name="l00145"></a>00145     }
<a name="l00146"></a>00146 
<a name="l00152"></a>00152 <span class="keywordtype">void</span> CMTPExampleDataProvider::ProcessEventL(<span class="keyword">const</span> TMTPTypeEvent&amp; aEvent, MMTPConnection&amp; aConnection)   
<a name="l00153"></a>00153         {
<a name="l00154"></a>00154     TInt idx = LocateRequestProcessorL(aEvent, aConnection);
<a name="l00155"></a>00155 
<a name="l00156"></a>00156     <span class="keywordflow">if</span> (idx != KErrNotFound)
<a name="l00157"></a>00157         {
<a name="l00158"></a>00158         iActiveProcessors[idx]-&gt;HandleEventL(aEvent);
<a name="l00159"></a>00159         }
<a name="l00160"></a>00160         }
<a name="l00161"></a>00161 
<a name="l00167"></a>00167 <span class="keywordtype">void</span> CMTPExampleDataProvider::ProcessNotificationL(TMTPNotification aNotification, <span class="keyword">const</span> TAny* aParams)
<a name="l00168"></a>00168     {
<a name="l00169"></a>00169     <span class="keywordflow">switch</span> (aNotification)
<a name="l00170"></a>00170         {
<a name="l00171"></a>00171     <span class="keywordflow">case</span> EMTPSessionClosed:
<a name="l00172"></a>00172         SessionClosedL(*reinterpret_cast&lt;const TMTPNotificationParamsSessionChange*&gt;(aParams));
<a name="l00173"></a>00173         <span class="keywordflow">break</span>;
<a name="l00174"></a>00174         
<a name="l00175"></a>00175     <span class="keywordflow">case</span> EMTPSessionOpened:
<a name="l00176"></a>00176         SessionOpenedL(*reinterpret_cast&lt;const TMTPNotificationParamsSessionChange*&gt;(aParams));
<a name="l00177"></a>00177         <span class="keywordflow">break</span>;
<a name="l00178"></a>00178         
<a name="l00179"></a>00179     <span class="keywordflow">default</span>:
<a name="l00180"></a>00180         <span class="comment">// Ignore all other notifications.</span>
<a name="l00181"></a>00181         <span class="keywordflow">break</span>;
<a name="l00182"></a>00182         }
<a name="l00183"></a>00183     }
<a name="l00184"></a>00184     
<a name="l00191"></a>00191 <span class="keywordtype">void</span> CMTPExampleDataProvider::ProcessRequestPhaseL(TMTPTransactionPhase aPhase, <span class="keyword">const</span> TMTPTypeRequest&amp; aRequest, MMTPConnection&amp; aConnection)
<a name="l00192"></a>00192         {
<a name="l00193"></a>00193     <span class="comment">//Check if the request is handled.</span>
<a name="l00194"></a>00194     TInt idx(LocateRequestProcessorL(aRequest, aConnection));
<a name="l00195"></a>00195     <a class="code" href="class_m_m_t_p_example_dp_request_processor.html">MMTPExampleDpRequestProcessor</a>* processor(iActiveProcessors[idx]);
<a name="l00196"></a>00196     <span class="comment">//Handle the request</span>
<a name="l00197"></a>00197     TBool result(processor-&gt;HandleRequestL(aRequest, aPhase));
<a name="l00198"></a>00198     <span class="keywordflow">if</span> (result)    <span class="comment">//destroy the processor</span>
<a name="l00199"></a>00199         {
<a name="l00200"></a>00200         processor-&gt;Release();
<a name="l00201"></a>00201         iActiveProcessors.Remove(idx);
<a name="l00202"></a>00202         }
<a name="l00203"></a>00203         }
<a name="l00204"></a>00204 
<a name="l00210"></a>00210 <span class="keywordtype">void</span> CMTPExampleDataProvider::SessionClosedL(<span class="keyword">const</span> TMTPNotificationParamsSessionChange&amp; aSession)       
<a name="l00211"></a>00211         {
<a name="l00212"></a>00212     TInt count = iActiveProcessors.Count();
<a name="l00213"></a>00213     <span class="keywordflow">while</span>(count--)
<a name="l00214"></a>00214         {
<a name="l00215"></a>00215         <a class="code" href="class_m_m_t_p_example_dp_request_processor.html">MMTPExampleDpRequestProcessor</a>* processor = iActiveProcessors[count];
<a name="l00216"></a>00216         TUint32 sessionId = processor-&gt;SessionId();
<a name="l00217"></a>00217         <span class="keywordflow">if</span>((sessionId == aSession.iMTPId) &amp;&amp; (processor-&gt;Connection().ConnectionId() == aSession.iConnection.ConnectionId()))
<a name="l00218"></a>00218             {
<a name="l00219"></a>00219             iActiveProcessors.Remove(count);
<a name="l00220"></a>00220             <span class="keywordflow">if</span> (count == iActiveProcessor)
<a name="l00221"></a>00221                 {
<a name="l00222"></a>00222                 iActiveProcessorRemoved = ETrue;
<a name="l00223"></a>00223                 }
<a name="l00224"></a>00224             <span class="keywordflow">else</span>
<a name="l00225"></a>00225                 {
<a name="l00226"></a>00226                 processor-&gt;Release();
<a name="l00227"></a>00227                 }
<a name="l00228"></a>00228             }
<a name="l00229"></a>00229         } 
<a name="l00230"></a>00230         }
<a name="l00231"></a>00231 
<a name="l00237"></a>00237 <span class="keywordtype">void</span> CMTPExampleDataProvider::SessionOpenedL(<span class="keyword">const</span> TMTPNotificationParamsSessionChange&amp; <span class="comment">/*aSession*/</span>)   
<a name="l00238"></a>00238         {
<a name="l00239"></a>00239         }
<a name="l00240"></a>00240         
<a name="l00246"></a>00246 TAny* CMTPExampleDataProvider::GetExtendedInterface(TUid <span class="comment">/*aInterfaceUid*/</span>)     
<a name="l00247"></a>00247         {
<a name="l00248"></a>00248         <span class="keywordflow">return</span> NULL;
<a name="l00249"></a>00249         }
<a name="l00250"></a>00250 
<a name="l00254"></a>00254 <span class="keywordtype">void</span> CMTPExampleDataProvider::ConstructL()      
<a name="l00255"></a>00255         {
<a name="l00256"></a>00256 
<a name="l00257"></a>00257       
<a name="l00258"></a>00258         }
<a name="l00259"></a>00259 
<a name="l00267"></a>00267 TInt CMTPExampleDataProvider::LocateRequestProcessorL(<span class="keyword">const</span> TMTPTypeRequest&amp; aRequest, MMTPConnection&amp; aConnection)
<a name="l00268"></a>00268         {
<a name="l00269"></a>00269     TInt idx(KErrNotFound);
<a name="l00270"></a>00270     <span class="comment">//Get the Count of the request supported.</span>
<a name="l00271"></a>00271     TInt count(iActiveProcessors.Count());
<a name="l00272"></a>00272     <span class="comment">//Not found create and then append to the array.</span>
<a name="l00273"></a>00273     <span class="keywordflow">if</span> (idx == KErrNotFound)
<a name="l00274"></a>00274         {
<a name="l00275"></a>00275         <a class="code" href="class_m_m_t_p_example_dp_request_processor.html">MMTPExampleDpRequestProcessor</a>* processor = <a class="code" href="class_m_t_p_example_dp_processor.html#a33c3d4f26f43a5d32bb1da80be66aa17">MTPExampleDpProcessor::CreateL</a>
<a name="l00276"></a>00276                                                  (Framework(), aRequest, aConnection);
<a name="l00277"></a>00277         CleanupReleasePushL(*processor);
<a name="l00278"></a>00278         iActiveProcessors.AppendL(processor);
<a name="l00279"></a>00279         CleanupStack::Pop(processor);
<a name="l00280"></a>00280         idx = count;
<a name="l00281"></a>00281         }
<a name="l00282"></a>00282     <span class="keywordflow">return</span> idx;
<a name="l00283"></a>00283         }
<a name="l00284"></a>00284 
<a name="l00293"></a>00293 TInt CMTPExampleDataProvider::LocateRequestProcessorL(<span class="keyword">const</span> TMTPTypeEvent&amp; aEvent, MMTPConnection&amp; aConnection)
<a name="l00294"></a>00294         {
<a name="l00295"></a>00295     TInt idx(KErrNotFound);
<a name="l00296"></a>00296     TInt count(iActiveProcessors.Count());
<a name="l00297"></a>00297     <span class="keywordflow">for</span> (TInt i(0); (i &lt; count); i++)
<a name="l00298"></a>00298         {
<a name="l00299"></a>00299         <span class="keywordflow">if</span> (iActiveProcessors[i]-&gt;Match(aEvent, aConnection))
<a name="l00300"></a>00300             {
<a name="l00301"></a>00301             idx = i;
<a name="l00302"></a>00302             <span class="keywordflow">break</span>;
<a name="l00303"></a>00303             }
<a name="l00304"></a>00304         }    
<a name="l00305"></a>00305     <span class="keywordflow">return</span> idx;   
<a name="l00306"></a>00306         }
<a name="l00307"></a>00307         
<a name="l00308"></a>00308         
<a name="l00309"></a>00309 
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Base/MemMan/Cleanup/TAnyRObjects2/TAnyRObjects2.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Base/MemMan/Cleanup/TAnyRObjects2/TAnyRObjects2.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2000-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// AIM: To provide examples for the documentation of exceptions &amp; traps</span>
<a name="l00015"></a>00015 <span class="comment">// Situation3 - examples of cleanup-stack support for TAny* and RItems</span>
<a name="l00016"></a>00016 <span class="comment">//</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;CommonFramework.h&quot;</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">// Name of file to be used</span>
<a name="l00022"></a>00022 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFileName,<span class="stringliteral">&quot;TAnyandRObjects2.dat&quot;</span>);
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="comment">// Test data to be put into the file.</span>
<a name="l00025"></a>00025 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTestData,<span class="stringliteral">&quot;Test data for TAnyandRObjects2\n&quot;</span>);
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="comment">// #include specific files</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;f32file.h&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;EUHEXDMP.H&quot;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 
<a name="l00033"></a>00033 <span class="comment">//</span>
<a name="l00034"></a>00034 <span class="comment">// -----&gt;  RFileWithCleanup(definition)</span>
<a name="l00035"></a>00035 <span class="comment">//</span>
<a name="l00036"></a>00036 <span class="comment">// Function Cleanup() and operator TCleanupItem() needed to provide </span>
<a name="l00037"></a>00037 <span class="comment">// Cleanup Stack for RFile</span>
<a name="l00038"></a>00038 <span class="comment">//</span>
<a name="l00040"></a>00040 <span class="comment"></span><span class="keyword">class </span>RFileWithCleanup : <span class="keyword">public</span> RFile
<a name="l00041"></a>00041         {
<a name="l00042"></a>00042 <span class="keyword">private</span>:
<a name="l00043"></a>00043         <span class="keyword">static</span> <span class="keywordtype">void</span> Cleanup(TAny *aPtr);
<a name="l00044"></a>00044 <span class="keyword">public</span>:
<a name="l00045"></a>00045         operator TCleanupItem();
<a name="l00046"></a>00046 <span class="keyword">public</span>:
<a name="l00047"></a>00047         <span class="keywordtype">void</span> OpenL(RFs &amp;aFs,<span class="keyword">const</span> TDesC &amp;aName,TUint aMode);
<a name="l00048"></a>00048         <span class="keywordtype">void</span> OpenLC(RFs &amp;aFs,<span class="keyword">const</span> TDesC &amp;aName,TUint aMode);
<a name="l00049"></a>00049         };
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00053"></a>00053 <span class="comment">//</span>
<a name="l00054"></a>00054 <span class="comment">// -----&gt;  RFileWithCleanup(implementation)</span>
<a name="l00055"></a>00055 <span class="comment">//</span>
<a name="l00057"></a>00057 <span class="comment"></span><span class="keywordtype">void</span> RFileWithCleanup::Cleanup(TAny *aPtr)
<a name="l00058"></a>00058         {
<a name="l00059"></a>00059         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgDoingCleanup,<span class="stringliteral">&quot;Doing cleanup of file.\n&quot;</span>);
<a name="l00060"></a>00060         console-&gt;Printf(KMsgDoingCleanup);                                              
<a name="l00061"></a>00061           <span class="comment">// Invoke the Close member on the RItem at aPtr</span>
<a name="l00062"></a>00062         ((RFileWithCleanup *)aPtr)-&gt;Close();
<a name="l00063"></a>00063         }
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 RFileWithCleanup::operator TCleanupItem()
<a name="l00066"></a>00066         {
<a name="l00067"></a>00067         <span class="keywordflow">return</span> TCleanupItem(Cleanup,<span class="keyword">this</span>);
<a name="l00068"></a>00068         }
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="keywordtype">void</span> RFileWithCleanup::OpenL(RFs &amp;aFs,<span class="keyword">const</span> TDesC &amp;aName,TUint aMode)
<a name="l00071"></a>00071         {
<a name="l00072"></a>00072         User::LeaveIfError(RFile::Open(aFs,aName,aMode));
<a name="l00073"></a>00073         }
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="keywordtype">void</span> RFileWithCleanup::OpenLC(RFs &amp;aFs,<span class="keyword">const</span> TDesC &amp;aName,TUint aMode)
<a name="l00076"></a>00076         {
<a name="l00077"></a>00077         OpenL(aFs,aName,aMode);
<a name="l00078"></a>00078         CleanupStack::PushL(*<span class="keyword">this</span>);     <span class="comment">// NB. &#39;this&#39; would have been a TAny*</span>
<a name="l00079"></a>00079         }
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 LOCAL_C <span class="keywordtype">void</span> createDataFileL()
<a name="l00082"></a>00082         {
<a name="l00083"></a>00083           <span class="comment">// utility function to create some data which we can later read</span>
<a name="l00084"></a>00084         RFs createFileSession;
<a name="l00085"></a>00085         RFileWithCleanup createFile;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087       <span class="comment">// connect to filserver session           </span>
<a name="l00088"></a>00088         User::LeaveIfError(createFileSession.Connect());
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 
<a name="l00091"></a>00091           <span class="comment">// create the private directory</span>
<a name="l00092"></a>00092           <span class="comment">// on the writable drive</span>
<a name="l00093"></a>00093           <span class="comment">// i.e. &quot;\private\0FFFFF01\&quot;</span>
<a name="l00094"></a>00094           <span class="comment">// Note that the number 0FFFFF01 is the </span>
<a name="l00095"></a>00095           <span class="comment">// process security id taken from the 2nd UID</span>
<a name="l00096"></a>00096           <span class="comment">// specified in the mmp file.</span>
<a name="l00097"></a>00097     createFileSession.CreatePrivatePath(RFs::GetSystemDrive());
<a name="l00098"></a>00098     
<a name="l00099"></a>00099       <span class="comment">// Set the session path to</span>
<a name="l00100"></a>00100       <span class="comment">// this private directory on writable drive</span>
<a name="l00101"></a>00101     createFileSession.SetSessionToPrivate(RFs::GetSystemDrive());
<a name="l00102"></a>00102 
<a name="l00103"></a>00103           <span class="comment">// create TAnyandRObjects2.dat and open for writing</span>
<a name="l00104"></a>00104         User::LeaveIfError(createFile.Replace(createFileSession,
<a name="l00105"></a>00105                                                   KFileName,
<a name="l00106"></a>00106                                                               EFileWrite|EFileStreamText));
<a name="l00107"></a>00107 
<a name="l00108"></a>00108       <span class="comment">// Note that Write() requires a TDesC8</span>
<a name="l00109"></a>00109           <span class="comment">// type so we need to construct an explicit</span>
<a name="l00110"></a>00110           <span class="comment">// TDesC8 type to represent the data contained</span>
<a name="l00111"></a>00111           <span class="comment">// in the standard (16-bit) descriptor.</span>
<a name="l00112"></a>00112         TPtrC8 representation((TUint8*)(&amp;KTestData)-&gt;Ptr(), (&amp;KTestData)-&gt;Size());
<a name="l00113"></a>00113 
<a name="l00114"></a>00114           <span class="comment">// write and commit text</span>
<a name="l00115"></a>00115         User::LeaveIfError(createFile.Write(representation));
<a name="l00116"></a>00116         User::LeaveIfError(createFile.Flush());
<a name="l00117"></a>00117         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgDataWritten,<span class="stringliteral">&quot;Data written to file\n&quot;</span>);
<a name="l00118"></a>00118         console-&gt;Printf(KMsgDataWritten);
<a name="l00119"></a>00119 
<a name="l00120"></a>00120           <span class="comment">// close file and session</span>
<a name="l00121"></a>00121           <span class="comment">// (NB. no LeaveIfError due to RFile.close and </span>
<a name="l00122"></a>00122           <span class="comment">// RFs.close guaranteed to complete)</span>
<a name="l00123"></a>00123         createFile.Close();                           <span class="comment">// close file</span>
<a name="l00124"></a>00124         createFileSession.Close();                    <span class="comment">// close file server session</span>
<a name="l00125"></a>00125         }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 <span class="keywordtype">void</span> useBufferL(TPtr8&amp; bufferPtr)
<a name="l00128"></a>00128         {
<a name="l00129"></a>00129         printBuffer(0,bufferPtr);
<a name="l00130"></a>00130           <span class="comment">// Remove following comment to force a leave</span>
<a name="l00131"></a>00131           <span class="comment">// while using the buffer</span>
<a name="l00132"></a>00132         <span class="comment">//User::Leave(KErrGeneral);</span>
<a name="l00133"></a>00133         }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 LOCAL_C <span class="keywordtype">void</span> doExampleL()
<a name="l00137"></a>00137     {
<a name="l00138"></a>00138                                 <span class="comment">// create the datafile for the example</span>
<a name="l00139"></a>00139         createDataFileL();
<a name="l00140"></a>00140                         
<a name="l00141"></a>00141                                 <span class="comment">// create a simple buffer. In real code, you</span>
<a name="l00142"></a>00142                                 <span class="comment">// would probably use an HBufC*, or an RBuf.</span>
<a name="l00143"></a>00143                                 <span class="comment">// You could also use a TBuf on the stack if it&#39;s small.</span>
<a name="l00144"></a>00144         TText8* buffer=(TText8*) User::Alloc(100*<span class="keyword">sizeof</span>(TText8));
<a name="l00145"></a>00145 
<a name="l00146"></a>00146                                 <span class="comment">// push it to the cleanup stack: treated as TAny*</span>
<a name="l00147"></a>00147         CleanupStack::PushL(buffer);
<a name="l00148"></a>00148         
<a name="l00149"></a>00149                                 <span class="comment">// create a pointer to the buffer</span>
<a name="l00150"></a>00150         TPtr8 bufferPtr(buffer,100);
<a name="l00151"></a>00151         
<a name="l00152"></a>00152                                 <span class="comment">// the file session to be used</span>
<a name="l00153"></a>00153         RFs fsSession;
<a name="l00154"></a>00154         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgOpeningSession,<span class="stringliteral">&quot;Opening session\n&quot;</span>);
<a name="l00155"></a>00155         console-&gt;Printf(KMsgOpeningSession);
<a name="l00156"></a>00156         
<a name="l00157"></a>00157                                 <span class="comment">// open the file-server session</span>
<a name="l00158"></a>00158         User::LeaveIfError(fsSession.Connect());
<a name="l00159"></a>00159         
<a name="l00160"></a>00160                                 <span class="comment">// the file instance myFile</span>
<a name="l00161"></a>00161         RFileWithCleanup myFile;
<a name="l00162"></a>00162         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgOpeningFile,<span class="stringliteral">&quot;Opening file\n&quot;</span>);
<a name="l00163"></a>00163         console-&gt;Printf(KMsgOpeningFile);
<a name="l00164"></a>00164         
<a name="l00165"></a>00165                         <span class="comment">// open the file (and leave on cleanup stack)</span>
<a name="l00166"></a>00166         myFile.OpenLC(fsSession,KFileName,EFileStreamText|EFileRead);   
<a name="l00167"></a>00167         
<a name="l00168"></a>00168                                 <span class="comment">// read stuff from the file to the buffer (may leave)</span>
<a name="l00169"></a>00169         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgReadingFile,<span class="stringliteral">&quot;Reading file into buffer.\n&quot;</span>);
<a name="l00170"></a>00170         console-&gt;Printf(KMsgReadingFile);
<a name="l00171"></a>00171         User::LeaveIfError(myFile.Read(bufferPtr));
<a name="l00172"></a>00172       <span class="comment">// Remove following comment to force a leave</span>
<a name="l00173"></a>00173           <span class="comment">// while using the file</span>
<a name="l00174"></a>00174         <span class="comment">//User::Leave(KErrGeneral);</span>
<a name="l00175"></a>00175 
<a name="l00176"></a>00176                                 <span class="comment">// destroy the file on the cleanup stack</span>
<a name="l00177"></a>00177         CleanupStack::PopAndDestroy();          
<a name="l00178"></a>00178 
<a name="l00179"></a>00179         fsSession.Close();
<a name="l00180"></a>00180 
<a name="l00181"></a>00181                                 <span class="comment">// use the buffer</span>
<a name="l00182"></a>00182         useBufferL(bufferPtr);
<a name="l00183"></a>00183                                 <span class="comment">// destroy the buffer on the cleanup stack</span>
<a name="l00184"></a>00184         CleanupStack::PopAndDestroy();          
<a name="l00185"></a>00185         }
<a name="l00186"></a>00186 
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

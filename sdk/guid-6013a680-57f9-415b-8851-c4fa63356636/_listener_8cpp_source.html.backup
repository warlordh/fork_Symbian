<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/ForumNokia/BluetoothPMPExample/src/Listener.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/ForumNokia/BluetoothPMPExample/src/Listener.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright © 2009 Nokia Corporation.</span>
<a name="l00003"></a>00003 <span class="comment"> */</span>
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 <span class="comment">// INCLUDE FILES</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &quot;Listener.h&quot;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &quot;BluetoothPMPExampleApp.h&quot;</span>
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 
<a name="l00010"></a><a class="code" href="class_c_listener.html#ad5bda32af6be0c04ab0550c2eef0f61a">00010</a> <a class="code" href="class_c_listener.html">CListener</a>* <a class="code" href="class_c_listener.html#ad5bda32af6be0c04ab0550c2eef0f61a">CListener::NewL</a>(<a class="code" href="class_m_listener_observer.html">MListenerObserver</a>&amp; aObserver, 
<a name="l00011"></a>00011                            RSocketServ&amp; aSocketServ)
<a name="l00012"></a>00012     {
<a name="l00013"></a>00013     <a class="code" href="class_c_listener.html">CListener</a>* <span class="keyword">self</span> = <a class="code" href="class_c_listener.html#afa0b1916e829a728911a95aa41669200">CListener::NewLC</a>(aObserver, aSocketServ);
<a name="l00014"></a>00014     CleanupStack::Pop(<span class="keyword">self</span>);
<a name="l00015"></a>00015     <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00016"></a>00016     }
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 
<a name="l00019"></a><a class="code" href="class_c_listener.html#afa0b1916e829a728911a95aa41669200">00019</a> <a class="code" href="class_c_listener.html">CListener</a>* <a class="code" href="class_c_listener.html#afa0b1916e829a728911a95aa41669200">CListener::NewLC</a>(<a class="code" href="class_m_listener_observer.html">MListenerObserver</a>&amp; aObserver,
<a name="l00020"></a>00020                             RSocketServ&amp; aSocketServ)
<a name="l00021"></a>00021     {
<a name="l00022"></a>00022     <a class="code" href="class_c_listener.html">CListener</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_listener.html">CListener</a>(aObserver, aSocketServ);
<a name="l00023"></a>00023     CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00024"></a>00024     <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00025"></a>00025     <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00026"></a>00026     }
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="keywordtype">void</span> CListener::ConstructL()
<a name="l00030"></a>00030     {
<a name="l00031"></a>00031     }
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00035"></a>00035 <span class="comment">// CListener::CListener(MListernetObserver* aObserver,</span>
<a name="l00036"></a>00036 <span class="comment">//                      RSocketServ *aSocketServ)</span>
<a name="l00037"></a>00037 <span class="comment">//</span>
<a name="l00038"></a>00038 <span class="comment">// constructor</span>
<a name="l00039"></a>00039 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00040"></a>00040 CListener::CListener(<a class="code" href="class_m_listener_observer.html">MListenerObserver</a>&amp; aObserver, 
<a name="l00041"></a>00041                      RSocketServ&amp; aSocketServ):
<a name="l00042"></a>00042     CActive(CActive::EPriorityStandard),
<a name="l00043"></a>00043     iObserver(aObserver),
<a name="l00044"></a>00044     iSocketServ(aSocketServ),
<a name="l00045"></a>00045     iIsConnected(EFalse),
<a name="l00046"></a>00046     iState(ENone)
<a name="l00047"></a>00047     {
<a name="l00048"></a>00048     CActiveScheduler::Add(<span class="keyword">this</span>);
<a name="l00049"></a>00049     }
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00053"></a>00053 <span class="comment">// CListener::~CListener()</span>
<a name="l00054"></a>00054 <span class="comment">//</span>
<a name="l00055"></a>00055 <span class="comment">// destructor</span>
<a name="l00056"></a>00056 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00057"></a><a class="code" href="class_c_listener.html#a3b683a4704ee1582bf8a9832a19377a2">00057</a> <a class="code" href="class_c_listener.html#a3b683a4704ee1582bf8a9832a19377a2">CListener::~CListener</a>()
<a name="l00058"></a>00058     {
<a name="l00059"></a>00059     <span class="comment">// cancel active object</span>
<a name="l00060"></a>00060     Cancel();
<a name="l00061"></a>00061     <span class="comment">// close sockets</span>
<a name="l00062"></a>00062     <a class="code" href="class_c_listener.html#a0e61bc07e3817ba26d45ea21f0e1b445">StopListener</a>();
<a name="l00063"></a>00063     }
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00067"></a>00067 <span class="comment">// CListener::StartListenerL()</span>
<a name="l00068"></a>00068 <span class="comment">//</span>
<a name="l00069"></a>00069 <span class="comment">// start listener.  listener will open a listening socket on a channel (port)</span>
<a name="l00070"></a>00070 <span class="comment">// gotten from GetOpt() call.  </span>
<a name="l00071"></a>00071 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00072"></a><a class="code" href="class_c_listener.html#a4e5f34e32cb42629abb254387b5d56d8">00072</a> <span class="keywordtype">void</span> <a class="code" href="class_c_listener.html#a4e5f34e32cb42629abb254387b5d56d8">CListener::StartListenerL</a>(TInt&amp; aChannel)
<a name="l00073"></a>00073     {
<a name="l00074"></a>00074     <span class="comment">// get out if we&#39;re already running..</span>
<a name="l00075"></a>00075     <span class="keywordflow">if</span> ( iState!=ENone )
<a name="l00076"></a>00076         {
<a name="l00077"></a>00077         User::Leave(KErrInUse);
<a name="l00078"></a>00078         }
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     <span class="comment">// set this active object to connecting state</span>
<a name="l00081"></a>00081     iState=EConnecting;
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     <span class="comment">// load protocol, RFCOMM</span>
<a name="l00084"></a>00084     TProtocolDesc pdesc;
<a name="l00085"></a>00085     User::LeaveIfError(iSocketServ.FindProtocol(KRfComm(), pdesc));
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     <span class="comment">// open a socket</span>
<a name="l00088"></a>00088     User::LeaveIfError(
<a name="l00089"></a>00089         iListenSock.Open(iSocketServ,
<a name="l00090"></a>00090         pdesc.iAddrFamily,pdesc.iSockType,KRFCOMM)
<a name="l00091"></a>00091         );
<a name="l00092"></a>00092 
<a name="l00093"></a>00093     <span class="comment">// get listening channel</span>
<a name="l00094"></a>00094     User::LeaveIfError(iListenSock.GetOpt(KRFCOMMGetAvailableServerChannel, 
<a name="l00095"></a>00095         KSolBtRFCOMM, aChannel));
<a name="l00096"></a>00096     
<a name="l00097"></a>00097     <span class="comment">// bluetooth socket address object</span>
<a name="l00098"></a>00098     TBTSockAddr btsockaddr;
<a name="l00099"></a>00099     btsockaddr.SetPort(aChannel);
<a name="l00100"></a>00100     <span class="comment">// bind socket</span>
<a name="l00101"></a>00101     User::LeaveIfError(iListenSock.Bind(btsockaddr));
<a name="l00102"></a>00102     <span class="comment">// listen on port</span>
<a name="l00103"></a>00103     iListenSock.Listen(KSizeOfListenQueue);
<a name="l00104"></a>00104     
<a name="l00105"></a>00105     <span class="comment">//now set security</span>
<a name="l00106"></a>00106     
<a name="l00107"></a>00107     <span class="comment">//old way to set security is in Listener.cpp</span>
<a name="l00108"></a>00108     <span class="comment">//CListener::SetSecurityL(TInt aChannel)</span>
<a name="l00109"></a>00109     TBTServiceSecurity secSettings;    
<a name="l00110"></a>00110     
<a name="l00111"></a>00111     TUid settingsUID;
<a name="l00112"></a>00112     settingsUID.iUid = KBT_serviceID;
<a name="l00113"></a>00113     secSettings.SetUid(settingsUID);
<a name="l00114"></a>00114     <span class="comment">//the old way involved the following two steps:</span>
<a name="l00115"></a>00115     <span class="comment">//secSettings.SetChannelID(aChannel);</span>
<a name="l00116"></a>00116     <span class="comment">//secSettings.SetProtocolID(KSolBtRFCOMM);</span>
<a name="l00117"></a>00117     secSettings.SetAuthentication(EFalse);
<a name="l00118"></a>00118     secSettings.SetAuthorisation(EFalse);
<a name="l00119"></a>00119     secSettings.SetEncryption(EFalse);
<a name="l00120"></a>00120     
<a name="l00121"></a>00121     <span class="comment">// attach the security settings.</span>
<a name="l00122"></a>00122     btsockaddr.SetSecurity(secSettings);
<a name="l00123"></a>00123 
<a name="l00124"></a>00124     <span class="comment">// close old accepted socket if open</span>
<a name="l00125"></a>00125     iSock.Close();
<a name="l00126"></a>00126 
<a name="l00127"></a>00127     <span class="comment">// open blank socket and pass it to accept to be assigned a proper</span>
<a name="l00128"></a>00128     <span class="comment">// socket upon completion of Accept()</span>
<a name="l00129"></a>00129     User::LeaveIfError(iSock.Open(iSocketServ));
<a name="l00130"></a>00130 
<a name="l00131"></a>00131     <span class="comment">// set to accept incoming connections, active object will handle</span>
<a name="l00132"></a>00132     iListenSock.Accept(iSock,iStatus);
<a name="l00133"></a>00133     SetActive();
<a name="l00134"></a>00134     }
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00138"></a>00138 <span class="comment">// CListener::SetSecurityL(TInt aChannel)</span>
<a name="l00139"></a>00139 <span class="comment">//</span>
<a name="l00140"></a>00140 <span class="comment">// sets the security of given bluetooth channel.  these settings will turn</span>
<a name="l00141"></a>00141 <span class="comment">// off authentication, authorisation and encryption on given channel.</span>
<a name="l00142"></a>00142 <span class="comment">// </span>
<a name="l00143"></a>00143 <span class="comment">// Not supported in 2nd ed. FP2 and newer versions.</span>
<a name="l00144"></a>00144 <span class="comment">// Left here just for comparing.</span>
<a name="l00145"></a>00145 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00146"></a>00146 <span class="keywordtype">void</span> CListener::SetSecurityL(TInt <span class="comment">/*aChannel*/</span>)
<a name="l00147"></a>00147     {
<a name="l00148"></a>00148     <span class="comment">//this is not supported in 2nd ed. FP2 and above:</span>
<a name="l00149"></a>00149     <span class="comment">//setup channel security:</span>
<a name="l00150"></a>00150     <span class="comment">//TRequestStatus status;</span>
<a name="l00151"></a>00151     <span class="comment">//RBTMan secManager;</span>
<a name="l00152"></a>00152 
<a name="l00153"></a>00153     <span class="comment">//RBTSecuritySettings secDatabase;</span>
<a name="l00154"></a>00154     <span class="comment">//TBTServiceSecurity secSettings;</span>
<a name="l00155"></a>00155     <span class="comment">// connect to security manager</span>
<a name="l00156"></a>00156     <span class="comment">//User::LeaveIfError(secManager.Connect());</span>
<a name="l00157"></a>00157     <span class="comment">//CleanupClosePushL(secManager);</span>
<a name="l00158"></a>00158     <span class="comment">//User::LeaveIfError(secDatabase.Open(secManager));</span>
<a name="l00159"></a>00159     <span class="comment">//CleanupClosePushL(secDatabase);</span>
<a name="l00160"></a>00160     <span class="comment">// setup security</span>
<a name="l00161"></a>00161     <span class="comment">//TUid settingsUID;</span>
<a name="l00162"></a>00162     <span class="comment">//settingsUID.iUid = KBT_serviceID;</span>
<a name="l00163"></a>00163     <span class="comment">//secSettings.SetUid(settingsUID);</span>
<a name="l00164"></a>00164     <span class="comment">//secSettings.SetChannelID(aChannel);</span>
<a name="l00165"></a>00165     <span class="comment">//secSettings.SetProtocolID(KSolBtRFCOMM);</span>
<a name="l00166"></a>00166     <span class="comment">//secSettings.SetAuthentication(EFalse);</span>
<a name="l00167"></a>00167     <span class="comment">//secSettings.SetAuthorisation(EFalse);</span>
<a name="l00168"></a>00168     <span class="comment">//secSettings.SetEncryption(EFalse);</span>
<a name="l00169"></a>00169     <span class="comment">// register settings with security</span>
<a name="l00170"></a>00170     <span class="comment">//secDatabase.RegisterService(secSettings, status);</span>
<a name="l00171"></a>00171     <span class="comment">//User::WaitForRequest(status);</span>
<a name="l00172"></a>00172     <span class="comment">//CleanupStack::PopAndDestroy(2,&amp;secManager);//SecDatabase, secManager</span>
<a name="l00173"></a>00173     }
<a name="l00174"></a>00174 
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00177"></a>00177 <span class="comment">// CListener::StopListener()</span>
<a name="l00178"></a>00178 <span class="comment">//</span>
<a name="l00179"></a>00179 <span class="comment">// stops the listener by closing the listening socket</span>
<a name="l00180"></a>00180 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00181"></a><a class="code" href="class_c_listener.html#a0e61bc07e3817ba26d45ea21f0e1b445">00181</a> <span class="keywordtype">void</span> <a class="code" href="class_c_listener.html#a0e61bc07e3817ba26d45ea21f0e1b445">CListener::StopListener</a>()
<a name="l00182"></a>00182     {
<a name="l00183"></a>00183     <span class="comment">// kill sockets</span>
<a name="l00184"></a>00184     <span class="keywordflow">if</span> ( iState!=ENone )
<a name="l00185"></a>00185         {       
<a name="l00186"></a>00186         iSock.Close();
<a name="l00187"></a>00187         iListenSock.Close();
<a name="l00188"></a>00188         iState=ENone;
<a name="l00189"></a>00189         }
<a name="l00190"></a>00190     }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 
<a name="l00193"></a>00193 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00194"></a>00194 <span class="comment">// CListener::ReceiveData()</span>
<a name="l00195"></a>00195 <span class="comment">//</span>
<a name="l00196"></a>00196 <span class="comment">// receive more data from listening socket, asynchronously.  </span>
<a name="l00197"></a>00197 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00198"></a>00198 <span class="keywordtype">void</span> CListener::ReceiveData()
<a name="l00199"></a>00199     {
<a name="l00200"></a>00200     <span class="comment">// set state to waiting - for RunL()</span>
<a name="l00201"></a>00201     iState = EWaiting;
<a name="l00202"></a>00202     <span class="comment">// make async request</span>
<a name="l00203"></a>00203     iSock.RecvOneOrMore(iBuffer, 0, iStatus, iLen);
<a name="l00204"></a>00204     <span class="comment">// set as active to get the async req response (iState) in RunL()</span>
<a name="l00205"></a>00205     SetActive();
<a name="l00206"></a>00206     }
<a name="l00207"></a>00207 
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00210"></a>00210 <span class="comment">// CListener::SendData(const TDesC8&amp; aData)</span>
<a name="l00211"></a>00211 <span class="comment">//</span>
<a name="l00212"></a>00212 <span class="comment">// send data to remote device, write data to socket.</span>
<a name="l00213"></a>00213 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00214"></a><a class="code" href="class_c_listener.html#a98d8907f2a44e7a885bea1d68bc2942d">00214</a> <span class="keywordtype">void</span> <a class="code" href="class_c_listener.html#a98d8907f2a44e7a885bea1d68bc2942d">CListener::SendData</a>(<span class="keyword">const</span> TDesC8&amp; aData)
<a name="l00215"></a>00215     {
<a name="l00216"></a>00216     <span class="keywordflow">if</span> ( iState!=EWaiting )
<a name="l00217"></a>00217         <span class="keywordflow">return</span>;
<a name="l00218"></a>00218     <span class="comment">// cancel any read requests on socket</span>
<a name="l00219"></a>00219     Cancel();
<a name="l00220"></a>00220     <span class="comment">// try to send message by writing to socket</span>
<a name="l00221"></a>00221     <span class="comment">// - set the state of this active object to &quot;sending&quot;</span>
<a name="l00222"></a>00222     iState=ESending;
<a name="l00223"></a>00223     <span class="comment">// - make async socket write request</span>
<a name="l00224"></a>00224     iSock.Write(aData, iStatus);
<a name="l00225"></a>00225     <span class="comment">// - start waiting async req response (iState) from active scheduler</span>
<a name="l00226"></a>00226     SetActive();
<a name="l00227"></a>00227     }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 
<a name="l00230"></a><a class="code" href="class_c_listener.html#ac401ea21ad375cc6da0345fcb8fa1a62">00230</a> <span class="keywordtype">void</span> <a class="code" href="class_c_listener.html#ac401ea21ad375cc6da0345fcb8fa1a62">CListener::RunL</a>()
<a name="l00231"></a>00231     {
<a name="l00232"></a>00232     <span class="keywordflow">if</span> ( iStatus!=KErrNone )
<a name="l00233"></a>00233         {
<a name="l00234"></a>00234         <a class="code" href="class_c_listener.html#a0e61bc07e3817ba26d45ea21f0e1b445">StopListener</a>();
<a name="l00235"></a>00235         HandleListenerDisconnectedL();
<a name="l00236"></a>00236         <span class="keywordflow">return</span>;
<a name="l00237"></a>00237         }
<a name="l00238"></a>00238     
<a name="l00239"></a>00239     <span class="keywordflow">switch</span> (iState)
<a name="l00240"></a>00240         {
<a name="l00241"></a>00241         <span class="keywordflow">case</span> EConnecting:
<a name="l00242"></a>00242             {
<a name="l00243"></a>00243             <span class="comment">// connected listening socket!</span>
<a name="l00244"></a>00244             HandleListenerConnectedL();
<a name="l00245"></a>00245             ReceiveData();
<a name="l00246"></a>00246             <span class="keywordflow">break</span>;
<a name="l00247"></a>00247             }
<a name="l00248"></a>00248         <span class="keywordflow">case</span> EWaiting:
<a name="l00249"></a>00249             {
<a name="l00250"></a>00250             <span class="comment">// returned from receiving data</span>
<a name="l00251"></a>00251             <span class="keywordflow">if</span>(iState!=KErrNone)
<a name="l00252"></a>00252                 {
<a name="l00253"></a>00253                     <span class="comment">// add the error handling / re-reading code here..</span>
<a name="l00254"></a>00254                     <span class="comment">// not needed in this example</span>
<a name="l00255"></a>00255                 }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257             HBufC* text = <a class="code" href="class_c_listener.html#afa0b1916e829a728911a95aa41669200">HBufC::NewLC</a>(iBuffer.Length());
<a name="l00258"></a>00258             text-&gt;Des().Copy(iBuffer);
<a name="l00259"></a>00259             <span class="comment">// observer will handle data</span>
<a name="l00260"></a>00260             HandleListenerDataReceivedL(*text);
<a name="l00261"></a>00261             CleanupStack::PopAndDestroy(text);
<a name="l00262"></a>00262             <span class="comment">// start expecting next data to be read</span>
<a name="l00263"></a>00263             ReceiveData();
<a name="l00264"></a>00264             <span class="keywordflow">break</span>;
<a name="l00265"></a>00265             }
<a name="l00266"></a>00266         <span class="keywordflow">case</span> ESending:
<a name="l00267"></a>00267             {
<a name="l00268"></a>00268             <span class="comment">// returned from sending the date, check the state</span>
<a name="l00269"></a>00269             <span class="keywordflow">if</span>(iState!=KErrNone)
<a name="l00270"></a>00270                 {
<a name="l00271"></a>00271                     <span class="comment">// add the error handling / re-sending code here..</span>
<a name="l00272"></a>00272                     <span class="comment">// not needed in this example</span>
<a name="l00273"></a>00273                 }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275             <span class="comment">// start expecting next data to be read</span>
<a name="l00276"></a>00276             ReceiveData();
<a name="l00277"></a>00277             <span class="keywordflow">break</span>;
<a name="l00278"></a>00278             }
<a name="l00279"></a>00279         <span class="keywordflow">default</span>:
<a name="l00280"></a>00280             <span class="keywordflow">break</span>;
<a name="l00281"></a>00281         }
<a name="l00282"></a>00282     }
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 TInt CListener::RunError(TInt <span class="comment">/*aError*/</span>)
<a name="l00285"></a>00285     {
<a name="l00286"></a>00286     <span class="comment">// add the error handling</span>
<a name="l00287"></a>00287     <span class="keywordflow">return</span> KErrNone;
<a name="l00288"></a>00288     }
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 
<a name="l00291"></a><a class="code" href="class_c_listener.html#a23067cb6f486851b7faf94970d8980a2">00291</a> <span class="keywordtype">void</span> <a class="code" href="class_c_listener.html#a23067cb6f486851b7faf94970d8980a2">CListener::DoCancel</a>()
<a name="l00292"></a>00292     {
<a name="l00293"></a>00293     <span class="comment">// cancel all pending socket operations</span>
<a name="l00294"></a>00294     iSock.CancelAll();
<a name="l00295"></a>00295     iListenSock.CancelAll();
<a name="l00296"></a>00296     }
<a name="l00297"></a>00297 
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00300"></a>00300 <span class="comment">// CListener::IsConnected()</span>
<a name="l00301"></a>00301 <span class="comment">//</span>
<a name="l00302"></a>00302 <span class="comment">// returns true if listener has been connected to</span>
<a name="l00303"></a>00303 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00304"></a><a class="code" href="class_c_listener.html#acc9817ffb901295106d82ed665abff9c">00304</a> TBool <a class="code" href="class_c_listener.html#acc9817ffb901295106d82ed665abff9c">CListener::IsConnected</a>()
<a name="l00305"></a>00305     {
<a name="l00306"></a>00306     <span class="keywordflow">return</span> iIsConnected;
<a name="l00307"></a>00307     }
<a name="l00308"></a>00308 
<a name="l00309"></a>00309 
<a name="l00310"></a>00310 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00311"></a>00311 <span class="comment">// CListener::HandleListenerDataReceivedL(TDesC&amp; aData)</span>
<a name="l00312"></a>00312 <span class="comment">//</span>
<a name="l00313"></a>00313 <span class="comment">// a callback to observer indicating that listener has received data</span>
<a name="l00314"></a>00314 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00315"></a>00315 <span class="keywordtype">void</span> CListener::HandleListenerDataReceivedL(<span class="keyword">const</span> TDesC&amp; aData)
<a name="l00316"></a>00316     {
<a name="l00317"></a>00317     iObserver.<a class="code" href="class_m_listener_observer.html#abb33719cbddfe852456bc0c0043d7786">HandleListenerDataReceivedL</a>(aData);
<a name="l00318"></a>00318     }
<a name="l00319"></a>00319 
<a name="l00320"></a>00320 
<a name="l00321"></a>00321 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00322"></a>00322 <span class="comment">// CListener::HandleListenerConnectedL()</span>
<a name="l00323"></a>00323 <span class="comment">//</span>
<a name="l00324"></a>00324 <span class="comment">// a callback to observer indicating that listener has been connected to</span>
<a name="l00325"></a>00325 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00326"></a>00326 <span class="keywordtype">void</span> CListener::HandleListenerConnectedL()
<a name="l00327"></a>00327     {
<a name="l00328"></a>00328     iIsConnected=ETrue;
<a name="l00329"></a>00329     iObserver.<a class="code" href="class_m_listener_observer.html#a33eb83a098a9f5e984ce83df549360f5">HandleListenerConnectedL</a>();
<a name="l00330"></a>00330     }
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 
<a name="l00333"></a>00333 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00334"></a>00334 <span class="comment">// CListener::HandleListenerDisconnectedL()</span>
<a name="l00335"></a>00335 <span class="comment">//</span>
<a name="l00336"></a>00336 <span class="comment">// a callback to observer indicating that listener has been disconnected</span>
<a name="l00337"></a>00337 <span class="comment">// ----------------------------------------------------------------------------</span>
<a name="l00338"></a>00338 <span class="keywordtype">void</span> CListener::HandleListenerDisconnectedL()
<a name="l00339"></a>00339     {
<a name="l00340"></a>00340     iIsConnected=EFalse;
<a name="l00341"></a>00341     iObserver.<a class="code" href="class_m_listener_observer.html#a39c91b102c81fe03392d0f49d0b2da53">HandleListenerDisconnectedL</a>();
<a name="l00342"></a>00342     }
<a name="l00343"></a>00343 
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

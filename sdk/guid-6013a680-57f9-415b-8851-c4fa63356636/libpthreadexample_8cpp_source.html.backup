<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/PIPS/LibpThreadExample/src/libpthreadexample.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/PIPS/LibpThreadExample/src/libpthreadexample.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2008-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// Include Files  </span>
<a name="l00015"></a>00015 <span class="comment">//</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#include &quot;libpthreadexample.h&quot;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;e32base.h&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;e32std.h&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;e32cons.h&gt;</span>    <span class="comment">// Console</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;pthread.h&gt;</span>    <span class="comment">//Used for all the functions with prefix pthread_</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;f32file.h&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;unistd.h&quot;</span>             <span class="comment">//USed for sleep()</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="comment">//  Constants</span>
<a name="l00026"></a>00026 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTestFile,<span class="stringliteral">&quot;c:\\newfile.txt&quot;</span>);  <span class="comment">//Text file as the shared resource</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">//  Global Variables</span>
<a name="l00029"></a>00029 LOCAL_D CConsoleBase* console; <span class="comment">// Write all messages to this</span>
<a name="l00030"></a>00030 pthread_mutex_t  mutex;  <span class="comment">//mutex </span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="comment">/*</span>
<a name="l00033"></a>00033 <span class="comment"> * This function is the routine for threadOne. It writes &quot;one&quot; in the text file. </span>
<a name="l00034"></a>00034 <span class="comment"> * A mutex is used to avoid race condition amongst the threads  </span>
<a name="l00035"></a>00035 <span class="comment"> */</span>
<a name="l00036"></a>00036 <span class="keywordtype">void</span> *TestFunction1L(<span class="keywordtype">void</span>*)
<a name="l00037"></a>00037         {
<a name="l00038"></a>00038         <span class="comment">// Start a file server session</span>
<a name="l00039"></a>00039         RFs aFs;
<a name="l00040"></a>00040         User::LeaveIfError(aFs.Connect());
<a name="l00041"></a>00041         
<a name="l00042"></a>00042         RFile file;
<a name="l00043"></a>00043         pthread_mutex_lock(&amp;mutex);    <span class="comment">//Lock the mutex for threadone. </span>
<a name="l00044"></a>00044         TInt pos = 0;      
<a name="l00045"></a>00045         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;5; i++)                  
<a name="l00046"></a>00046                 {
<a name="l00047"></a>00047                         <span class="comment">//Push the file object on the cleanup stack before doing any file operation which could leave. </span>
<a name="l00048"></a>00048                         CleanupClosePushL(file); 
<a name="l00049"></a>00049                         file.Open(aFs,KTestFile,EFileRead|EFileWrite);
<a name="l00050"></a>00050         
<a name="l00051"></a>00051                         _LIT8(KWriteBuf,<span class="stringliteral">&quot;One, \n&quot;</span>);
<a name="l00052"></a>00052                         file.Seek(ESeekEnd, pos );
<a name="l00053"></a>00053                         file.Write(pos ,KWriteBuf);
<a name="l00054"></a>00054                         CleanupStack::PopAndDestroy(&amp;file);
<a name="l00055"></a>00055                         file.Close();
<a name="l00056"></a>00056                         User::After(1000000);                   <span class="comment">//Wait for 0.1 s to ensure a visible interthreading mechanism</span>
<a name="l00057"></a>00057                 }
<a name="l00058"></a>00058                 aFs.Close();
<a name="l00059"></a>00059                 pthread_mutex_unlock(&amp;mutex);   <span class="comment">//Release the mutex . </span>
<a name="l00060"></a>00060                 <span class="keywordflow">return</span> NULL;
<a name="l00061"></a>00061         }
<a name="l00062"></a>00062         
<a name="l00063"></a>00063 <span class="comment">/*</span>
<a name="l00064"></a>00064 <span class="comment"> * This function is the routine for threadTwo. It writes &quot;two&quot; in the text file. </span>
<a name="l00065"></a>00065 <span class="comment"> * A mutex is used to avoid race condition amongst the threads  </span>
<a name="l00066"></a>00066 <span class="comment"> */</span>
<a name="l00067"></a>00067 <span class="keywordtype">void</span> *TestFunction2L(<span class="keywordtype">void</span>*)
<a name="l00068"></a>00068         {
<a name="l00069"></a>00069         <span class="comment">// Start a file server session</span>
<a name="l00070"></a>00070         RFs aFs;        
<a name="l00071"></a>00071         User::LeaveIfError(aFs.Connect());
<a name="l00072"></a>00072         
<a name="l00073"></a>00073         RFile file;             
<a name="l00074"></a>00074         pthread_mutex_lock(&amp;mutex); <span class="comment">//Lock the mutex for threadone. </span>
<a name="l00075"></a>00075         TInt pos = 0;
<a name="l00076"></a>00076         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;5; i++)
<a name="l00077"></a>00077                 {
<a name="l00078"></a>00078                         <span class="comment">//Push the file object on the cleanup stack before doing any file operation which could leave. </span>
<a name="l00079"></a>00079                         CleanupClosePushL(file); 
<a name="l00080"></a>00080                         file.Open(aFs, KTestFile, EFileRead|EFileWrite);
<a name="l00081"></a>00081                         
<a name="l00082"></a>00082                         _LIT8(KWriteBuf, <span class="stringliteral">&quot;Two, \n&quot;</span>);
<a name="l00083"></a>00083                         file.Seek(ESeekEnd, pos );
<a name="l00084"></a>00084                         file.Write(pos, KWriteBuf);
<a name="l00085"></a>00085                         CleanupStack::PopAndDestroy(&amp;file);
<a name="l00086"></a>00086                         file.Close();
<a name="l00087"></a>00087                         User::After(1000000); <span class="comment">//Wait for 0.1 s to ensure a visible interthreading mechanism</span>
<a name="l00088"></a>00088                 }       
<a name="l00089"></a>00089         aFs.Close();
<a name="l00090"></a>00090         pthread_mutex_unlock(&amp;mutex);
<a name="l00091"></a>00091         <span class="keywordflow">return</span> NULL;
<a name="l00092"></a>00092         }
<a name="l00093"></a>00093         
<a name="l00094"></a>00094 <span class="comment">/*</span>
<a name="l00095"></a>00095 <span class="comment"> * This function is the routine for threadThree. It writes &quot;three&quot; in the text file. </span>
<a name="l00096"></a>00096 <span class="comment"> * A mutex is used to avoid race condition amongst the threads  </span>
<a name="l00097"></a>00097 <span class="comment"> */</span>
<a name="l00098"></a>00098 <span class="keywordtype">void</span> *TestFunction3L(<span class="keywordtype">void</span>*)
<a name="l00099"></a>00099         {
<a name="l00100"></a>00100         <span class="comment">// Start a file server session</span>
<a name="l00101"></a>00101         RFs aFs;
<a name="l00102"></a>00102         User::LeaveIfError(aFs.Connect());
<a name="l00103"></a>00103         
<a name="l00104"></a>00104         RFile file;
<a name="l00105"></a>00105         pthread_mutex_lock(&amp;mutex);
<a name="l00106"></a>00106         TInt pos = 0;
<a name="l00107"></a>00107         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;5;i++ )
<a name="l00108"></a>00108                 {
<a name="l00109"></a>00109                         <span class="comment">//Push the file object on the cleanup stack before doing any file operation which could leave. </span>
<a name="l00110"></a>00110                         CleanupClosePushL(file); 
<a name="l00111"></a>00111                         file.Open(aFs,KTestFile,EFileRead|EFileWrite);
<a name="l00112"></a>00112                         
<a name="l00113"></a>00113                         _LIT8(KWriteBuf,<span class="stringliteral">&quot;Three ,\n&quot;</span>);
<a name="l00114"></a>00114                         file.Seek(ESeekEnd , pos );
<a name="l00115"></a>00115                         file.Write(pos ,KWriteBuf);
<a name="l00116"></a>00116                         CleanupStack::PopAndDestroy(&amp;file);
<a name="l00117"></a>00117                         file.Close();
<a name="l00118"></a>00118                         User::After(1000000); <span class="comment">//Wait for 0.1 s to ensure a visible interthreading mechanism </span>
<a name="l00119"></a>00119                 }
<a name="l00120"></a>00120         aFs.Close();
<a name="l00121"></a>00121         pthread_mutex_unlock(&amp;mutex);
<a name="l00122"></a>00122         <span class="keywordflow">return</span> NULL;
<a name="l00123"></a>00123         }
<a name="l00124"></a>00124         
<a name="l00125"></a>00125 <span class="comment">/*</span>
<a name="l00126"></a>00126 <span class="comment">* The following function creates three threads which starts executing as soon as it is created</span>
<a name="l00127"></a>00127 <span class="comment">* it creates a text file which is used as a shared resource . The main thread will wait till </span>
<a name="l00128"></a>00128 <span class="comment">* child threads completes its execution . </span>
<a name="l00129"></a>00129 <span class="comment">*/</span>
<a name="l00130"></a>00130 <span class="keywordtype">int</span> CreateThreadL()
<a name="l00131"></a>00131         {       
<a name="l00132"></a>00132         <span class="comment">//Three threads declared.</span>
<a name="l00133"></a>00133         pthread_t threadOne;
<a name="l00134"></a>00134         pthread_t threadTwo;
<a name="l00135"></a>00135         pthread_t threadThree;
<a name="l00136"></a>00136         
<a name="l00137"></a>00137         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMain ,<span class="stringliteral">&quot;in main\n&quot;</span> ); 
<a name="l00138"></a>00138         console-&gt;Write(KMain);
<a name="l00139"></a>00139         <span class="comment">//Start a file server session </span>
<a name="l00140"></a>00140         RFs aFs;        
<a name="l00141"></a>00141         User::LeaveIfError(aFs.Connect());
<a name="l00142"></a>00142         
<a name="l00143"></a>00143         <span class="comment">//Create a text file which can be used as a shared resource. </span>
<a name="l00144"></a>00144         RFile file;
<a name="l00145"></a>00145         CleanupClosePushL(file); 
<a name="l00146"></a>00146         file.Create(aFs ,KTestFile,EFileRead|EFileWrite);
<a name="l00147"></a>00147         CleanupStack::PopAndDestroy(&amp;file);
<a name="l00148"></a>00148         file.Close(); 
<a name="l00149"></a>00149         aFs.Close();
<a name="l00150"></a>00150         <span class="comment">//Create and initialize mutex for synchronization       </span>
<a name="l00151"></a>00151         <span class="keywordflow">if</span>((pthread_mutex_init(&amp;mutex,NULL)) != 0)
<a name="l00152"></a>00152                 {
<a name="l00153"></a>00153                         <span class="keywordflow">return</span> -1;
<a name="l00154"></a>00154                 }         
<a name="l00155"></a>00155         
<a name="l00156"></a>00156         <span class="comment">//Create threadOne.. thread is in running state. </span>
<a name="l00157"></a>00157         TInt err1 = pthread_create(&amp;threadOne,NULL,TestFunction1L, NULL);
<a name="l00158"></a>00158         User::LeaveIfError(err1);
<a name="l00159"></a>00159         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KThreadOneCreated , <span class="stringliteral">&quot;ThreadOne created\n&quot;</span>);
<a name="l00160"></a>00160         console-&gt;Write(KThreadOneCreated);
<a name="l00161"></a>00161         
<a name="l00162"></a>00162         <span class="comment">//Create threadTwo.. thread is in running state.</span>
<a name="l00163"></a>00163         TInt err2 = pthread_create(&amp;threadTwo,NULL,TestFunction2L, NULL);
<a name="l00164"></a>00164         User::LeaveIfError(err2);
<a name="l00165"></a>00165         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KThreadTwoCreated , <span class="stringliteral">&quot;ThreadTwo created\n&quot;</span>);
<a name="l00166"></a>00166         console-&gt;Write(KThreadTwoCreated);
<a name="l00167"></a>00167         
<a name="l00168"></a>00168         <span class="comment">//Create threadThree.. thread is in running state.</span>
<a name="l00169"></a>00169         TInt err3 = pthread_create(&amp;threadThree,NULL,TestFunction3L, NULL);
<a name="l00170"></a>00170         User::LeaveIfError(err3);
<a name="l00171"></a>00171         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KThreadThreeCreated , <span class="stringliteral">&quot;ThreadThree created\n&quot;</span>);
<a name="l00172"></a>00172         console-&gt;Write(KThreadThreeCreated);
<a name="l00173"></a>00173         
<a name="l00174"></a>00174         
<a name="l00175"></a>00175         <span class="comment">//------Main thread waits for other threads to complete ---- </span>
<a name="l00176"></a>00176         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KWait , <span class="stringliteral">&quot;Waiting for child threads to complete execution\n&quot;</span>);
<a name="l00177"></a>00177         console-&gt;Write(KWait);
<a name="l00178"></a>00178         
<a name="l00179"></a>00179         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KJoinError , <span class="stringliteral">&quot;Error in pthread_join()&quot;</span>);
<a name="l00180"></a>00180         <span class="comment">//Main thread waits for threadOne to complete execution</span>
<a name="l00181"></a>00181         <span class="keywordflow">if</span>(pthread_join(threadOne, NULL) != 0)
<a name="l00182"></a>00182                 {
<a name="l00183"></a>00183                         console-&gt;Write(KJoinError);      
<a name="l00184"></a>00184                 }
<a name="l00185"></a>00185         <span class="keywordflow">else</span>
<a name="l00186"></a>00186                 {
<a name="l00187"></a>00187                         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KRetThreadOne ,<span class="stringliteral">&quot;Returned from threadone\n&quot;</span>); 
<a name="l00188"></a>00188                         console-&gt;Write(KRetThreadOne); <span class="comment">//Control comes to main thread once threadOne completes execution.</span>
<a name="l00189"></a>00189                 }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191         <span class="comment">//Main thread waits for threadTwo to complete execution</span>
<a name="l00192"></a>00192         <span class="keywordflow">if</span>(pthread_join(threadTwo, NULL) != 0)
<a name="l00193"></a>00193                 {
<a name="l00194"></a>00194                         console-&gt;Write(KJoinError);
<a name="l00195"></a>00195                 }
<a name="l00196"></a>00196         <span class="keywordflow">else</span>
<a name="l00197"></a>00197                 {
<a name="l00198"></a>00198                         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KRetThreadTwo ,<span class="stringliteral">&quot;Returned from threadtwo\n&quot;</span>); 
<a name="l00199"></a>00199                         console-&gt;Write(KRetThreadTwo); <span class="comment">//Control comes to main thread once threadTwo completes execution.</span>
<a name="l00200"></a>00200                 }
<a name="l00201"></a>00201                 
<a name="l00202"></a>00202         <span class="comment">//Main thread waits for threadThree to complete execution</span>
<a name="l00203"></a>00203         <span class="keywordflow">if</span>(pthread_join(threadThree, NULL) != 0)
<a name="l00204"></a>00204                 {
<a name="l00205"></a>00205                         console-&gt;Write(KJoinError);      
<a name="l00206"></a>00206                 }
<a name="l00207"></a>00207         <span class="keywordflow">else</span> 
<a name="l00208"></a>00208                 {
<a name="l00209"></a>00209                         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KRetThreadThree ,<span class="stringliteral">&quot;Returned from threadthree\n&quot;</span>); 
<a name="l00210"></a>00210                         console-&gt;Write(KRetThreadThree); <span class="comment">//Control comes to main thread once threadTwo completes execution.</span>
<a name="l00211"></a>00211                 }
<a name="l00212"></a>00212         <span class="comment">//Clean up</span>
<a name="l00213"></a>00213         pthread_mutex_destroy(&amp;mutex);
<a name="l00214"></a>00214         <span class="keywordflow">return</span> -1; 
<a name="l00215"></a>00215         }
<a name="l00216"></a>00216         
<a name="l00217"></a>00217         <span class="comment">//  Local Functions</span>
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 LOCAL_C <span class="keywordtype">void</span> MainL()
<a name="l00220"></a>00220         {
<a name="l00221"></a>00221         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KHello , <span class="stringliteral">&quot;Welcome to the LibpThread example, we will create three threads and use them to print data to \\epoc32\\winscw\\c\\newfile.txt\n\n&quot;</span>);
<a name="l00222"></a>00222         console-&gt;Write(KHello);
<a name="l00223"></a>00223         CreateThreadL();
<a name="l00224"></a>00224         }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 LOCAL_C <span class="keywordtype">void</span> DoStartL()
<a name="l00227"></a>00227         {
<a name="l00228"></a>00228         MainL();
<a name="l00229"></a>00229         }
<a name="l00230"></a>00230 
<a name="l00231"></a>00231         <span class="comment">//  Global Functions</span>
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 GLDEF_C TInt E32Main()
<a name="l00234"></a>00234         {
<a name="l00235"></a>00235         <span class="comment">// Create cleanup stack</span>
<a name="l00236"></a>00236         __UHEAP_MARK;
<a name="l00237"></a>00237         CTrapCleanup* cleanup = CTrapCleanup::New();
<a name="l00238"></a>00238                 <span class="comment">// Create output console</span>
<a name="l00239"></a>00239         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextConsoleTitle, <span class="stringliteral">&quot;Console&quot;</span>);
<a name="l00240"></a>00240         TRAPD(createError, console = Console::NewL(KTextConsoleTitle, TSize(KConsFullScreen,KConsFullScreen)));
<a name="l00241"></a>00241         <span class="keywordflow">if</span> (createError)
<a name="l00242"></a>00242         <span class="keywordflow">return</span> createError;
<a name="l00243"></a>00243                 <span class="comment">// Run application code inside TRAP harness, wait keypress when terminated</span>
<a name="l00244"></a>00244         TRAPD(mainError, DoStartL());
<a name="l00245"></a>00245         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextFailed, <span class="stringliteral">&quot; failed, leave code = %d&quot;</span>);
<a name="l00246"></a>00246         <span class="keywordflow">if</span> (mainError)
<a name="l00247"></a>00247         console-&gt;Printf(KTextFailed, mainError);
<a name="l00248"></a>00248         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextPressAnyKey, <span class="stringliteral">&quot; [press any key]\n&quot;</span>);
<a name="l00249"></a>00249         console-&gt;Printf(KTextPressAnyKey);
<a name="l00250"></a>00250         console-&gt;Getch();
<a name="l00251"></a>00251         <span class="keyword">delete</span> console;
<a name="l00252"></a>00252         <span class="keyword">delete</span> cleanup;
<a name="l00253"></a>00253         __UHEAP_MARKEND;
<a name="l00254"></a>00254         <span class="keywordflow">return</span> KErrNone;
<a name="l00255"></a>00255         }
<a name="l00256"></a>00256         
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

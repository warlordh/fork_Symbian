<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Base/MemMan/Cleanup/TwoPhaseOOM/TwoPhaseOOM.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Base/MemMan/Cleanup/TwoPhaseOOM/TwoPhaseOOM.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2000-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// NOTE: the structure of this example is different to standard E32 examples</span>
<a name="l00015"></a>00015 <span class="comment">//</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;e32cons.h&gt;</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020   <span class="comment">// All messages written to this</span>
<a name="l00021"></a>00021 LOCAL_D CConsoleBase* console;
<a name="l00022"></a>00022   
<a name="l00023"></a>00023   <span class="comment">// Function prototypes</span>
<a name="l00024"></a>00024 LOCAL_C <span class="keywordtype">void</span> doExampleL();      
<a name="l00025"></a>00025 LOCAL_C <span class="keywordtype">void</span> callExampleL();
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 
<a name="l00029"></a>00029 <span class="comment">//</span>
<a name="l00030"></a>00030 <span class="comment">// -----&gt; CSimple (definition)</span>
<a name="l00031"></a>00031 <span class="comment">//</span>
<a name="l00033"></a>00033 <span class="comment"></span><span class="keyword">class </span>CSimple : <span class="keyword">public</span> CBase
<a name="l00034"></a>00034         {
<a name="l00035"></a>00035 <span class="keyword">public</span> :
<a name="l00036"></a>00036         <span class="keyword">static</span> CSimple* NewL(TInt aVal);
<a name="l00037"></a>00037         <span class="keyword">static</span> CSimple* NewLC(TInt aVal);
<a name="l00038"></a>00038         <span class="keywordtype">void</span>   Display();
<a name="l00039"></a>00039 <span class="keyword">protected</span>: 
<a name="l00040"></a>00040         CSimple(TInt aVal);
<a name="l00041"></a>00041 <span class="keyword">public</span>: 
<a name="l00042"></a>00042         TInt   iVal;
<a name="l00043"></a>00043         };
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 
<a name="l00047"></a>00047 <span class="comment">//</span>
<a name="l00048"></a>00048 <span class="comment">// -----&gt; CCompound (definition)</span>
<a name="l00049"></a>00049 <span class="comment">//</span>
<a name="l00051"></a>00051 <span class="comment"></span><span class="keyword">class </span>CCompound : <span class="keyword">public</span> CBase
<a name="l00052"></a>00052         {
<a name="l00053"></a>00053 <span class="keyword">public</span> :
<a name="l00054"></a>00054         <span class="keyword">virtual</span>  ~CCompound();
<a name="l00055"></a>00055         <span class="keywordtype">void</span>     Display();
<a name="l00056"></a>00056         <span class="keyword">static</span>   CCompound* NewL(TInt aRoot,TInt aChild);
<a name="l00057"></a>00057         <span class="keyword">static</span>   CCompound* NewLC(TInt aRoot,TInt aChild);
<a name="l00058"></a>00058 <span class="keyword">private</span>:
<a name="l00059"></a>00059         <span class="keywordtype">void</span>     ConstructL(TInt aRoot,TInt aChild);
<a name="l00060"></a>00060 <span class="keyword">private</span>:
<a name="l00061"></a>00061         TInt     iRoot;
<a name="l00062"></a>00062         CSimple* iChild;
<a name="l00063"></a>00063     };
<a name="l00064"></a>00064 
<a name="l00066"></a>00066 <span class="comment">//</span>
<a name="l00067"></a>00067 <span class="comment">// -----&gt; CCompound (implementation)</span>
<a name="l00068"></a>00068 <span class="comment">//</span>
<a name="l00070"></a>00070 <span class="comment"></span>
<a name="l00071"></a>00071                                 <span class="comment">// Use two stage construction technique to </span>
<a name="l00072"></a>00072                                 <span class="comment">// prevent alloc heaven.</span>
<a name="l00073"></a>00073                                 <span class="comment">// NB. due to use of cleanup stack, NewLC is</span>
<a name="l00074"></a>00074                                 <span class="comment">// now the primitive, rather than NewL</span>
<a name="l00075"></a>00075 
<a name="l00076"></a>00076                                 <span class="comment">// NewLC with two stage construct</span>
<a name="l00077"></a>00077 CCompound* CCompound::NewLC(TInt aRoot,TInt aChild) 
<a name="l00078"></a>00078                 {               <span class="comment">// get new, leave if can&#39;t      </span>
<a name="l00079"></a>00079                 CCompound* <span class="keyword">self</span>=<span class="keyword">new</span> (ELeave) CCompound;
<a name="l00080"></a>00080                 CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00081"></a>00081                                 <span class="comment">// push onto cleanup stack (in </span>
<a name="l00082"></a>00082                                 <span class="comment">// case self-&gt;ConstructL leaves).</span>
<a name="l00083"></a>00083                                 <span class="comment">// Use two-stage construct</span>
<a name="l00084"></a>00084                 <span class="keyword">self</span>-&gt;ConstructL(aRoot,aChild);
<a name="l00085"></a>00085                 <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00086"></a>00086                 }
<a name="l00087"></a>00087                                 <span class="comment">// version of NewLC which leaves </span>
<a name="l00088"></a>00088                                 <span class="comment">// nothing on the cleanup stack</span>
<a name="l00089"></a>00089 CCompound* CCompound::NewL(TInt aRoot,TInt aChild) 
<a name="l00090"></a>00090                 {
<a name="l00091"></a>00091                 CCompound* <span class="keyword">self</span>=NewLC(aRoot,aChild);
<a name="l00092"></a>00092                 CleanupStack::Pop();
<a name="l00093"></a>00093                 <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00094"></a>00094                 }
<a name="l00095"></a>00095                                 <span class="comment">// NB. function may leave, </span>
<a name="l00096"></a>00096                                 <span class="comment">// as CSimple::NewL may leave</span>
<a name="l00097"></a>00097 <span class="keywordtype">void</span> CCompound::ConstructL(TInt aRoot,TInt aChild) 
<a name="l00098"></a>00098                 {
<a name="l00099"></a>00099                 iRoot = aRoot;
<a name="l00100"></a>00100                 iChild = CSimple::NewL(aChild);  
<a name="l00101"></a>00101                 iChild-&gt;iVal = aChild;
<a name="l00102"></a>00102                 }                               
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="keywordtype">void</span> CCompound::Display() 
<a name="l00105"></a>00105         {
<a name="l00106"></a>00106           <span class="comment">// Display class member data on the console</span>
<a name="l00107"></a>00107         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormat4,<span class="stringliteral">&quot;Root=%d. Child=%d.\n&quot;</span>);
<a name="l00108"></a>00108     console-&gt;Printf(KFormat4,iRoot,iChild-&gt;iVal);
<a name="l00109"></a>00109         }
<a name="l00110"></a>00110                                 
<a name="l00111"></a>00111 CCompound::~CCompound() 
<a name="l00112"></a>00112         {
<a name="l00113"></a>00113         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgDestCCompound,<span class="stringliteral">&quot;Destructing CCompound\n&quot;</span>);
<a name="l00114"></a>00114         console-&gt;Printf(KMsgDestCCompound);
<a name="l00115"></a>00115         <span class="keyword">delete</span> iChild;
<a name="l00116"></a>00116         }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00120"></a>00120 <span class="comment">//</span>
<a name="l00121"></a>00121 <span class="comment">// -----&gt; CSimple (implementation)</span>
<a name="l00122"></a>00122 <span class="comment">//</span>
<a name="l00124"></a>00124 <span class="comment"></span>CSimple* CSimple::NewL(TInt aVal) 
<a name="l00125"></a>00125         {
<a name="l00126"></a>00126           <span class="comment">// NB The NewL function uses the C++ constructor mechanism.</span>
<a name="l00127"></a>00127         CSimple* <span class="keyword">self</span>=<span class="keyword">new</span> (ELeave) CSimple(aVal);
<a name="l00128"></a>00128         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00129"></a>00129         }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131                                 
<a name="l00132"></a>00132 CSimple* CSimple::NewLC(TInt aVal)
<a name="l00133"></a>00133         {
<a name="l00134"></a>00134           <span class="comment">// NewLC is enriched with a push to the cleanup stack</span>
<a name="l00135"></a>00135         CSimple* <span class="keyword">self</span>=NewL(aVal);       
<a name="l00136"></a>00136         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00137"></a>00137         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00138"></a>00138         }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140                                 
<a name="l00141"></a>00141 <span class="keywordtype">void</span> CSimple::Display() 
<a name="l00142"></a>00142         {
<a name="l00143"></a>00143           <span class="comment">// Display class data member on the console.</span>
<a name="l00144"></a>00144         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormat1,<span class="stringliteral">&quot;Value=%d.\n&quot;</span>);
<a name="l00145"></a>00145         console-&gt;Printf(KFormat1,iVal);
<a name="l00146"></a>00146         }
<a name="l00147"></a>00147  
<a name="l00148"></a>00148 CSimple::CSimple(TInt aVal) 
<a name="l00149"></a>00149         : iVal(aVal)
<a name="l00150"></a>00150         {}
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 
<a name="l00154"></a>00154 <span class="comment">//</span>
<a name="l00155"></a>00155 <span class="comment">// Main function called by E32</span>
<a name="l00156"></a>00156 <span class="comment">//</span>
<a name="l00158"></a>00158 <span class="comment"></span>GLDEF_C TInt E32Main()
<a name="l00159"></a>00159     {
<a name="l00160"></a>00160           <span class="comment">// Get cleanup stack</span>
<a name="l00161"></a>00161         CTrapCleanup* cleanup=CTrapCleanup::New();
<a name="l00162"></a>00162 
<a name="l00163"></a>00163           <span class="comment">// Some more initialization, then do the example</span>
<a name="l00164"></a>00164         TRAPD(error,callExampleL());
<a name="l00165"></a>00165           
<a name="l00166"></a>00166           <span class="comment">// callExampleL() should never leave.</span>
<a name="l00167"></a>00167         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgPanicEpoc32ex,<span class="stringliteral">&quot;EPOC32EX&quot;</span>);
<a name="l00168"></a>00168         __ASSERT_ALWAYS(!error,User::Panic(KMsgPanicEpoc32ex,error));
<a name="l00169"></a>00169 
<a name="l00170"></a>00170           <span class="comment">// destroy the cleanup stack</span>
<a name="l00171"></a>00171         <span class="keyword">delete</span> cleanup;
<a name="l00172"></a>00172         
<a name="l00173"></a>00173           <span class="comment">// return</span>
<a name="l00174"></a>00174         <span class="keywordflow">return</span> 0;
<a name="l00175"></a>00175     }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 
<a name="l00179"></a>00179 <span class="comment">//</span>
<a name="l00180"></a>00180 <span class="comment">//</span>
<a name="l00181"></a>00181 <span class="comment">//</span>
<a name="l00183"></a>00183 <span class="comment"></span>LOCAL_C <span class="keywordtype">void</span> callExampleL() 
<a name="l00184"></a>00184     {
<a name="l00185"></a>00185           <span class="comment">// Initialize and call the example code under cleanup stack.</span>
<a name="l00186"></a>00186         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgExampleCode,<span class="stringliteral">&quot;Symbian platform Example Code&quot;</span>);
<a name="l00187"></a>00187         console = Console::NewL(KMsgExampleCode,TSize(KConsFullScreen,KConsFullScreen));
<a name="l00188"></a>00188           <span class="comment">// Put console onto the cleanup stack.</span>
<a name="l00189"></a>00189         CleanupStack::PushL(console);
<a name="l00190"></a>00190 
<a name="l00191"></a>00191           <span class="comment">// Mark for alloc heaven tool</span>
<a name="l00192"></a>00192         __UHEAP_MARK;                      
<a name="l00193"></a>00193 
<a name="l00194"></a>00194           <span class="comment">// Perform the example function under the protection of a </span>
<a name="l00195"></a>00195           <span class="comment">// TRAP harness.</span>
<a name="l00196"></a>00196         TRAPD(error,doExampleL());
<a name="l00197"></a>00197         
<a name="l00198"></a>00198           <span class="comment">// Test the example for alloc heaven</span>
<a name="l00199"></a>00199           __UHEAP_MARKEND;
<a name="l00200"></a>00200 
<a name="l00201"></a>00201           <span class="comment">// </span>
<a name="l00202"></a>00202         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgOK,<span class="stringliteral">&quot;ok&quot;</span>);
<a name="l00203"></a>00203         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormat2,<span class="stringliteral">&quot;Overall example Trap Harness failed: leave code=%d&quot;</span>);
<a name="l00204"></a>00204         <span class="keywordflow">if</span> (error)
<a name="l00205"></a>00205                 console-&gt;Printf(KFormat2, error);
<a name="l00206"></a>00206         <span class="keywordflow">else</span>
<a name="l00207"></a>00207                 console-&gt;Printf(KMsgOK);
<a name="l00208"></a>00208           
<a name="l00209"></a>00209           <span class="comment">// Continue</span>
<a name="l00210"></a>00210         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KMsgPressAnyKey,<span class="stringliteral">&quot; [press any key]&quot;</span>);
<a name="l00211"></a>00211         console-&gt;Printf(KMsgPressAnyKey);
<a name="l00212"></a>00212         console-&gt;Getch();
<a name="l00213"></a>00213 
<a name="l00214"></a>00214           <span class="comment">// Remove the console object from the cleanupstack</span>
<a name="l00215"></a>00215           <span class="comment">// and destroy it. </span>
<a name="l00216"></a>00216         CleanupStack::PopAndDestroy();
<a name="l00217"></a>00217     }
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 
<a name="l00221"></a>00221 <span class="comment">//</span>
<a name="l00222"></a>00222 <span class="comment">// Do the example</span>
<a name="l00223"></a>00223 <span class="comment">//</span>
<a name="l00224"></a>00224 <span class="comment">// Example to check robustness of class on OOM and attempt to provoke</span>
<a name="l00225"></a>00225 <span class="comment">// memory leaks (orphans).</span>
<a name="l00227"></a>00227 <span class="comment"></span><span class="keywordtype">void</span> doExampleL()
<a name="l00228"></a>00228         {
<a name="l00229"></a>00229 <span class="preprocessor">        #if defined(_DEBUG)  //only ever used in debug mode</span>
<a name="l00230"></a>00230 <span class="preprocessor"></span>        TInt failValue = 5;
<a name="l00231"></a>00231 <span class="preprocessor">        #endif</span>
<a name="l00232"></a>00232 <span class="preprocessor"></span>
<a name="l00233"></a>00233           <span class="comment">// Startup the alloc failure tool to fail in the third cycle.</span>
<a name="l00234"></a>00234           <span class="comment">// To test for alloc heaven:</span>
<a name="l00235"></a>00235           <span class="comment">//</span>
<a name="l00236"></a>00236           <span class="comment">// An even value for &#39;failValue&#39; should provoke memory leak,</span>
<a name="l00237"></a>00237           <span class="comment">// an odd value should not.</span>
<a name="l00238"></a>00238         __UHEAP_SETFAIL(RHeap::EDeterministic,failValue);
<a name="l00239"></a>00239         
<a name="l00240"></a>00240         <span class="keywordflow">for</span>(TInt ii=1;ii&lt;4;ii++)
<a name="l00241"></a>00241                 {
<a name="l00242"></a>00242                   <span class="comment">// Display status information</span>
<a name="l00243"></a>00243                 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormat3,<span class="stringliteral">&quot;Cycle %d.\n&quot;</span>);
<a name="l00244"></a>00244                 console-&gt;Printf(KFormat3,ii);
<a name="l00245"></a>00245                   <span class="comment">// Create new instance </span>
<a name="l00246"></a>00246                 CCompound* myCompoundExample = CCompound::NewL(1,2);
<a name="l00247"></a>00247                   <span class="comment">// Display the instance</span>
<a name="l00248"></a>00248                 myCompoundExample-&gt;Display();
<a name="l00249"></a>00249                   <span class="comment">// Destroy the instance</span>
<a name="l00250"></a>00250                 <span class="keyword">delete</span> myCompoundExample;
<a name="l00251"></a>00251                 } 
<a name="l00252"></a>00252         }
<a name="l00253"></a>00253 
<a name="l00254"></a>00254 
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

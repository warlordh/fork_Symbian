<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/PIPS/opencproducerconsumerex/src/observer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/PIPS/opencproducerconsumerex/src/observer.cpp</h1><a href="observer_8cpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00014"></a>00014 <span class="comment">// INCLUDE FILES</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &lt;e32std.h&gt;</span>
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;f32file.h&gt;</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;sys/types.h&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;sys/ipc.h&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;sys/msg.h&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;pthread.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;CommanHeader.h&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KObserverLogFile, <span class="stringliteral">&quot;C:\\ObserverLogFile.txt&quot;</span>);
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="comment">/*****************************************************************************</span>
<a name="l00030"></a>00030 <span class="comment">*  ObserverThreadL</span>
<a name="l00031"></a>00031 <span class="comment">*  Function: Observer Thread that does the logging of all the events sent by </span>
<a name="l00032"></a>00032 <span class="comment">*  Producer and Consumers</span>
<a name="l00033"></a>00033 <span class="comment">*******************************************************************************/</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 TInt ObserverThreadL( TInt aNoOfMsg ) 
<a name="l00036"></a>00036         {
<a name="l00037"></a>00037         TInt retVal = KErrNone;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039         <span class="comment">//Connect to Symbian File Server and open a file for logging</span>
<a name="l00040"></a>00040         RFs fileSession;
<a name="l00041"></a>00041         User::LeaveIfError(fileSession.Connect());
<a name="l00042"></a>00042         RFile logFile;
<a name="l00043"></a>00043         retVal = logFile.Open(fileSession, KObserverLogFile, EFileWrite);
<a name="l00044"></a>00044         <span class="keywordflow">if</span>(retVal)
<a name="l00045"></a>00045                 {
<a name="l00046"></a>00046                 retVal = logFile.Create(fileSession, KObserverLogFile, EFileWrite);
<a name="l00047"></a>00047                 }
<a name="l00048"></a>00048         User::LeaveIfError(retVal);
<a name="l00049"></a>00049 
<a name="l00050"></a>00050         <span class="comment">//Create the MRT STDLIBS Message Q</span>
<a name="l00051"></a>00051     key_t msgQFd = msgget(KMSGQKEY, IPC_CREAT);
<a name="l00052"></a>00052     <span class="keywordflow">if</span> (msgQFd == -1)
<a name="l00053"></a>00053         {
<a name="l00054"></a>00054         logFile.Write(_L8(<span class="stringliteral">&quot;Msg Q Creation Failed\r&quot;</span>));
<a name="l00055"></a>00055         <span class="keywordflow">return</span> -1;
<a name="l00056"></a>00056         }
<a name="l00057"></a>00057    logFile.Write(_L8(<span class="stringliteral">&quot;Observer is Up and Running\r&quot;</span>));
<a name="l00058"></a>00058 
<a name="l00059"></a>00059         <span class="comment">//Construct the message to be send thru msg q</span>
<a name="l00060"></a>00060         <span class="keyword">struct </span>msgbuf* recvMsg = (<span class="keyword">struct </span>msgbuf*)malloc(KMAXSENDMSG);
<a name="l00061"></a>00061         TBuf8&lt;KMAXSENDMSG&gt; logData;
<a name="l00062"></a>00062         
<a name="l00063"></a>00063         
<a name="l00064"></a>00064         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> msgCount = 0; msgCount&lt;aNoOfMsg; msgCount++ )
<a name="l00065"></a>00065                 {
<a name="l00066"></a>00066                 retVal = msgrcv(msgQFd, recvMsg, KMAXSENDMSG, 0, 0);
<a name="l00067"></a>00067                 <span class="keywordflow">if</span>(retVal &gt; 0 )
<a name="l00068"></a>00068                         {
<a name="l00069"></a>00069                         logData.Copy((<span class="keyword">const</span> TUint8 *)recvMsg-&gt;mtext, retVal-4);
<a name="l00070"></a>00070                         logFile.Write(logData);
<a name="l00071"></a>00071                         <span class="comment">//Also flush the info on to console</span>
<a name="l00072"></a>00072                         recvMsg-&gt;mtext[retVal-4] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00073"></a>00073                         printf(<span class="stringliteral">&quot;Observer: %s\n&quot;</span>, recvMsg-&gt;mtext);
<a name="l00074"></a>00074                         }
<a name="l00075"></a>00075                 }
<a name="l00076"></a>00076         
<a name="l00077"></a>00077         <span class="comment">//Close the Message Q</span>
<a name="l00078"></a>00078         retVal = msgctl(msgQFd, IPC_RMID, NULL);
<a name="l00079"></a>00079         free(recvMsg);
<a name="l00080"></a>00080         
<a name="l00081"></a>00081         logFile.Close();
<a name="l00082"></a>00082         fileSession.Close();            
<a name="l00083"></a>00083         <span class="keywordflow">return</span> retVal;
<a name="l00084"></a>00084         }
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="comment">/*****************************************************************************</span>
<a name="l00087"></a>00087 <span class="comment">*  ObserverThreadEntryPoint</span>
<a name="l00088"></a>00088 <span class="comment">*  Function: Observer Thread Entry Point</span>
<a name="l00089"></a>00089 <span class="comment">*  As its Symbian Thread, it has to create a cleanup stack and should have</span>
<a name="l00090"></a>00090 <span class="comment">*  TOP level TRAP</span>
<a name="l00091"></a>00091 <span class="comment">*******************************************************************************/</span>
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 TInt ObserverThreadEntryPoint( TAny* aParam ) 
<a name="l00094"></a>00094         {
<a name="l00095"></a>00095         TInt retVal = KErrNone;
<a name="l00096"></a>00096         
<a name="l00097"></a>00097         <span class="comment">// Create a Cleanup Stack for this Thread</span>
<a name="l00098"></a>00098         CTrapCleanup* cleanupStack = CTrapCleanup::New();
<a name="l00099"></a>00099         <span class="keywordflow">if</span>(cleanupStack)
<a name="l00100"></a>00100                 {
<a name="l00101"></a>00101                 <span class="comment">//Have a top level TRAP</span>
<a name="l00102"></a>00102                 TRAP( retVal, retVal = ObserverThreadL( (<span class="keywordtype">int</span>)aParam ));
<a name="l00103"></a>00103                 <span class="keyword">delete</span> cleanupStack;
<a name="l00104"></a>00104                 }
<a name="l00105"></a>00105         <span class="keywordflow">else</span>
<a name="l00106"></a>00106                 {
<a name="l00107"></a>00107                 retVal = KErrNoMemory;
<a name="l00108"></a>00108                 }
<a name="l00109"></a>00109         <span class="keywordflow">return</span> retVal;
<a name="l00110"></a>00110         }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 <span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 <span class="comment">/*****************************************************************************</span>
<a name="l00115"></a>00115 <span class="comment">*  CreateObserverThread</span>
<a name="l00116"></a>00116 <span class="comment">*  Function: Function that creats Observing Thread (Symbian Thread)</span>
<a name="l00117"></a>00117 <span class="comment">*******************************************************************************/</span>
<a name="l00118"></a>00118 
<a name="l00119"></a><a class="code" href="observer_8cpp.html#abe25ac9eb42087610e2949b201e2f0b5">00119</a> <span class="keywordtype">void</span> <a class="code" href="observer_8cpp.html#abe25ac9eb42087610e2949b201e2f0b5">CreateObserverThread</a>( <span class="keywordtype">int</span> aNoOfMsg )
<a name="l00120"></a>00120         {
<a name="l00121"></a>00121         RThread thread;
<a name="l00122"></a>00122         TInt stackSize = 0x8000; <span class="comment">//Set the stack size for this thread as 8K</span>
<a name="l00123"></a>00123         thread.Create(_L(<span class="stringliteral">&quot;ObserverThread&quot;</span>), ObserverThreadEntryPoint, stackSize, NULL, (TAny*)aNoOfMsg);
<a name="l00124"></a>00124         TRequestStatus stat;
<a name="l00125"></a>00125         thread.Logon(stat);
<a name="l00126"></a>00126 
<a name="l00127"></a>00127         <span class="comment">//Start executing the thread.</span>
<a name="l00128"></a>00128         thread.Resume();
<a name="l00129"></a>00129 
<a name="l00130"></a>00130         <span class="comment">//Wait for the thread to Terminate.</span>
<a name="l00131"></a>00131         User::WaitForRequest(stat);
<a name="l00132"></a>00132         }
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 } <span class="comment">//extern &quot;C&quot;</span>
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 <span class="comment">//  End of File</span>
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

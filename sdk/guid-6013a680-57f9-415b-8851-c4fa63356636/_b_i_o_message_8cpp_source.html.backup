<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Messaging/BIOMessageMgr/Src/BIOMessage.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Messaging/BIOMessageMgr/Src/BIOMessage.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include &quot;BIOMessage.h&quot;</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 CBioMessage::CBioMessage()
<a name="l00020"></a>00020         {       
<a name="l00021"></a>00021                 
<a name="l00022"></a>00022         }
<a name="l00023"></a>00023 
<a name="l00029"></a><a class="code" href="class_c_bio_message.html#a1d6aa414af25fb357c6dfd31c2e92a41">00029</a> <a class="code" href="class_c_bio_message.html#a1d6aa414af25fb357c6dfd31c2e92a41">CBioMessage::~CBioMessage</a>()
<a name="l00030"></a>00030         {       
<a name="l00031"></a>00031         iSendAs.Close();
<a name="l00032"></a>00032         <span class="keyword">delete</span> iConsole;
<a name="l00033"></a>00033         }
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <a class="code" href="class_c_bio_message.html">CBioMessage</a>* CBioMessage::NewL()
<a name="l00036"></a>00036         {
<a name="l00037"></a>00037         <a class="code" href="class_c_bio_message.html">CBioMessage</a>* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_bio_message.html">CBioMessage</a>();
<a name="l00038"></a>00038         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00039"></a>00039         <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00040"></a>00040         CleanupStack::Pop();
<a name="l00041"></a>00041         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00042"></a>00042         }
<a name="l00043"></a>00043 
<a name="l00047"></a>00047 <span class="keywordtype">void</span> CBioMessage::ConstructL()
<a name="l00048"></a>00048         {
<a name="l00049"></a>00049         
<a name="l00050"></a>00050         iConsole = Console::NewL(KTestTitle,TSize(KConsFullScreen,KConsFullScreen));
<a name="l00051"></a>00051         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextWelcome, <span class="stringliteral">&quot;### BIO messaging ### \n&quot;</span>);
<a name="l00052"></a>00052         iConsole-&gt;Printf ( KTextWelcome );
<a name="l00053"></a>00053 
<a name="l00054"></a>00054         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextStartApp, <span class="stringliteral">&quot;\n Starting the BIO message application ............ \n&quot;</span>);
<a name="l00055"></a>00055         iConsole-&gt;Printf ( KTextStartApp );
<a name="l00056"></a>00056         
<a name="l00057"></a>00057         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextPressAKey, <span class="stringliteral">&quot;\n Press any key to step through the example ............ \n&quot;</span>);
<a name="l00058"></a>00058         iConsole-&gt;Printf ( KTextPressAKey );
<a name="l00059"></a>00059         iConsole-&gt;Getch ();
<a name="l00060"></a>00060 
<a name="l00061"></a>00061         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextInit, <span class="stringliteral">&quot;\n #1. Intializing ............ \n&quot;</span>);
<a name="l00062"></a>00062         iConsole-&gt;Printf ( KTextInit );
<a name="l00063"></a>00063         
<a name="l00064"></a>00064         iConsole-&gt;Getch ();     
<a name="l00065"></a>00065                 
<a name="l00066"></a>00066         }       
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="keywordtype">void</span> CBioMessage::StartL()
<a name="l00069"></a>00069         {
<a name="l00070"></a>00070         <a class="code" href="class_c_bio_message.html#abfbb240e56eb367dbb4a78f7f10f2f97">Connect</a>();
<a name="l00071"></a>00071         RSendAsMessage message;
<a name="l00072"></a>00072         <a class="code" href="class_c_bio_message.html#a84895e4685f4164e09734d42b5f36e3e">CreateL</a>(message);
<a name="l00073"></a>00073         <a class="code" href="class_c_bio_message.html#a0f336f9e53bd3571c779ead43c128d94">SendL</a>(message);
<a name="l00074"></a>00074         
<a name="l00075"></a>00075         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextParserTitle, <span class="stringliteral">&quot; \n\n### BIO Message Parsing ### \n&quot;</span>);
<a name="l00076"></a>00076         iConsole-&gt;Printf ( KTextParserTitle );
<a name="l00077"></a>00077         
<a name="l00078"></a>00078         <a class="code" href="class_c_bio_message.html#a16077d11e253b5f91447fd56668c778b">ParseL</a>();       
<a name="l00079"></a>00079         CleanupStack::PopAndDestroy(4, iObserver); <span class="comment">//selection, iEntry, iSession, iObserver</span>
<a name="l00080"></a>00080         }
<a name="l00081"></a>00081 
<a name="l00087"></a><a class="code" href="class_c_bio_message.html#abfbb240e56eb367dbb4a78f7f10f2f97">00087</a> <span class="keywordtype">void</span> <a class="code" href="class_c_bio_message.html#abfbb240e56eb367dbb4a78f7f10f2f97">CBioMessage::Connect</a>()
<a name="l00088"></a>00088         {
<a name="l00089"></a>00089         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextConn, <span class="stringliteral">&quot;\n #2. Connecting to message server ............ \n&quot;</span>);
<a name="l00090"></a>00090         iConsole-&gt;Printf ( KTextConn );
<a name="l00091"></a>00091         iConsole-&gt;Getch ();
<a name="l00092"></a>00092 
<a name="l00093"></a>00093         TInt err = iSendAs.Connect(KSendAsDefaultMessageSlots);
<a name="l00094"></a>00094         <span class="keywordflow">if</span> ( err == KErrNone)
<a name="l00095"></a>00095                 {
<a name="l00096"></a>00096                 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextErrInn, <span class="stringliteral">&quot;\n Connection is successful\n&quot;</span>);
<a name="l00097"></a>00097                 iConsole-&gt;Printf ( KTextErrInn );
<a name="l00098"></a>00098 
<a name="l00099"></a>00099                 }
<a name="l00100"></a>00100         <span class="keywordflow">else</span>
<a name="l00101"></a>00101                 {
<a name="l00102"></a>00102                 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextErrOut, <span class="stringliteral">&quot;\n\n Connection has failed\n&quot;</span>);
<a name="l00103"></a>00103                 iConsole-&gt;Printf ( KTextErrOut );
<a name="l00104"></a>00104                 }
<a name="l00105"></a>00105         }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 <span class="keywordtype">void</span> CBioMessage::CleanMailFolderL(TMsvId aFolderId)
<a name="l00108"></a>00108         {
<a name="l00109"></a>00109         <a class="code" href="class_c_dummy_observer.html">CDummyObserver</a>* observer = <span class="keyword">new</span>(ELeave) <a class="code" href="class_c_dummy_observer.html">CDummyObserver</a>;
<a name="l00110"></a>00110         CleanupStack::PushL(observer);
<a name="l00111"></a>00111         CMsvSession* session = CMsvSession::OpenSyncL(*observer);
<a name="l00112"></a>00112         CleanupStack::PushL(session);   
<a name="l00113"></a>00113         CMsvEntry* entry = CMsvEntry::NewL(*session, aFolderId, 
<a name="l00114"></a>00114                 TMsvSelectionOrdering(KMsvNoGrouping,EMsvSortByNone,ETrue));
<a name="l00115"></a>00115         CleanupStack::PushL(entry);
<a name="l00116"></a>00116         
<a name="l00117"></a>00117         CMsvEntrySelection* selection = entry-&gt;ChildrenL();
<a name="l00118"></a>00118         CleanupStack::PushL(selection);
<a name="l00119"></a>00119 
<a name="l00120"></a>00120         TMsvLocalOperationProgress progress;
<a name="l00121"></a>00121         <span class="keywordflow">if</span> (selection-&gt;Count() &gt; 0)
<a name="l00122"></a>00122                 {
<a name="l00123"></a>00123                 entry-&gt;DeleteL(*selection, progress);
<a name="l00124"></a>00124                 }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126         CleanupStack::PopAndDestroy(4); <span class="comment">// selection, entry, session, observer</span>
<a name="l00127"></a>00127         }
<a name="l00128"></a>00128 
<a name="l00133"></a><a class="code" href="class_c_bio_message.html#a84895e4685f4164e09734d42b5f36e3e">00133</a> <span class="keywordtype">void</span> <a class="code" href="class_c_bio_message.html#a84895e4685f4164e09734d42b5f36e3e">CBioMessage::CreateL</a>( RSendAsMessage&amp; aMessage)
<a name="l00134"></a>00134         {
<a name="l00135"></a>00135         CSendAsMessageTypes* messageTypes = CSendAsMessageTypes::NewL();
<a name="l00136"></a>00136         CleanupStack::PushL(messageTypes);      
<a name="l00137"></a>00137 
<a name="l00138"></a>00138         iSendAs.FilteredMessageTypesL(*messageTypes);
<a name="l00139"></a>00139 
<a name="l00140"></a>00140         TUid sendAsMtmUid;
<a name="l00141"></a>00141                 
<a name="l00142"></a>00142         <span class="comment">// Returning the message UID based on the message type </span>
<a name="l00143"></a>00143         <span class="comment">// such as 0 for SMTP Client, 1 for SMS Client, 2 for Infrared client MTM and 3 for Bluetooth client MTM.</span>
<a name="l00144"></a>00144         sendAsMtmUid = messageTypes-&gt;UidFromNameL(_L(<span class="stringliteral">&quot;SMS Client&quot;</span>));
<a name="l00145"></a>00145         
<a name="l00146"></a>00146         CleanupStack::PopAndDestroy(messageTypes);      
<a name="l00147"></a>00147 
<a name="l00148"></a>00148         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextCreate, <span class="stringliteral">&quot;\n #3. Creating a BIO message ............ \n&quot;</span>);
<a name="l00149"></a>00149         iConsole-&gt;Printf ( KTextCreate );
<a name="l00150"></a>00150         iConsole-&gt;Getch ();
<a name="l00151"></a>00151         
<a name="l00152"></a>00152         CleanMailFolderL(KMsvDraftEntryId);
<a name="l00153"></a>00153         
<a name="l00154"></a>00154         iObserver = <span class="keyword">new</span>(ELeave) <a class="code" href="class_c_dummy_observer.html">CDummyObserver</a>;
<a name="l00155"></a>00155         CleanupStack::PushL(iObserver);
<a name="l00156"></a>00156         iSession = CMsvSession::OpenSyncL(*iObserver);
<a name="l00157"></a>00157         CleanupStack::PushL(iSession);
<a name="l00158"></a>00158         iEntry = CMsvEntry::NewL(*iSession, KMsvDraftEntryId, 
<a name="l00159"></a>00159         TMsvSelectionOrdering(KMsvNoGrouping,EMsvSortByNone,ETrue));
<a name="l00160"></a>00160         CleanupStack::PushL(iEntry);
<a name="l00161"></a>00161 
<a name="l00162"></a>00162         iSelection = iEntry-&gt;ChildrenL();
<a name="l00163"></a>00163         CleanupStack::PushL(iSelection);
<a name="l00164"></a>00164         
<a name="l00165"></a>00165         TInt count = iSelection-&gt;Count();
<a name="l00166"></a>00166         <span class="keywordflow">if</span> ( count == 0) <span class="comment">// Check no message</span>
<a name="l00167"></a>00167                 {
<a name="l00168"></a>00168                 CleanupStack::PopAndDestroy(iSelection);
<a name="l00169"></a>00169                 iSelection = NULL;
<a name="l00170"></a>00170                 }       
<a name="l00171"></a>00171 
<a name="l00172"></a>00172         aMessage.CreateL(iSendAs, sendAsMtmUid);
<a name="l00173"></a>00173         aMessage.SetBodyTextL(KBodyText);
<a name="l00174"></a>00174         aMessage.AddRecipientL(KAddress1, KAlias1, RSendAsMessage::ESendAsRecipientTo);
<a name="l00175"></a>00175         aMessage.AddRecipientL(KAddress3, RSendAsMessage::ESendAsRecipientCc);
<a name="l00176"></a>00176         aMessage.AddRecipientL(KAddress4, KAlias2, RSendAsMessage::ESendAsRecipientCc);
<a name="l00177"></a>00177 
<a name="l00178"></a>00178         TUid bioType = KUidBIOVCardMsg;
<a name="l00179"></a>00179         aMessage.SetBioTypeL(bioType);  
<a name="l00180"></a>00180         iEntry-&gt;SetEntryL(KMsvSentEntryId);
<a name="l00181"></a>00181         
<a name="l00182"></a>00182         
<a name="l00183"></a>00183                 
<a name="l00184"></a>00184         iEntry-&gt;SetEntryL(KMsvDraftEntryId);
<a name="l00185"></a>00185         iSelection = iEntry-&gt;ChildrenL();
<a name="l00186"></a>00186         CleanupStack::PushL(iSelection);        
<a name="l00187"></a>00187         <span class="keywordflow">if</span>(iSelection-&gt;Count() &gt;= 1)
<a name="l00188"></a>00188                 {
<a name="l00189"></a>00189                 iEntry-&gt;SetEntryL((*iSelection)[0]);
<a name="l00190"></a>00190                 }
<a name="l00191"></a>00191         }
<a name="l00192"></a>00192 
<a name="l00197"></a><a class="code" href="class_c_bio_message.html#a0f336f9e53bd3571c779ead43c128d94">00197</a> <span class="keywordtype">void</span> <a class="code" href="class_c_bio_message.html#a0f336f9e53bd3571c779ead43c128d94">CBioMessage::SendL</a>(RSendAsMessage&amp; aMessage)
<a name="l00198"></a>00198         {
<a name="l00199"></a>00199         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextSend, <span class="stringliteral">&quot;\n #4. Sending the BIO message ............ \n&quot;</span>);
<a name="l00200"></a>00200         iConsole-&gt;Printf ( KTextSend );
<a name="l00201"></a>00201         iConsole-&gt;Getch ();
<a name="l00202"></a>00202         
<a name="l00203"></a>00203         CMsvOperationWait* wait = CMsvOperationWait::NewLC();
<a name="l00204"></a>00204         wait-&gt;iStatus = KRequestPending;
<a name="l00205"></a>00205         wait-&gt;Start();
<a name="l00206"></a>00206         
<a name="l00207"></a>00207         aMessage.SendMessageAndCloseL();
<a name="l00208"></a>00208         
<a name="l00209"></a>00209         CleanupStack::PopAndDestroy();  <span class="comment">// wait</span>
<a name="l00210"></a>00210         
<a name="l00211"></a>00211         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextClose, <span class="stringliteral">&quot;\n The BIO message has been sent \n&quot;</span>);
<a name="l00212"></a>00212         iConsole-&gt;Printf ( KTextClose );
<a name="l00213"></a>00213         iConsole-&gt;Getch ();
<a name="l00214"></a>00214         }
<a name="l00215"></a>00215 
<a name="l00219"></a><a class="code" href="class_c_bio_message.html#a16077d11e253b5f91447fd56668c778b">00219</a> <span class="keywordtype">void</span> <a class="code" href="class_c_bio_message.html#a16077d11e253b5f91447fd56668c778b">CBioMessage::ParseL</a>()
<a name="l00220"></a>00220         {
<a name="l00221"></a>00221         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextParse, <span class="stringliteral">&quot;\n #5. Parsing the BIO message ............ \n&quot;</span>);
<a name="l00222"></a>00222         iConsole-&gt;Printf ( KTextParse );
<a name="l00223"></a>00223         iConsole-&gt;Getch ();
<a name="l00224"></a>00224         
<a name="l00225"></a>00225         <a class="code" href="class_c_bio_parser.html">CBioParser</a>* bioParser = CBioParser::NewL(iEntry);
<a name="l00226"></a>00226         bioParser-&gt;ParserL();
<a name="l00227"></a>00227         
<a name="l00228"></a>00228         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTextParsed, <span class="stringliteral">&quot;\n The BIO message has been parsed \n&quot;</span>);
<a name="l00229"></a>00229         iConsole-&gt;Printf ( KTextParsed );
<a name="l00230"></a>00230         iConsole-&gt;Getch ();
<a name="l00231"></a>00231         
<a name="l00232"></a>00232         <span class="keyword">delete</span> bioParser;
<a name="l00233"></a>00233         }
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 LOCAL_C <span class="keywordtype">void</span> MainL()
<a name="l00236"></a>00236         {
<a name="l00237"></a>00237         CActiveScheduler* scheduler = <span class="keyword">new</span> (ELeave) CActiveScheduler;
<a name="l00238"></a>00238         CActiveScheduler::Install( scheduler );
<a name="l00239"></a>00239         
<a name="l00240"></a>00240         <a class="code" href="class_c_bio_message.html">CBioMessage</a>* app = CBioMessage::NewL();
<a name="l00241"></a>00241         CleanupStack::PushL(app);
<a name="l00242"></a>00242         app-&gt;StartL();
<a name="l00243"></a>00243         CleanupStack::PopAndDestroy(app);
<a name="l00244"></a>00244         
<a name="l00245"></a>00245         <span class="keyword">delete</span> scheduler;
<a name="l00246"></a>00246         }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 GLDEF_C TInt E32Main()
<a name="l00249"></a>00249         {
<a name="l00250"></a>00250     __UHEAP_MARK;
<a name="l00251"></a>00251     CTrapCleanup* cleanup = CTrapCleanup::New();
<a name="l00252"></a>00252     <span class="keywordflow">if</span>(cleanup == NULL)
<a name="l00253"></a>00253         {
<a name="l00254"></a>00254         <span class="keywordflow">return</span> KErrNoMemory;
<a name="l00255"></a>00255         }
<a name="l00256"></a>00256     TRAPD(err, MainL());
<a name="l00257"></a>00257         <span class="keywordflow">if</span>(err != KErrNone)
<a name="l00258"></a>00258                 {       
<a name="l00259"></a>00259                 User::Panic(_L(<span class="stringliteral">&quot;failed to complete&quot;</span>),err);
<a name="l00260"></a>00260                 }
<a name="l00261"></a>00261 
<a name="l00262"></a>00262     <span class="keyword">delete</span> cleanup;
<a name="l00263"></a>00263     __UHEAP_MARKEND;
<a name="l00264"></a>00264     <span class="keywordflow">return</span> KErrNone;
<a name="l00265"></a>00265         }
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

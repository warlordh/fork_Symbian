<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/SysLibs/Clipboard/Basics/Basics.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/SysLibs/Clipboard/Basics/Basics.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2000-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">// Example demonstrates a simple use of the clipboard.</span>
<a name="l00015"></a>00015 <span class="comment">//</span>
<a name="l00016"></a>00016                 
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;baclipb.h&gt;</span>    
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;CommonToResourceFilesEx.h&quot;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;Basics.h&quot;</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="comment">// Do the example(s)</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="keyword">static</span> <span class="keywordtype">void</span> doExampleL()
<a name="l00029"></a>00029     {
<a name="l00030"></a>00030         doCopyL();
<a name="l00031"></a>00031         doPasteL();
<a name="l00032"></a>00032         }
<a name="l00033"></a>00033 
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">static</span> <span class="keywordtype">void</span> doCopyL()
<a name="l00039"></a>00039         {
<a name="l00040"></a>00040         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KSomeText,<span class="stringliteral">&quot;Some text&quot;</span>);
<a name="l00041"></a>00041         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KContentOfTheCClassAObject,<span class="stringliteral">&quot;Content of the CClassA object ...&quot;</span>);
<a name="l00042"></a>00042 
<a name="l00043"></a>00043         <span class="comment">// Construct an object of type CClassA</span>
<a name="l00044"></a>00044         <a class="code" href="class_c_class_a.html">CClassA</a>*  item = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_class_a.html">CClassA</a>;
<a name="l00045"></a>00045         CleanupStack::PushL(item);
<a name="l00046"></a>00046 
<a name="l00047"></a>00047         <span class="comment">// Put some data into it</span>
<a name="l00048"></a>00048         item-&gt;iBuffer = KSomeText;
<a name="l00049"></a>00049         item-&gt;iXA     = -1;
<a name="l00050"></a>00050         item-&gt;iYA     = 2;
<a name="l00051"></a>00051 
<a name="l00052"></a>00052         <span class="comment">// Show contents of the CClassA object</span>
<a name="l00053"></a>00053         doShow(KContentOfTheCClassAObject,item);
<a name="l00054"></a>00054 
<a name="l00055"></a>00055         <span class="comment">// Construct the clipboard object and prepare the </span>
<a name="l00056"></a>00056         <span class="comment">// clipboard for writing</span>
<a name="l00057"></a>00057         CClipboard* cb = CClipboard::NewForWritingLC(fsSession);
<a name="l00058"></a>00058 
<a name="l00059"></a>00059         <span class="comment">// Now put the object onto the clipboard and identify the data with</span>
<a name="l00060"></a>00060         <span class="comment">// the uid KExampleClipUid. In a real app, this would typically be </span>
<a name="l00061"></a>00061         <span class="comment">// done in response to a request from the user interface to cut or copy.</span>
<a name="l00062"></a>00062         <span class="comment">//</span>
<a name="l00063"></a>00063         <span class="comment">// Note that the value of KExampleClipUid is arbitrary and is used</span>
<a name="l00064"></a>00064         <span class="comment">// solely for the purpose oif demonstration</span>
<a name="l00065"></a>00065         RStoreWriteStream  stream;
<a name="l00066"></a>00066         TStreamId stid = stream.CreateLC(cb-&gt;Store());
<a name="l00067"></a>00067         stream &lt;&lt; *item;
<a name="l00068"></a>00068         stream.CommitL();
<a name="l00069"></a>00069         (cb-&gt;StreamDictionary()).AssignL(KExampleClipUid,stid);
<a name="l00070"></a>00070         CleanupStack::PopAndDestroy(); <span class="comment">//the stream</span>
<a name="l00071"></a>00071         
<a name="l00072"></a>00072         <span class="comment">// commit the clipboard - this writes the stream dictionary to the</span>
<a name="l00073"></a>00073         <span class="comment">// store as the root stream and commits all changes to the store </span>
<a name="l00074"></a>00074         cb-&gt;CommitL();
<a name="l00075"></a>00075 
<a name="l00076"></a>00076         <span class="comment">// Delete the clipboard object - this closes the clipboard file store</span>
<a name="l00077"></a>00077         <span class="comment">// and delete the CClassA object</span>
<a name="l00078"></a>00078         CleanupStack::PopAndDestroy(2);
<a name="l00079"></a>00079         }
<a name="l00080"></a>00080 
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="keyword">static</span> <span class="keywordtype">void</span> doPasteL()
<a name="l00085"></a>00085         {
<a name="l00086"></a>00086         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KNothingToPaste,<span class="stringliteral">&quot;Nothing to paste&quot;</span>);
<a name="l00087"></a>00087         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTheCClassAObjectAfterPastingIn,<span class="stringliteral">&quot;The CClassA object after pasting in ...&quot;</span>);
<a name="l00088"></a>00088 
<a name="l00089"></a>00089         CClipboard* cb = NULL;
<a name="l00090"></a>00090 
<a name="l00091"></a>00091         <span class="comment">// Construct the clipboard object and prepare the </span>
<a name="l00092"></a>00092         <span class="comment">// clipboard for reading.</span>
<a name="l00093"></a>00093         TRAPD(ret,cb=CClipboard::NewForReadingL(fsSession));
<a name="l00094"></a>00094         CleanupStack::PushL(cb);
<a name="l00095"></a>00095     <span class="keywordflow">if</span> (ret!=KErrNone)
<a name="l00096"></a>00096                 {
<a name="l00097"></a>00097                 doShow(KNothingToPaste,NULL);
<a name="l00098"></a>00098                 User::Leave(ret);
<a name="l00099"></a>00099                 }
<a name="l00100"></a>00100                 
<a name="l00101"></a>00101         <span class="comment">// Construct an object of type CClassA</span>
<a name="l00102"></a>00102         <a class="code" href="class_c_class_a.html">CClassA</a>*  item = <span class="keyword">new</span> (ELeave) <a class="code" href="class_c_class_a.html">CClassA</a>;
<a name="l00103"></a>00103         CleanupStack::PushL(item);
<a name="l00104"></a>00104 
<a name="l00105"></a>00105         <span class="comment">// Check whether there is a CClassA object on the clipboard</span>
<a name="l00106"></a>00106         TStreamId stid = (cb-&gt;StreamDictionary()).At(KExampleClipUid);
<a name="l00107"></a>00107         <span class="keywordflow">if</span> (stid == KNullStreamId)
<a name="l00108"></a>00108                 {
<a name="l00109"></a>00109                 doShow(KNothingToPaste,NULL);
<a name="l00110"></a>00110                 User::Leave(0);
<a name="l00111"></a>00111                 }
<a name="l00112"></a>00112         
<a name="l00113"></a>00113         <span class="comment">// Fetch the CClassA object from the clipboard</span>
<a name="l00114"></a>00114         RStoreReadStream stream;
<a name="l00115"></a>00115         stream.OpenLC(cb-&gt;Store(),stid);
<a name="l00116"></a>00116         stream &gt;&gt; *item;
<a name="l00117"></a>00117         CleanupStack::PopAndDestroy();  <span class="comment">// the stream</span>
<a name="l00118"></a>00118         
<a name="l00119"></a>00119         <span class="comment">// Show contents of the CClassA object as pasted in</span>
<a name="l00120"></a>00120         <span class="comment">// from the  clipboard.</span>
<a name="l00121"></a>00121         doShow(KTheCClassAObjectAfterPastingIn,item);
<a name="l00122"></a>00122 
<a name="l00123"></a>00123         <span class="comment">// delete:</span>
<a name="l00124"></a>00124         <span class="comment">// 1. the CClassA object</span>
<a name="l00125"></a>00125         <span class="comment">// 2. the clipboard object</span>
<a name="l00126"></a>00126         CleanupStack::PopAndDestroy(2);
<a name="l00127"></a>00127         }
<a name="l00128"></a>00128 
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 <span class="keyword">static</span> <span class="keywordtype">void</span> doShow(<span class="keyword">const</span> TDesC&amp; aHeading,<span class="keyword">const</span> <a class="code" href="class_c_class_a.html">CClassA</a>* anItem)
<a name="l00133"></a>00133         {
<a name="l00134"></a>00134         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KNewline,<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00135"></a>00135         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatS,<span class="stringliteral">&quot;\n%S&quot;</span>);
<a name="l00136"></a>00136         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatD,<span class="stringliteral">&quot;\n%d&quot;</span>);
<a name="l00137"></a>00137         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormatU,<span class="stringliteral">&quot;\n%u&quot;</span>);
<a name="l00138"></a>00138 
<a name="l00139"></a>00139         console-&gt;Printf(KNewline);
<a name="l00140"></a>00140         console-&gt;Printf(aHeading);
<a name="l00141"></a>00141         <span class="keywordflow">if</span> (anItem)
<a name="l00142"></a>00142                 {
<a name="l00143"></a>00143                 console-&gt;Printf(KFormatS,&amp;anItem-&gt;iBuffer);
<a name="l00144"></a>00144                 console-&gt;Printf(KFormatD,anItem-&gt;iXA);
<a name="l00145"></a>00145                 console-&gt;Printf(KFormatU,anItem-&gt;iYA);
<a name="l00146"></a>00146                 console-&gt;Printf(KNewline);
<a name="l00147"></a>00147                 }
<a name="l00148"></a>00148         }
<a name="l00149"></a>00149 
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 CClassA::CClassA()
<a name="l00154"></a>00154         {
<a name="l00155"></a>00155         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KDefault,<span class="stringliteral">&quot;DEFAULT&quot;</span>);
<a name="l00156"></a>00156         iBuffer = KDefault;
<a name="l00157"></a>00157         }
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 <span class="keywordtype">void</span> CClassA::ExternalizeL(RWriteStream&amp; aStream)<span class="keyword"> const</span>
<a name="l00160"></a>00160 <span class="keyword">        </span>{
<a name="l00161"></a>00161         aStream &lt;&lt; iBuffer;
<a name="l00162"></a>00162         aStream.WriteInt32L(iXA);
<a name="l00163"></a>00163         aStream.WriteUint32L(iYA);
<a name="l00164"></a>00164         }  
<a name="l00165"></a>00165  
<a name="l00166"></a>00166 <span class="keywordtype">void</span> CClassA::InternalizeL(RReadStream&amp; aStream)
<a name="l00167"></a>00167         {
<a name="l00168"></a>00168         aStream &gt;&gt; iBuffer;
<a name="l00169"></a>00169         iXA  = aStream.ReadInt32L();
<a name="l00170"></a>00170         iYA  = aStream.ReadUint32L();
<a name="l00171"></a>00171         }  
<a name="l00172"></a>00172         
<a name="l00173"></a>00173                 
<a name="l00174"></a>00174 
<a name="l00175"></a>00175         
<a name="l00176"></a>00176          
<a name="l00177"></a>00177 
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

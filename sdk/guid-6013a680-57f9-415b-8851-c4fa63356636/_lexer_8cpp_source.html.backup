<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Base/BufsAndStrings/Lexer/Lexer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Base/BufsAndStrings/Lexer/Lexer.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright (c) 2000-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00002"></a>00002 <span class="comment">// All rights reserved.</span>
<a name="l00003"></a>00003 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00004"></a>00004 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00005"></a>00005 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00006"></a>00006 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Initial Contributors:</span>
<a name="l00009"></a>00009 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// Contributors:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Description:</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;e32std.h&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;e32cons.h&gt;</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="keyword">const</span> TInt KMaxCalcCommandBuffer=80;
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">//Common literal text</span>
<a name="l00022"></a>00022  
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtErrInExpress,<span class="stringliteral">&quot;    Error in expression, cannot evaluate. &quot;</span>);
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 CConsoleBase* console;
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 
<a name="l00031"></a>00031 <span class="comment">// Stack classes</span>
<a name="l00033"></a>00033 <span class="comment"></span>
<a name="l00034"></a>00034 <span class="comment">//</span>
<a name="l00035"></a>00035 <span class="comment">// Stack element class - linked list of TReals</span>
<a name="l00036"></a>00036 <span class="comment">//</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">class </span>CRpnStackElement : <span class="keyword">public</span> CBase
<a name="l00039"></a>00039         {
<a name="l00040"></a>00040         <span class="keyword">friend</span> <span class="keyword">class </span>CRpnStack ;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042         <span class="keyword">private</span>:
<a name="l00043"></a>00043                 CRpnStackElement* iNext ;
<a name="l00044"></a>00044                 TReal iValue ;
<a name="l00045"></a>00045 
<a name="l00046"></a>00046         <span class="keyword">public</span>:
<a name="l00047"></a>00047                 <span class="keyword">static</span> CRpnStackElement* NewL ( <span class="keyword">const</span> TReal&amp; aReal, CRpnStackElement* aStackElement) ;
<a name="l00048"></a>00048                 <span class="keywordtype">void</span>   ConstructL (<span class="keyword">const</span> TReal&amp; aReal, CRpnStackElement* aStackElement) ;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050         <span class="keyword">public</span>:
<a name="l00051"></a>00051                 CRpnStackElement() {} ;
<a name="l00052"></a>00052         }  ;
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="comment">//</span>
<a name="l00056"></a>00056 <span class="comment">// Stack class - just constructor, destructor, push, pop &amp; empty-test.</span>
<a name="l00057"></a>00057 <span class="comment">//</span>
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="keyword">class </span>CRpnStack : <span class="keyword">public</span> CBase
<a name="l00060"></a>00060         {
<a name="l00061"></a>00061         <span class="keyword">private</span>: 
<a name="l00062"></a>00062                 CRpnStackElement* iTop ;  <span class="comment">// pointer to top of stack element</span>
<a name="l00063"></a>00063 
<a name="l00064"></a>00064         <span class="keyword">public</span>:
<a name="l00065"></a>00065                 <span class="keyword">static</span> CRpnStack* NewL () ;
<a name="l00066"></a>00066                 <span class="keywordtype">void</span>   ConstructL () ;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068                 ~CRpnStack() ;
<a name="l00069"></a>00069                 TReal Pop () ;
<a name="l00070"></a>00070                 <span class="keywordtype">void</span> Push (TReal aReal) ;
<a name="l00071"></a>00071                 TBool IsEmpty () ;
<a name="l00072"></a>00072         } ;
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 
<a name="l00076"></a>00076 <span class="comment">// Stack class implementations</span>
<a name="l00078"></a>00078 <span class="comment"></span>
<a name="l00079"></a>00079 <span class="comment">// stack element construction (2-part)</span>
<a name="l00080"></a>00080 CRpnStackElement* CRpnStackElement::NewL(<span class="keyword">const</span> TReal&amp; aReal, CRpnStackElement* aStackElement)
<a name="l00081"></a>00081         {
<a name="l00082"></a>00082         CRpnStackElement* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) CRpnStackElement ;
<a name="l00083"></a>00083         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00084"></a>00084         <span class="keyword">self</span>-&gt;ConstructL(aReal, aStackElement);
<a name="l00085"></a>00085         CleanupStack::Pop();
<a name="l00086"></a>00086         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00087"></a>00087         }
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="keywordtype">void</span> CRpnStackElement::ConstructL(<span class="keyword">const</span> TReal&amp; aReal, CRpnStackElement* aStackElement)
<a name="l00091"></a>00091         {
<a name="l00092"></a>00092         iValue = aReal;
<a name="l00093"></a>00093         iNext = aStackElement ;
<a name="l00094"></a>00094         }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">// stack construction</span>
<a name="l00098"></a>00098 CRpnStack* CRpnStack::NewL()
<a name="l00099"></a>00099         {
<a name="l00100"></a>00100         CRpnStack* <span class="keyword">self</span> = <span class="keyword">new</span> (ELeave) CRpnStack ;
<a name="l00101"></a>00101         CleanupStack::PushL(<span class="keyword">self</span>);
<a name="l00102"></a>00102         <span class="keyword">self</span>-&gt;ConstructL();
<a name="l00103"></a>00103         CleanupStack::Pop();
<a name="l00104"></a>00104         <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00105"></a>00105         }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 <span class="keywordtype">void</span> CRpnStack::ConstructL()
<a name="l00109"></a>00109         {
<a name="l00110"></a>00110         iTop = 0 ;
<a name="l00111"></a>00111         }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 <span class="comment">// stack destructor</span>
<a name="l00115"></a>00115 CRpnStack::~CRpnStack()
<a name="l00116"></a>00116         {
<a name="l00117"></a>00117         <span class="keywordflow">while</span> (!IsEmpty())   
<a name="l00118"></a>00118                 Pop() ;
<a name="l00119"></a>00119         }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 <span class="comment">// stack pop &amp; delete top element</span>
<a name="l00123"></a>00123 TReal CRpnStack::Pop ()
<a name="l00124"></a>00124         {
<a name="l00125"></a>00125         TReal value = iTop-&gt;iValue ;  <span class="comment">// get return value</span>
<a name="l00126"></a>00126         CRpnStackElement* old = iTop ;  <span class="comment">// keep old top of stack pointer</span>
<a name="l00127"></a>00127         iTop = iTop-&gt;iNext;  <span class="comment">// move top of stack pointer to next element</span>
<a name="l00128"></a>00128         <span class="keyword">delete</span> old ;  <span class="comment">// delete old top of stack element</span>
<a name="l00129"></a>00129         old = 0 ;  <span class="comment">// don&#39;t want old used again</span>
<a name="l00130"></a>00130         <span class="keywordflow">return</span> value ;  <span class="comment">// return the value</span>
<a name="l00131"></a>00131         } 
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 <span class="comment">// stack push new element</span>
<a name="l00135"></a>00135 <span class="keywordtype">void</span> CRpnStack::Push (TReal aReal)
<a name="l00136"></a>00136         {
<a name="l00137"></a>00137         TRAPD(err,iTop = CRpnStackElement::NewL(aReal, iTop)) ; 
<a name="l00138"></a>00138         <span class="keywordflow">if</span>(err)
<a name="l00139"></a>00139                 {
<a name="l00140"></a>00140                         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormat2,<span class="stringliteral">&quot;Push failed: leave code=%d&quot;</span>);
<a name="l00141"></a>00141                         console-&gt;Printf(KFormat2,err);  
<a name="l00142"></a>00142                 }
<a name="l00143"></a>00143         } 
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 <span class="comment">// stack empty test</span>
<a name="l00147"></a>00147 TBool CRpnStack::IsEmpty ()
<a name="l00148"></a>00148         {
<a name="l00149"></a>00149         <span class="keywordflow">return</span> (iTop == 0) ;
<a name="l00150"></a>00150         }
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 
<a name="l00154"></a>00154 <span class="comment">//  RPN calculator engine class</span>
<a name="l00156"></a>00156 <span class="comment"></span>
<a name="l00157"></a>00157 <span class="keyword">class </span>CRpnCalculator
<a name="l00158"></a>00158         {
<a name="l00159"></a>00159         <span class="keyword">private</span>:
<a name="l00160"></a>00160                 <span class="keyword">static</span> TReal GetIntegerPart(TLex&amp; aInput) ;
<a name="l00161"></a>00161                 <span class="keyword">static</span> TReal GetFractionalPart(TLex&amp; aInput) ;
<a name="l00162"></a>00162                 <span class="keyword">static</span> TInt  DealWithNum(CRpnStack* aStack, TLex&amp; aInput) ;
<a name="l00163"></a>00163                 <span class="keyword">static</span> TInt  RPNCalcEngineL(<span class="keyword">const</span> TDesC&amp; aCommand, TReal&amp; aReturnValue) ;
<a name="l00164"></a>00164                 <span class="keyword">static</span> TInt  doRPNCalcEngine(TLex&amp; aInput,CRpnStack* stack,TReal&amp; aReturnValue);
<a name="l00165"></a>00165                 <span class="keyword">static</span> <span class="keywordtype">void</span>  DisplayAnswer(TReal aValue) ;
<a name="l00166"></a>00166                 <span class="keyword">static</span> TBool TextInput(TDes&amp; aBuf) ;
<a name="l00167"></a>00167         <span class="keyword">public</span>:
<a name="l00168"></a>00168                 <span class="keyword">static</span> <span class="keywordtype">void</span> RunRPNCalculatorL() ;
<a name="l00169"></a>00169         } ;
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 
<a name="l00173"></a>00173 <span class="comment">//  RPN calculator engine : numeric routines</span>
<a name="l00175"></a>00175 <span class="comment"></span>
<a name="l00176"></a>00176 TReal CRpnCalculator::GetIntegerPart(TLex&amp; aInput) 
<a name="l00177"></a>00177 <span class="comment">// Finds a UInt. Also used before decimal point for RPN TReal processing</span>
<a name="l00178"></a>00178         {
<a name="l00179"></a>00179         TReal accumulator =  0 ;
<a name="l00180"></a>00180 
<a name="l00181"></a>00181         <span class="keywordflow">while</span> ((aInput.Peek()).IsDigit())
<a name="l00182"></a>00182                 {
<a name="l00183"></a>00183                 accumulator = (accumulator * 10) + ( (TReal)aInput.Get() - (TReal)<span class="charliteral">&#39;0&#39;</span> ) ;
<a name="l00184"></a>00184                 }
<a name="l00185"></a>00185         <span class="keywordflow">return</span> accumulator ;
<a name="l00186"></a>00186         }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 TReal CRpnCalculator::GetFractionalPart(TLex&amp; aInput) 
<a name="l00190"></a>00190 <span class="comment">// Finds a UInt. Used after decimal point for RPN TReal processing</span>
<a name="l00191"></a>00191         {
<a name="l00192"></a>00192         TReal accumulator =  0 ;
<a name="l00193"></a>00193         TReal multiplier = 0.1 ;
<a name="l00194"></a>00194 
<a name="l00195"></a>00195         <span class="keywordflow">while</span> ((aInput.Peek()).IsDigit())
<a name="l00196"></a>00196                 {
<a name="l00197"></a>00197                 accumulator +=  ( (TReal)aInput.Get() - (TReal)<span class="charliteral">&#39;0&#39;</span> ) * multiplier ;
<a name="l00198"></a>00198                 multiplier /= 10 ;
<a name="l00199"></a>00199                 }
<a name="l00200"></a>00200         <span class="keywordflow">return</span> accumulator ;
<a name="l00201"></a>00201         } 
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 TInt CRpnCalculator::DealWithNum(CRpnStack* aStack, TLex&amp; aInput) 
<a name="l00205"></a>00205 <span class="comment">// VERY basic scanning to extract and push a (Uint or real) number.</span>
<a name="l00206"></a>00206         {
<a name="l00207"></a>00207         TBool negative = EFalse ;
<a name="l00208"></a>00208         TReal answer =  0 ;
<a name="l00209"></a>00209         TLexMark startMark ;
<a name="l00210"></a>00210 
<a name="l00211"></a>00211         <span class="comment">// need something to parse</span>
<a name="l00212"></a>00212         <span class="keywordflow">if</span> (aInput.Eos())
<a name="l00213"></a>00213                 <span class="keywordflow">return</span> KErrNotFound ;
<a name="l00214"></a>00214         <span class="keywordflow">if</span> (!(aInput.Peek().IsDigit() || (aInput.Peek() == <span class="charliteral">&#39;.&#39;</span>) ) )
<a name="l00215"></a>00215                 <span class="keywordflow">return</span> KErrNotFound ;
<a name="l00216"></a>00216         
<a name="l00217"></a>00217         <span class="comment">// mark where we are, so can unwind</span>
<a name="l00218"></a>00218         aInput.Mark(startMark) ;
<a name="l00219"></a>00219 
<a name="l00220"></a>00220         <span class="comment">// deal with sign</span>
<a name="l00221"></a>00221         <span class="keywordflow">if</span> (aInput.Peek() == <span class="charliteral">&#39;+&#39;</span>) 
<a name="l00222"></a>00222                 aInput.Inc() ;
<a name="l00223"></a>00223         <span class="keywordflow">if</span> (aInput.Peek() == <span class="charliteral">&#39;-&#39;</span>) 
<a name="l00224"></a>00224                 {
<a name="l00225"></a>00225                 aInput.Inc() ;
<a name="l00226"></a>00226                 negative = ETrue ;
<a name="l00227"></a>00227                 }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229         <span class="comment">// check there&#39;s something to parse</span>
<a name="l00230"></a>00230         <span class="keywordflow">if</span> (aInput.Eos()) 
<a name="l00231"></a>00231                 <span class="keywordflow">return</span> KErrNotFound ;
<a name="l00232"></a>00232 
<a name="l00233"></a>00233         <span class="comment">// get number (may be complete integer or first part of a real)</span>
<a name="l00234"></a>00234         <span class="keywordflow">if</span> ((aInput.Peek()).IsDigit())
<a name="l00235"></a>00235                 answer = CRpnCalculator::GetIntegerPart(aInput)  ;
<a name="l00236"></a>00236 
<a name="l00237"></a>00237         <span class="comment">// negate if necessary</span>
<a name="l00238"></a>00238         <span class="keywordflow">if</span> (negative) 
<a name="l00239"></a>00239                 answer *= -1 ;
<a name="l00240"></a>00240 
<a name="l00241"></a>00241         <span class="comment">// look for decimal point - if found, parse real number</span>
<a name="l00242"></a>00242         <span class="keywordflow">if</span> (aInput.Peek() == <span class="charliteral">&#39;.&#39;</span>)
<a name="l00243"></a>00243                 {  <span class="comment">// may be dealing with real number.</span>
<a name="l00244"></a>00244                 aInput.Inc() ;
<a name="l00245"></a>00245                 <span class="keywordflow">if</span> (!(aInput.Peek()).IsDigit()) 
<a name="l00246"></a>00246                         {       <span class="comment">// found non-digit after decimal point. Error, so rewind &amp; exit</span>
<a name="l00247"></a>00247                         aInput.UnGetToMark(startMark) ;
<a name="l00248"></a>00248                         <span class="keywordflow">return</span> KErrCancel ;
<a name="l00249"></a>00249                         }
<a name="l00250"></a>00250                 <span class="comment">// now must parse digit(s) after decimal point</span>
<a name="l00251"></a>00251                 answer += CRpnCalculator::GetFractionalPart(aInput) ;
<a name="l00252"></a>00252                 aStack-&gt;Push(answer) ;
<a name="l00253"></a>00253                 <span class="keywordflow">return</span> KErrNone ;
<a name="l00254"></a>00254                 }
<a name="l00255"></a>00255         <span class="keywordflow">else</span>
<a name="l00256"></a>00256                 {  <span class="comment">// dealing with integer </span>
<a name="l00257"></a>00257                 aStack-&gt;Push(answer) ;
<a name="l00258"></a>00258                 <span class="keywordflow">return</span> KErrNone ;
<a name="l00259"></a>00259                 }
<a name="l00260"></a>00260         }
<a name="l00261"></a>00261 
<a name="l00262"></a>00262 
<a name="l00264"></a>00264 <span class="comment">//  Main body of the RPN calculator engine : calculator</span>
<a name="l00266"></a>00266 <span class="comment"></span>
<a name="l00267"></a>00267 TInt CRpnCalculator::doRPNCalcEngine(TLex&amp; aInput,CRpnStack* stack,TReal&amp; aReturnValue)
<a name="l00268"></a>00268         {
<a name="l00269"></a>00269         <span class="comment">//              extract a number if possible &amp; push</span>
<a name="l00270"></a>00270         <span class="comment">//              extract token, perform operation &amp; push result</span>
<a name="l00271"></a>00271         <span class="comment">//              if token is &#39;=&#39; or at end of string, pop &amp; print value</span>
<a name="l00272"></a>00272         TInt Err       = KErrNone;
<a name="l00273"></a>00273         TReal operand1 = 0;
<a name="l00274"></a>00274         TReal operand2 = 0 ;
<a name="l00275"></a>00275         TReal memory   = 0 ;
<a name="l00276"></a>00276 
<a name="l00277"></a>00277         <span class="keywordflow">do</span> 
<a name="l00278"></a>00278                 {
<a name="l00279"></a>00279                 aInput.SkipSpace() ;
<a name="l00280"></a>00280 
<a name="l00281"></a>00281                 <span class="keywordflow">if</span> (CRpnCalculator::DealWithNum(stack, aInput)== KErrNone) ;  <span class="comment">// parse for number </span>
<a name="l00282"></a>00282 
<a name="l00283"></a>00283     <span class="comment">/*  above line can be replaced by the following equivalent code:</span>
<a name="l00284"></a>00284 <span class="comment">                        </span>
<a name="l00285"></a>00285 <span class="comment">                        if (aInput.Val(extractReal) == KErrNone)</span>
<a name="l00286"></a>00286 <span class="comment">                                stack-&gt;Push(extractReal) ;</span>
<a name="l00287"></a>00287 <span class="comment">                        else if (aInput.Val(extractUint) == KErrNone)</span>
<a name="l00288"></a>00288 <span class="comment">                                stack-&gt;Push(TReal(extractUint)) ;</span>
<a name="l00289"></a>00289 <span class="comment">        */</span>
<a name="l00290"></a>00290 
<a name="l00291"></a>00291                 <span class="keywordflow">else</span> <span class="keywordflow">switch</span> ( aInput.Get() )
<a name="l00292"></a>00292                         {
<a name="l00293"></a>00293                         <span class="keywordflow">case</span><span class="charliteral">&#39;+&#39;</span> :
<a name="l00294"></a>00294                                 <span class="keywordflow">if</span> (!stack-&gt;IsEmpty()) operand2 = stack-&gt;Pop() ; <span class="keywordflow">else</span> Err = KErrGeneral ;
<a name="l00295"></a>00295                                 <span class="keywordflow">if</span> (!stack-&gt;IsEmpty()) operand1 = stack-&gt;Pop() ; <span class="keywordflow">else</span> Err = KErrGeneral;
<a name="l00296"></a>00296                                 <span class="keywordflow">if</span> (Err==KErrNone) stack-&gt;Push (operand1 + operand2) ;
<a name="l00297"></a>00297                                 break ;
<a name="l00298"></a>00298 
<a name="l00299"></a>00299                         <span class="keywordflow">case</span><span class="charliteral">&#39;-&#39;</span> :
<a name="l00300"></a>00300                                 <span class="keywordflow">if</span> (!stack-&gt;IsEmpty()) operand2 = stack-&gt;Pop() ; <span class="keywordflow">else</span> Err = KErrGeneral ;
<a name="l00301"></a>00301                                 <span class="keywordflow">if</span> (!stack-&gt;IsEmpty()) operand1 = stack-&gt;Pop() ; <span class="keywordflow">else</span> Err = KErrGeneral;
<a name="l00302"></a>00302                                 <span class="keywordflow">if</span> (Err==KErrNone) stack-&gt;Push (operand1 - operand2) ;
<a name="l00303"></a>00303                                 break ;
<a name="l00304"></a>00304 
<a name="l00305"></a>00305                         <span class="keywordflow">case</span> <span class="charliteral">&#39;*&#39;</span> :
<a name="l00306"></a>00306                                 <span class="keywordflow">if</span> (!stack-&gt;IsEmpty()) operand2 = stack-&gt;Pop() ; <span class="keywordflow">else</span> Err = KErrGeneral ;
<a name="l00307"></a>00307                                 <span class="keywordflow">if</span> (!stack-&gt;IsEmpty()) operand1 = stack-&gt;Pop() ; <span class="keywordflow">else</span> Err = KErrGeneral;
<a name="l00308"></a>00308                                 <span class="keywordflow">if</span> (Err==KErrNone) stack-&gt;Push (operand1 * operand2) ;
<a name="l00309"></a>00309                                 break ;
<a name="l00310"></a>00310 
<a name="l00311"></a>00311                         <span class="keywordflow">case</span><span class="charliteral">&#39;/&#39;</span> :
<a name="l00312"></a>00312                                 <span class="keywordflow">if</span> (!stack-&gt;IsEmpty()) operand2 = stack-&gt;Pop() ; <span class="keywordflow">else</span> Err = KErrGeneral ;
<a name="l00313"></a>00313                                 <span class="keywordflow">if</span> (!stack-&gt;IsEmpty()) operand1 = stack-&gt;Pop() ; <span class="keywordflow">else</span> Err = KErrGeneral;
<a name="l00314"></a>00314                                 <span class="keywordflow">if</span> (Err==KErrNone) stack-&gt;Push (operand1 / operand2) ;
<a name="l00315"></a>00315                                 break ; 
<a name="l00316"></a>00316                                                 
<a name="l00317"></a>00317                         <span class="keywordflow">case</span> <span class="charliteral">&#39;=&#39;</span> :
<a name="l00318"></a>00318                                 <span class="keywordflow">if</span> ( !(stack-&gt;IsEmpty() ) )
<a name="l00319"></a>00319                                 {       aReturnValue = stack-&gt;Pop() ;
<a name="l00320"></a>00320                                         <span class="keywordflow">return</span> KErrNone ;
<a name="l00321"></a>00321                                 }
<a name="l00322"></a>00322                                 <span class="keywordflow">else</span> <span class="keywordflow">return</span> KErrArgument ;
<a name="l00323"></a>00323 
<a name="l00324"></a>00324                         <span class="comment">// not found a valid one-character symbol, try key words...</span>
<a name="l00325"></a>00325                         <span class="keywordflow">default</span> :                       
<a name="l00326"></a>00326                                 <span class="keywordflow">if</span> (aInput.Offset() &gt; 0)  <span class="comment">// if not at start of line</span>
<a name="l00327"></a>00327                                         aInput.UnGet() ;  <span class="comment">// restore &#39;got&#39; character</span>
<a name="l00328"></a>00328 
<a name="l00329"></a>00329                                 aInput.Mark() ;  <span class="comment">// remember where we are</span>
<a name="l00330"></a>00330                                 aInput.SkipCharacters() ;  <span class="comment">// move to end of character token</span>
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 
<a name="l00333"></a>00333                                 <span class="keywordflow">if</span> ( aInput.TokenLength() != 0 )  <span class="comment">// if valid potential token</span>
<a name="l00334"></a>00334                                         {
<a name="l00335"></a>00335                                         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtMEMSET,<span class="stringliteral">&quot;MEMSET&quot;</span>);
<a name="l00336"></a>00336                                         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtMEMGET,<span class="stringliteral">&quot;MEMGET&quot;</span>);
<a name="l00337"></a>00337                                         TPtrC token = aInput.MarkedToken() ;  <span class="comment">// extract token</span>
<a name="l00338"></a>00338                                         <span class="keywordflow">if</span> ( token.CompareF(KTxtMEMSET) == 0)
<a name="l00339"></a>00339                                                 {
<a name="l00340"></a>00340                                                 <span class="keywordflow">if</span> ( !(stack-&gt;IsEmpty()) )  <span class="comment">// MEMSET - store top stack element</span>
<a name="l00341"></a>00341                                                         memory = stack-&gt;Pop() ;
<a name="l00342"></a>00342                                                 <span class="keywordflow">if</span> ( stack-&gt;IsEmpty() )  <span class="comment">// valid command, but empty stack will cause error, so</span>
<a name="l00343"></a>00343                                                         stack-&gt;Push(memory) ;
<a name="l00344"></a>00344                                                 }
<a name="l00345"></a>00345                                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( token.CompareF(KTxtMEMGET) == 0)
<a name="l00346"></a>00346                                                 stack-&gt;Push (memory) ;  <span class="comment">// MEMGET - push memory value</span>
<a name="l00347"></a>00347                                         <span class="keywordflow">else</span> 
<a name="l00348"></a>00348                                                 <span class="keywordflow">return</span> KErrNotSupported ;  <span class="comment">// unrecognised token</span>
<a name="l00349"></a>00349                                         }
<a name="l00350"></a>00350                                 <span class="keywordflow">else</span>  <span class="comment">// exit - can&#39;t be anything else</span>
<a name="l00351"></a>00351                                         {
<a name="l00352"></a>00352                                         <span class="keywordflow">return</span> KErrGeneral ;
<a name="l00353"></a>00353                                         }
<a name="l00354"></a>00354                         } ;  <span class="comment">// end switch</span>
<a name="l00355"></a>00355                 <span class="keywordflow">if</span> (Err == KErrGeneral) 
<a name="l00356"></a>00356                         <span class="comment">// error in expression (usually as there aren&#39;t 2 stack elements for token to operate on)</span>
<a name="l00357"></a>00357                         <span class="keywordflow">return</span> KErrArgument ;
<a name="l00358"></a>00358                 
<a name="l00359"></a>00359                 }       <span class="keywordflow">while</span> (!aInput.Eos())  ;
<a name="l00360"></a>00360 
<a name="l00361"></a>00361         <span class="keywordflow">if</span> ( !(stack-&gt;IsEmpty() ) )
<a name="l00362"></a>00362                 {
<a name="l00363"></a>00363                 aReturnValue = stack-&gt;Pop() ;
<a name="l00364"></a>00364                 <span class="keywordflow">return</span> KErrNone ;
<a name="l00365"></a>00365                 }
<a name="l00366"></a>00366         <span class="keywordflow">else</span> <span class="keywordflow">return</span> KErrArgument ;
<a name="l00367"></a>00367         }       
<a name="l00368"></a>00368 
<a name="l00369"></a>00369 
<a name="l00370"></a>00370 
<a name="l00372"></a>00372 <span class="comment">//  RPN calculator engine : calculator</span>
<a name="l00374"></a>00374 <span class="comment"></span>
<a name="l00375"></a>00375 TInt CRpnCalculator::RPNCalcEngineL(<span class="keyword">const</span> TDesC&amp; aCommand, TReal&amp; aReturnValue)
<a name="l00376"></a>00376         {
<a name="l00377"></a>00377         TInt ret;
<a name="l00378"></a>00378         TLex input(aCommand);
<a name="l00379"></a>00379         
<a name="l00380"></a>00380         CRpnStack* stack = CRpnStack::NewL();
<a name="l00381"></a>00381         CleanupStack::PushL(stack);
<a name="l00382"></a>00382         ret = CRpnCalculator::doRPNCalcEngine(input,stack,aReturnValue);
<a name="l00383"></a>00383         CleanupStack::PopAndDestroy(); 
<a name="l00384"></a>00384         <span class="keywordflow">return</span> ret;
<a name="l00385"></a>00385         }
<a name="l00386"></a>00386 
<a name="l00387"></a>00387 
<a name="l00388"></a>00388 
<a name="l00390"></a>00390 <span class="comment">//  RPN calculator UI : display routines</span>
<a name="l00392"></a>00392 <span class="comment"></span>
<a name="l00393"></a>00393 <span class="keywordtype">void</span> CRpnCalculator::DisplayAnswer(TReal aValue)
<a name="l00394"></a>00394         {
<a name="l00395"></a>00395         TRealFormat format ;
<a name="l00396"></a>00396         TBuf&lt;0x100&gt; convertRealToString;
<a name="l00397"></a>00397 
<a name="l00398"></a>00398         <span class="comment">// want a TLex from the value</span>
<a name="l00399"></a>00399 
<a name="l00400"></a>00400         <span class="keywordflow">if</span> (convertRealToString.Num(aValue,format) &lt; KErrNone )  <span class="comment">// if -ve, is an error, not a string length </span>
<a name="l00401"></a>00401                 console-&gt;Printf(KTxtErrInExpress);
<a name="l00402"></a>00402         <span class="keywordflow">else</span>
<a name="l00403"></a>00403                 {
<a name="l00404"></a>00404                 convertRealToString.ZeroTerminate();
<a name="l00405"></a>00405 
<a name="l00406"></a>00406                 TLex string(convertRealToString) ;
<a name="l00407"></a>00407                 <span class="comment">// got a TLex</span>
<a name="l00408"></a>00408         
<a name="l00409"></a>00409                 TLexMark start ;
<a name="l00410"></a>00410                 <span class="keywordtype">string</span>.Mark (start) ;  <span class="comment">// remember start of string position</span>
<a name="l00411"></a>00411 
<a name="l00412"></a>00412                 <span class="comment">// run through string, setting &#39;end&#39; to last digit found</span>
<a name="l00413"></a>00413                 <span class="keywordflow">while</span> (!<span class="keywordtype">string</span>.Eos() )
<a name="l00414"></a>00414                         {
<a name="l00415"></a>00415                         <span class="keywordflow">if</span> ( !(<span class="keywordtype">string</span>.Get() == <span class="charliteral">&#39;0&#39;</span>) ) <span class="keywordtype">string</span>.Mark() ;
<a name="l00416"></a>00416                         }
<a name="l00417"></a>00417 
<a name="l00418"></a>00418                 <span class="keywordtype">string</span>.UnGetToMark() ;  <span class="comment">// reset next character pointer to last digit</span>
<a name="l00419"></a>00419                 <span class="comment">// if Mark points to decimal point and not at Eos (i.e. a zero follows), include the zero</span>
<a name="l00420"></a>00420                 <span class="keywordflow">if</span> ( <span class="keywordtype">string</span>.Get() == <span class="charliteral">&#39;.&#39;</span> &amp;&amp; !<span class="keywordtype">string</span>.Eos() )
<a name="l00421"></a>00421                         <span class="keywordtype">string</span>.Mark() ;
<a name="l00422"></a>00422 
<a name="l00423"></a>00423                 <span class="comment">// display spaces after entered line</span>
<a name="l00424"></a>00424                 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtSpaces,<span class="stringliteral">&quot;  &quot;</span>);
<a name="l00425"></a>00425                 console-&gt;Write(KTxtSpaces) ;
<a name="l00426"></a>00426                 <span class="comment">// set Mark to start of string and display answer</span>
<a name="l00427"></a>00427                 console-&gt;Write( <span class="keywordtype">string</span>.MarkedToken(start)  ) ;
<a name="l00428"></a>00428                 }
<a name="l00429"></a>00429         }
<a name="l00430"></a>00430 
<a name="l00431"></a>00431 
<a name="l00433"></a>00433 <span class="comment">//  RPN calculator UI : line input  routine (adapted from tuiedit)</span>
<a name="l00435"></a>00435 <span class="comment"></span>
<a name="l00436"></a>00436 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtBackSlashSeven,<span class="stringliteral">&quot;\7&quot;</span>);
<a name="l00437"></a>00437 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtCursor,<span class="stringliteral">&quot;_&quot;</span>);
<a name="l00438"></a>00438 
<a name="l00439"></a>00439 TBool CRpnCalculator::TextInput(TDes&amp; aBuf)
<a name="l00440"></a>00440     {
<a name="l00441"></a>00441         TInt  pos;
<a name="l00442"></a>00442         
<a name="l00443"></a>00443         pos  = 0;
<a name="l00444"></a>00444         aBuf.Zero();
<a name="l00445"></a>00445         console-&gt;SetPos(0);
<a name="l00446"></a>00446         console-&gt;Write(KTxtCursor) ;  <span class="comment">// &quot;cursor&quot;</span>
<a name="l00447"></a>00447         console-&gt;SetPos(0);
<a name="l00448"></a>00448 
<a name="l00449"></a>00449         FOREVER
<a name="l00450"></a>00450                 {
<a name="l00451"></a>00451                 TChar gChar=console-&gt;Getch();
<a name="l00452"></a>00452                 <span class="keywordflow">switch</span> (gChar)
<a name="l00453"></a>00453                         {
<a name="l00454"></a>00454                         <span class="keywordflow">case</span> EKeyEscape:
<a name="l00455"></a>00455                                 <span class="keywordflow">return</span> (EFalse);
<a name="l00456"></a>00456                         <span class="keywordflow">case</span> EKeyEnter:
<a name="l00457"></a>00457                                 <span class="keywordflow">return</span> (ETrue);
<a name="l00458"></a>00458                         <span class="keywordflow">case</span> EKeyBackspace:     
<a name="l00459"></a>00459                                 <span class="keywordflow">if</span> (pos)
<a name="l00460"></a>00460                                         {
<a name="l00461"></a>00461                                         pos--;
<a name="l00462"></a>00462                                         aBuf.Delete(pos,1);
<a name="l00463"></a>00463                                         }
<a name="l00464"></a>00464                                 <span class="keywordflow">break</span>;
<a name="l00465"></a>00465                         <span class="keywordflow">default</span>:
<a name="l00466"></a>00466                                 <span class="keywordflow">if</span> (!gChar.IsPrint())
<a name="l00467"></a>00467                                         <span class="keywordflow">break</span>;
<a name="l00468"></a>00468                                 <span class="keywordflow">else</span>
<a name="l00469"></a>00469                                         <span class="keywordflow">if</span> ((aBuf.Length()&lt;KMaxCalcCommandBuffer)&amp;&amp;(pos&lt;KDefaultConsWidth-3))
<a name="l00470"></a>00470                                                 {
<a name="l00471"></a>00471                                                 TBuf&lt;0x02&gt; b;
<a name="l00472"></a>00472                                                 b.Append(gChar);
<a name="l00473"></a>00473                                                 aBuf.Insert(pos++,b);
<a name="l00474"></a>00474                                                 }
<a name="l00475"></a>00475                                         <span class="keywordflow">else</span>
<a name="l00476"></a>00476                                                 {
<a name="l00477"></a>00477                                                 console-&gt;Write(KTxtBackSlashSeven);
<a name="l00478"></a>00478                                                 <span class="keywordflow">break</span>;
<a name="l00479"></a>00479                                                 }
<a name="l00480"></a>00480                         }
<a name="l00481"></a>00481                         console-&gt;SetPos(pos) ;
<a name="l00482"></a>00482                         console-&gt;ClearToEndOfLine();
<a name="l00483"></a>00483                         console-&gt;SetPos(0);
<a name="l00484"></a>00484                         console-&gt;Write(aBuf);
<a name="l00485"></a>00485                         console-&gt;Write(KTxtCursor) ;  <span class="comment">// &quot;cursor&quot;</span>
<a name="l00486"></a>00486                         console-&gt;SetPos(pos);
<a name="l00487"></a>00487                 }
<a name="l00488"></a>00488         }
<a name="l00489"></a>00489 
<a name="l00490"></a>00490 
<a name="l00492"></a>00492 <span class="comment">//  finally the RPN calculator&#39;s driver code</span>
<a name="l00494"></a>00494 <span class="comment"></span>
<a name="l00495"></a>00495 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtStartingRPNCalc,<span class="stringliteral">&quot;Starting RPN Calculator\n\n&quot;</span>);
<a name="l00496"></a>00496 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtNewLine,<span class="stringliteral">&quot; \n&quot;</span>);
<a name="l00497"></a>00497 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtInvite,<span class="stringliteral">&quot;Type in a Reverse Polish\nexpression.\nPress ENTER to evaluate it\nPress ESC to end\n&quot;</span>);
<a name="l00498"></a>00498 
<a name="l00499"></a>00499 
<a name="l00500"></a>00500 
<a name="l00501"></a>00501 <span class="keywordtype">void</span> CRpnCalculator::RunRPNCalculatorL()
<a name="l00502"></a>00502         {
<a name="l00503"></a>00503         TBuf&lt;KMaxCalcCommandBuffer&gt; command;    
<a name="l00504"></a>00504         
<a name="l00505"></a>00505         console-&gt;Printf(KTxtStartingRPNCalc);
<a name="l00506"></a>00506         console-&gt;Printf(KTxtInvite);
<a name="l00507"></a>00507 
<a name="l00508"></a>00508         <span class="keywordflow">while</span> (CRpnCalculator::TextInput(command) ) 
<a name="l00509"></a>00509                 {
<a name="l00510"></a>00510                 TReal answer;
<a name="l00511"></a>00511 
<a name="l00512"></a>00512                 <span class="keywordflow">if</span> (CRpnCalculator::RPNCalcEngineL(command, answer) == KErrNone ) 
<a name="l00513"></a>00513                         CRpnCalculator::DisplayAnswer(answer) ;
<a name="l00514"></a>00514                 <span class="keywordflow">else</span>
<a name="l00515"></a>00515                         console-&gt;Printf(KTxtErrInExpress) ;
<a name="l00516"></a>00516                                 
<a name="l00517"></a>00517                 console-&gt;Printf(KTxtNewLine) ;
<a name="l00518"></a>00518                 console-&gt;Printf(KTxtInvite);
<a name="l00519"></a>00519                 }
<a name="l00520"></a>00520         }
<a name="l00521"></a>00521 
<a name="l00522"></a>00522 
<a name="l00524"></a>00524 <span class="comment">// This section deals with Symbian platform initialisation and ensuring we have a console active</span>
<a name="l00526"></a>00526 <span class="comment"></span>
<a name="l00527"></a>00527 
<a name="l00528"></a>00528 <span class="keywordtype">void</span> SetupConsoleL();
<a name="l00529"></a>00529 
<a name="l00530"></a>00530 <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtRPNCalcErr,<span class="stringliteral">&quot;RPN Calculator example error&quot;</span>);
<a name="l00531"></a>00531 
<a name="l00532"></a>00532 GLDEF_C TInt E32Main()  <span class="comment">// main function called by E32</span>
<a name="l00533"></a>00533     {
<a name="l00534"></a>00534         CTrapCleanup* cleanup=CTrapCleanup::New();  <span class="comment">// get clean-up stack</span>
<a name="l00535"></a>00535         TRAPD(error,SetupConsoleL());  <span class="comment">// more initialization, then do example</span>
<a name="l00536"></a>00536         __ASSERT_ALWAYS(!error,User::Panic(KTxtRPNCalcErr,error));
<a name="l00537"></a>00537         <span class="keyword">delete</span> cleanup;  <span class="comment">// destroy clean-up stack</span>
<a name="l00538"></a>00538         <span class="keywordflow">return</span> 0;  <span class="comment">// and return</span>
<a name="l00539"></a>00539     }
<a name="l00540"></a>00540 
<a name="l00541"></a>00541 
<a name="l00542"></a>00542 <span class="keywordtype">void</span> SetupConsoleL()  <span class="comment">// initialize and call example code under cleanup stack</span>
<a name="l00543"></a>00543     {
<a name="l00544"></a>00544         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtIntro,<span class="stringliteral">&quot;eulexrpn - RPN Calculator&quot;</span>);
<a name="l00545"></a>00545         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KFormat1,<span class="stringliteral">&quot;failed: leave code=%d&quot;</span>);
<a name="l00546"></a>00546         <a class="code" href="secureclientandserver_8h.html#a5eadd4429627d82193b37536d4faa03a">_LIT</a>(KTxtPressAnyKey,<span class="stringliteral">&quot;[Press any key to exit]&quot;</span>);
<a name="l00547"></a>00547 
<a name="l00548"></a>00548         console=Console::NewL(KTxtIntro,TSize(KConsFullScreen,KConsFullScreen));
<a name="l00549"></a>00549         CleanupStack::PushL(console);
<a name="l00550"></a>00550         TRAPD(error, CRpnCalculator::RunRPNCalculatorL());  <span class="comment">// perform example function</span>
<a name="l00551"></a>00551         <span class="keywordflow">if</span> (error)
<a name="l00552"></a>00552                 console-&gt;Printf(KFormat1, error);
<a name="l00553"></a>00553         console-&gt;Printf(KTxtPressAnyKey);
<a name="l00554"></a>00554         console-&gt;Getch();  <span class="comment">// get and ignore character</span>
<a name="l00555"></a>00555         CleanupStack::PopAndDestroy();  <span class="comment">// close console</span>
<a name="l00556"></a>00556     }
<a name="l00557"></a>00557 
<a name="l00558"></a>00558         
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

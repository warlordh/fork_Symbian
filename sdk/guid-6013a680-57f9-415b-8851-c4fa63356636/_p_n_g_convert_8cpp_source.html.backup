<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Multimedia/ICL/ICLCodec/PNGConvert.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Multimedia/ICL/ICLCodec/PNGConvert.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// PNGConvert.CPP</span>
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// Copyright (c) 2007-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00004"></a>00004 <span class="comment">// All rights reserved.</span>
<a name="l00005"></a>00005 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00006"></a>00006 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00007"></a>00007 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00008"></a>00008 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00009"></a>00009 <span class="comment">//</span>
<a name="l00010"></a>00010 <span class="comment">// Initial Contributors:</span>
<a name="l00011"></a>00011 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Contributors:</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 <span class="comment">// Description:</span>
<a name="l00016"></a>00016 <span class="comment">//</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="comment">// General BAFL headers</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;barsc.h&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;barsread.h&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;bautils.h&gt;</span>
<a name="l00023"></a>00023 <span class="comment">// ICL headers</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;imageconversion.h&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;ImageUtils.h&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;101F4122_extra.rsg&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;uids.h&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;PNGCodec.h&quot;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">//</span>
<a name="l00032"></a>00032 <span class="comment">// PNG decoder class</span>
<a name="l00033"></a>00033 <span class="comment">//</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="comment">// Simple factory function</span>
<a name="l00036"></a>00036 <a class="code" href="class_c_png_decoder.html">CPngDecoder</a>* CPngDecoder::NewL()
<a name="l00037"></a>00037         {
<a name="l00038"></a>00038         <span class="keywordflow">return</span> <span class="keyword">new</span>(ELeave) <a class="code" href="class_c_png_decoder.html">CPngDecoder</a>;
<a name="l00039"></a>00039         }
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 CPngDecoder::CPngDecoder()
<a name="l00042"></a>00042         {
<a name="l00043"></a>00043         }
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="comment">// Destructor calls base class cleanup</span>
<a name="l00046"></a>00046 CPngDecoder::~CPngDecoder()
<a name="l00047"></a>00047         {
<a name="l00048"></a>00048         Cleanup();
<a name="l00049"></a>00049         }
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="comment">// Gets the image type: always PNG, no sub type</span>
<a name="l00052"></a>00052 <span class="keywordtype">void</span> CPngDecoder::ImageType(TInt aFrameNumber, TUid&amp; aImageType, TUid&amp; aImageSubType)<span class="keyword"> const</span>
<a name="l00053"></a>00053 <span class="keyword">        </span>{
<a name="l00054"></a>00054         __ASSERT_ALWAYS(aFrameNumber == 0, Panic(KErrArgument));
<a name="l00055"></a>00055         aImageType = KImageTypePNGUid;
<a name="l00056"></a>00056         aImageSubType = KNullUid;
<a name="l00057"></a>00057         }
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="comment">// Scans the image header.</span>
<a name="l00060"></a>00060 <span class="keywordtype">void</span> CPngDecoder::ScanDataL()
<a name="l00061"></a>00061         {
<a name="l00062"></a>00062         <span class="comment">// Validate that format is correct</span>
<a name="l00063"></a>00063         ReadFormatL();
<a name="l00064"></a>00064         ASSERT(ImageReadCodec() == NULL);
<a name="l00065"></a>00065 
<a name="l00066"></a>00066         <span class="comment">// Create a codec to read the PNG image</span>
<a name="l00067"></a>00067         <a class="code" href="class_c_png_read_codec.html">CPngReadCodec</a>* imageReadCodec;
<a name="l00068"></a>00068         imageReadCodec = <span class="keyword">new</span>(ELeave) <a class="code" href="class_c_png_read_codec.html">CPngReadCodec</a>;
<a name="l00069"></a>00069         <span class="comment">// Let the framework takes ownership of the codec</span>
<a name="l00070"></a>00070         SetImageReadCodec(imageReadCodec);
<a name="l00071"></a>00071         imageReadCodec-&gt;ConstructL();
<a name="l00072"></a>00072 
<a name="l00073"></a>00073         <span class="comment">// Fill in image information for all frames</span>
<a name="l00074"></a>00074         ReadFrameHeadersL();
<a name="l00075"></a>00075         }
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="comment">// Validate that the file is PNG format</span>
<a name="l00078"></a>00078 <span class="keywordtype">void</span> CPngDecoder::ReadFormatL()
<a name="l00079"></a>00079         {
<a name="l00080"></a>00080         <span class="comment">// Read initial data block</span>
<a name="l00081"></a>00081         TPtrC8 bufferDes;
<a name="l00082"></a>00082         ReadDataL(0, bufferDes, KPngFileSignatureLength);
<a name="l00083"></a>00083 
<a name="l00084"></a>00084         <span class="comment">// Validate the header.</span>
<a name="l00085"></a>00085         <span class="keywordflow">if</span> (bufferDes.Length() &lt; KPngFileSignatureLength)
<a name="l00086"></a>00086                 User::Leave(KErrUnderflow);
<a name="l00087"></a>00087 
<a name="l00088"></a>00088         <span class="keyword">const</span> TUint8* ptr = bufferDes.Ptr();
<a name="l00089"></a>00089         <span class="keywordflow">if</span> (Mem::Compare(ptr, KPngFileSignatureLength, KPngSignature, KPngFileSignatureLength)!=0)
<a name="l00090"></a>00090                 User::Leave(KErrCorrupt);
<a name="l00091"></a>00091 
<a name="l00092"></a>00092         <span class="comment">// Set start position of image data following the header</span>
<a name="l00093"></a>00093         SetStartPosition(KPngFileSignatureLength);
<a name="l00094"></a>00094 
<a name="l00095"></a>00095         <span class="comment">// Set maximum data length as don&#39;t know exactly</span>
<a name="l00096"></a>00096         SetDataLength(KMaxTInt);
<a name="l00097"></a>00097         }
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 <span class="comment">// Gets text descriptions of image properties</span>
<a name="l00100"></a>00100 CFrameInfoStrings* CPngDecoder::FrameInfoStringsL(RFs&amp; aFs, TInt aFrameNumber)
<a name="l00101"></a>00101         {
<a name="l00102"></a>00102         <span class="keyword">const</span> TUid KPngCodecDllUid = {KExPNGCodecDllUidValue};
<a name="l00103"></a>00103 
<a name="l00104"></a>00104         <span class="comment">// Strings are read from 101F4122_extra.rss</span>
<a name="l00105"></a>00105         RResourceFile resourceFile;
<a name="l00106"></a>00106         OpenExtraResourceFileLC(aFs,KPngCodecDllUid,resourceFile);
<a name="l00107"></a>00107         HBufC8* resourceInfo = resourceFile.AllocReadLC(THEDECODERINFO);
<a name="l00108"></a>00108         TResourceReader resourceReader;
<a name="l00109"></a>00109         resourceReader.SetBuffer(resourceInfo);
<a name="l00110"></a>00110 
<a name="l00111"></a>00111         TBuf&lt;KCodecResourceStringMax&gt; info;
<a name="l00112"></a>00112         TBuf&lt;KCodecResourceStringMax&gt; templte;
<a name="l00113"></a>00113 
<a name="l00114"></a>00114         <span class="keyword">const</span> TFrameInfo&amp; frameInfo = FrameInfo(aFrameNumber);
<a name="l00115"></a>00115         CFrameInfoStrings* frameInfoStrings = CFrameInfoStrings::NewLC();
<a name="l00116"></a>00116 
<a name="l00117"></a>00117         <span class="comment">// Set decoder name</span>
<a name="l00118"></a>00118         info = resourceReader.ReadTPtrC();
<a name="l00119"></a>00119         frameInfoStrings-&gt;SetDecoderL(info);
<a name="l00120"></a>00120         <span class="comment">// Set image format name</span>
<a name="l00121"></a>00121         info = resourceReader.ReadTPtrC();
<a name="l00122"></a>00122         frameInfoStrings-&gt;SetFormatL(info);
<a name="l00123"></a>00123         <span class="comment">// Set image dimensions</span>
<a name="l00124"></a>00124         TInt width = frameInfo.iOverallSizeInPixels.iWidth;
<a name="l00125"></a>00125         TInt height = frameInfo.iOverallSizeInPixels.iHeight;
<a name="l00126"></a>00126         TInt depth = frameInfo.iBitsPerPixel;
<a name="l00127"></a>00127         templte = resourceReader.ReadTPtrC();
<a name="l00128"></a>00128         info.Format(templte, width, height);
<a name="l00129"></a>00129         frameInfoStrings-&gt;SetDimensionsL(info);
<a name="l00130"></a>00130         <span class="comment">// Set image depth, for colour or b/w as appropriate</span>
<a name="l00131"></a>00131         CDesCArrayFlat* resourceArray = resourceReader.ReadDesCArrayL();
<a name="l00132"></a>00132         CleanupStack::PushL(resourceArray);
<a name="l00133"></a>00133         TUint formatIndex = (frameInfo.iFlags &amp; TFrameInfo::EColor) ? 1 : 0;
<a name="l00134"></a>00134         templte = (*resourceArray)[formatIndex];
<a name="l00135"></a>00135         CleanupStack::PopAndDestroy(resourceArray);
<a name="l00136"></a>00136         info.Format(templte, depth);
<a name="l00137"></a>00137         frameInfoStrings-&gt;SetDepthL(info);
<a name="l00138"></a>00138         <span class="comment">// Set image details strings</span>
<a name="l00139"></a>00139         info = resourceReader.ReadTPtrC(); <span class="comment">// read details, then see if we use it</span>
<a name="l00140"></a>00140         <span class="keywordflow">if</span> (frameInfo.iFlags &amp; TFrameInfo::EAlphaChannel &amp;&amp; frameInfo.iFlags &amp; TFrameInfo::EColor)
<a name="l00141"></a>00141                 {
<a name="l00142"></a>00142                 frameInfoStrings-&gt;SetDetailsL(info);
<a name="l00143"></a>00143                 }
<a name="l00144"></a>00144         <span class="comment">// Cleanup and return</span>
<a name="l00145"></a>00145         CleanupStack::Pop(frameInfoStrings); 
<a name="l00146"></a>00146         CleanupStack::PopAndDestroy(2); <span class="comment">// resourceInfo + resourceFile</span>
<a name="l00147"></a>00147         <span class="keywordflow">return</span> frameInfoStrings;
<a name="l00148"></a>00148         }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="comment">//</span>
<a name="l00151"></a>00151 <span class="comment">// PNG encoder class</span>
<a name="l00152"></a>00152 <span class="comment">//</span>
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 <span class="comment">// Simple factory function</span>
<a name="l00155"></a>00155 <a class="code" href="class_c_png_encoder.html">CPngEncoder</a>* CPngEncoder::NewL()
<a name="l00156"></a>00156         {
<a name="l00157"></a>00157         <span class="keywordflow">return</span> <span class="keyword">new</span>(ELeave) <a class="code" href="class_c_png_encoder.html">CPngEncoder</a>;
<a name="l00158"></a>00158         }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 CPngEncoder::CPngEncoder()
<a name="l00161"></a>00161         {
<a name="l00162"></a>00162         }
<a name="l00163"></a>00163 
<a name="l00164"></a>00164 <span class="comment">// Destructor calls base class cleanup</span>
<a name="l00165"></a>00165 CPngEncoder::~CPngEncoder()
<a name="l00166"></a>00166         {
<a name="l00167"></a>00167         CImageEncoderPlugin::Cleanup();
<a name="l00168"></a>00168         }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 <span class="comment">// Sets up the codec to encode the frame</span>
<a name="l00171"></a>00171 <span class="keywordtype">void</span> CPngEncoder::PrepareEncoderL(<span class="keyword">const</span> CFrameImageData* aFrameImageData)
<a name="l00172"></a>00172         {
<a name="l00173"></a>00173         <span class="comment">// Default encode parameters</span>
<a name="l00174"></a>00174         TInt bpp = 24;
<a name="l00175"></a>00175         TBool color = ETrue;
<a name="l00176"></a>00176         TBool paletted = EFalse;
<a name="l00177"></a>00177         TInt compressionLevel = TPngEncodeData::EDefaultCompression;
<a name="l00178"></a>00178 
<a name="l00179"></a>00179         <span class="comment">// Use encode params in aFrameImageData, if present</span>
<a name="l00180"></a>00180         <span class="keyword">const</span> TInt count = (aFrameImageData) ? aFrameImageData-&gt;FrameDataCount() : 0;
<a name="l00181"></a>00181         <span class="keywordflow">for</span> (TInt i=0; i &lt; count; i++)
<a name="l00182"></a>00182                 {
<a name="l00183"></a>00183                 <span class="keyword">const</span> TFrameDataBlock* encoderData = aFrameImageData-&gt;GetFrameData(i);
<a name="l00184"></a>00184                 <span class="keywordflow">if</span> (encoderData-&gt;DataType() == KPNGEncodeDataUid)
<a name="l00185"></a>00185                         {
<a name="l00186"></a>00186                         <span class="keyword">const</span> TPngEncodeData* pngEncodeData = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>TPngEncodeData*<span class="keyword">&gt;</span>(encoderData);
<a name="l00187"></a>00187                         bpp = pngEncodeData-&gt;iBitsPerPixel;
<a name="l00188"></a>00188                         color = pngEncodeData-&gt;iColor;
<a name="l00189"></a>00189                         paletted = pngEncodeData-&gt;iPaletted;
<a name="l00190"></a>00190                         compressionLevel = pngEncodeData-&gt;iLevel;
<a name="l00191"></a>00191                         }
<a name="l00192"></a>00192                 }
<a name="l00193"></a>00193 
<a name="l00194"></a>00194         <span class="comment">// Create the codec to write a PNG image</span>
<a name="l00195"></a>00195         <a class="code" href="class_c_png_write_codec.html">CPngWriteCodec</a>* codec = <span class="keyword">new</span>(ELeave) <a class="code" href="class_c_png_write_codec.html">CPngWriteCodec</a>(bpp, color, paletted, compressionLevel);
<a name="l00196"></a>00196         <span class="comment">// Let the framework takes ownership of the codec</span>
<a name="l00197"></a>00197         SetImageWriteCodec(codec);              
<a name="l00198"></a>00198         codec-&gt;ConstructL();
<a name="l00199"></a>00199         }
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>

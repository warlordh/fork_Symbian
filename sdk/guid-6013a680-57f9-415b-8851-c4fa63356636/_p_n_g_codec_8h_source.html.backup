<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TB9.2 Example Applications: examples/Multimedia/ICL/ICLCodec/PNGCodec.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link type="text/css" rel="stylesheet" href="css/common.css" media="screen"/>
<link type="text/css" rel="stylesheet" href="css/sdl.css" media="screen"/>

<!--[if IE]>
<link href="css/iefix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->
</head>
<body class="kernelguide">
    
     <?php include_once (CURRENT_SKIN_PATH.'/sdl_header.html'); ?>
  <div id="sdl_container">
   <div id="leftMenu">
    <div id="expandcontractdiv">
     <a id="collapseTree" href="javascript:tree.collapseAll()">
      Collapse all
     </a>
     <a id="index" href="index.html">
      Symbian^3 Product Developer Library
     </a>
    </div>
    <iframe style="border:none" height="800" width="300" src="index-toc.html"></iframe>
<div id="treeDiv1">
     &#160;
    </div>
    <script type="text/javascript">
     var currentIconMode = 0;
	YAHOO.util.Event.onDOMReady(buildTree, this,true);
    </script>
   </div>
   <div id="sdl_content">
<!-- Generated by Doxygen 1.6.2 -->
<h1>examples/Multimedia/ICL/ICLCodec/PNGCodec.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// PngCodec.H</span>
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// Copyright (c) 2007-2009 Nokia Corporation and/or its subsidiary(-ies).</span>
<a name="l00004"></a>00004 <span class="comment">// All rights reserved.</span>
<a name="l00005"></a>00005 <span class="comment">// This component and the accompanying materials are made available</span>
<a name="l00006"></a>00006 <span class="comment">// under the terms of &quot;Eclipse Public License v1.0&quot;</span>
<a name="l00007"></a>00007 <span class="comment">// which accompanies this distribution, and is available</span>
<a name="l00008"></a>00008 <span class="comment">// at the URL &quot;http://www.eclipse.org/legal/epl-v10.html&quot;.</span>
<a name="l00009"></a>00009 <span class="comment">//</span>
<a name="l00010"></a>00010 <span class="comment">// Initial Contributors:</span>
<a name="l00011"></a>00011 <span class="comment">// Nokia Corporation - initial contribution.</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// Contributors:</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 <span class="comment">// Description:</span>
<a name="l00016"></a>00016 <span class="comment">//</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef __PNGCODEC_H__</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define __PNGCODEC_H__</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;bitdev.h&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;ezcompressor.h&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;ezdecompressor.h&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;icl/imageprocessor.h&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;icl/imagecodec.h&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;PNGConvert.h&quot;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="comment">//.</span>
<a name="l00031"></a>00031 <span class="comment">// Constants.relating to PNG standard </span>
<a name="l00032"></a>00032 <span class="comment">//</span>
<a name="l00033"></a>00033 <span class="keyword">const</span> TInt KPngFileSignatureLength = 8;
<a name="l00034"></a>00034 <span class="keyword">const</span> TUint8 KPngSignature[KPngFileSignatureLength] = { 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A };
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">const</span> TInt KPngChunkIdSize = 4;
<a name="l00037"></a>00037 <span class="keyword">const</span> TInt KPngMaxPLTESize = 256;
<a name="l00038"></a>00038 <span class="keyword">const</span> TInt KPngNumInterlacedPasses = 8; <span class="comment">// 7 passes plus a safety entry</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="keyword">const</span> TInt KPngChunkLengthSize = 4;
<a name="l00041"></a>00041 <span class="keyword">const</span> TInt KPngChunkCRCSize = 4;
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="keyword">const</span> TInt KPngIHDRChunkSize = 13;
<a name="l00044"></a>00044 <span class="keyword">const</span> TInt KPngIENDChunkSize = 0;
<a name="l00045"></a>00045 <span class="keyword">const</span> TInt KPngcHRMChunkSize = 32;
<a name="l00046"></a>00046 <span class="keyword">const</span> TInt KPnggAMAChunkSize = 4;
<a name="l00047"></a>00047 <span class="keyword">const</span> TInt KPngpHYsChunkSize = 9;
<a name="l00048"></a>00048 <span class="keyword">const</span> TInt KPngtIMEChunkSize = 7;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="comment">// KPngMaxImageSize is the maximum size for width and height, as defined in the PNG Specification v1.0 page 14</span>
<a name="l00051"></a>00051 <span class="keyword">const</span> TUint KPngMaxImageSize = ((TUint)2 &lt;&lt; 30) - 1;
<a name="l00052"></a>00052 <span class="keyword">const</span> TInt KPngCrcTableLength = 256;
<a name="l00053"></a>00053 <span class="keyword">const</span> TUint KPngCrcMask = 0xffffffff;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 _LIT8(KPngIHDRChunkId,<span class="stringliteral">&quot;IHDR&quot;</span>);
<a name="l00056"></a>00056 _LIT8(KPngPLTEChunkId,<span class="stringliteral">&quot;PLTE&quot;</span>);
<a name="l00057"></a>00057 _LIT8(KPngIDATChunkId,<span class="stringliteral">&quot;IDAT&quot;</span>);
<a name="l00058"></a>00058 _LIT8(KPngIENDChunkId,<span class="stringliteral">&quot;IEND&quot;</span>);
<a name="l00059"></a>00059 _LIT8(KPngbKGDChunkId,<span class="stringliteral">&quot;bKGD&quot;</span>);
<a name="l00060"></a>00060 _LIT8(KPngpHYsChunkId,<span class="stringliteral">&quot;pHYs&quot;</span>);
<a name="l00061"></a>00061 _LIT8(KPngtRNSChunkId,<span class="stringliteral">&quot;tRNS&quot;</span>);
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="comment">// .</span>
<a name="l00065"></a>00065 <span class="comment">// Encapsulates information about a PNG image</span>
<a name="l00066"></a>00066 <span class="comment">// See PNG standard for details.</span>
<a name="l00067"></a>00067 <span class="comment">// </span>
<a name="l00068"></a><a class="code" href="class_t_png_image_information.html">00068</a> <span class="keyword">class </span><a class="code" href="class_t_png_image_information.html">TPngImageInformation</a> : <span class="keyword">public</span> TFrameInfo
<a name="l00069"></a>00069         {
<a name="l00070"></a>00070 <span class="keyword">public</span>:
<a name="l00071"></a>00071         <a class="code" href="class_t_png_image_information.html">TPngImageInformation</a>();
<a name="l00072"></a>00072 <span class="keyword">public</span>:
<a name="l00073"></a>00073         <span class="keyword">enum</span> TColorElements
<a name="l00074"></a>00074                 {
<a name="l00075"></a>00075                 EMonochrome = 0x0,
<a name="l00076"></a>00076                 EPaletteUsed = 0x1,
<a name="l00077"></a>00077                 EColorUsed = 0x2,
<a name="l00078"></a>00078                 EAlphaChannelUsed = 0x4
<a name="l00079"></a>00079                 };
<a name="l00080"></a>00080         <span class="keyword">enum</span> TColorType
<a name="l00081"></a>00081                 {
<a name="l00082"></a>00082                 EGrayscale = EMonochrome, <span class="comment">// 0</span>
<a name="l00083"></a>00083                 EDirectColor = EColorUsed, <span class="comment">// 2</span>
<a name="l00084"></a>00084                 EIndexedColor = EColorUsed | EPaletteUsed, <span class="comment">// 3</span>
<a name="l00085"></a>00085                 EAlphaGrayscale = EMonochrome | EAlphaChannelUsed, <span class="comment">// 4</span>
<a name="l00086"></a>00086                 EAlphaDirectColor = EColorUsed | EAlphaChannelUsed <span class="comment">// 6</span>
<a name="l00087"></a>00087                 };
<a name="l00088"></a>00088         <span class="keyword">enum</span> TCompressionMethod
<a name="l00089"></a>00089                 {
<a name="l00090"></a>00090                 EDeflateInflate32K = 0
<a name="l00091"></a>00091                 };
<a name="l00092"></a>00092         <span class="keyword">enum</span> TFilterMethod
<a name="l00093"></a>00093                 {
<a name="l00094"></a>00094                 EAdaptiveFiltering = 0
<a name="l00095"></a>00095                 };
<a name="l00096"></a>00096         <span class="keyword">enum</span> TInterlaceMethod
<a name="l00097"></a>00097                 {
<a name="l00098"></a>00098                 ENoInterlace = 0,
<a name="l00099"></a>00099                 EAdam7Interlace = 1
<a name="l00100"></a>00100                 };
<a name="l00101"></a>00101         <span class="keyword">enum</span> TPhysicalUnits
<a name="l00102"></a>00102                 {
<a name="l00103"></a>00103                 EUnknownUnits = 0,
<a name="l00104"></a>00104                 EMeters = 1
<a name="l00105"></a>00105                 };
<a name="l00106"></a>00106 <span class="keyword">public</span>:
<a name="l00107"></a>00107         <span class="comment">// IHDR chunk</span>
<a name="l00108"></a>00108         TSize iSize; <span class="comment">// iWidth/iHeight = 1 ... (2^31)-1</span>
<a name="l00109"></a>00109         TInt iBitDepth; <span class="comment">// 1,2,4,8,16 subject to color type restrictions</span>
<a name="l00110"></a>00110         TColorType iColorType; <span class="comment">// 0,2,3,4,6</span>
<a name="l00111"></a>00111         TCompressionMethod iCompressionMethod; <span class="comment">// 0</span>
<a name="l00112"></a>00112         TFilterMethod iFilterMethod; <span class="comment">// 0</span>
<a name="l00113"></a>00113         TInterlaceMethod iInterlaceMethod; <span class="comment">// 0 or 1</span>
<a name="l00114"></a>00114 
<a name="l00115"></a>00115         <span class="comment">// PLTE chunk</span>
<a name="l00116"></a>00116         TBool iPalettePresent;
<a name="l00117"></a>00117         TRgb iPalette[KPngMaxPLTESize];
<a name="l00118"></a>00118 
<a name="l00119"></a>00119         <span class="comment">// bKGD chunk</span>
<a name="l00120"></a>00120         TBool iBackgroundPresent;
<a name="l00121"></a>00121 
<a name="l00122"></a>00122         <span class="comment">// pHYs chunk</span>
<a name="l00123"></a>00123         TBool iPhysicalPresent;
<a name="l00124"></a>00124         TPhysicalUnits iPhysicalUnits;
<a name="l00125"></a>00125         TSize iPhysicalSize;
<a name="l00126"></a>00126 
<a name="l00127"></a>00127         <span class="comment">// tRNS chunk</span>
<a name="l00128"></a>00128         TBool iTransparencyPresent;
<a name="l00129"></a>00129         TUint16 iTransparentGray;
<a name="l00130"></a>00130         TUint16 iTransparentRed;
<a name="l00131"></a>00131         TUint16 iTransparentGreen;
<a name="l00132"></a>00132         TUint16 iTransparentBlue;
<a name="l00133"></a>00133         TUint8 iTransparencyValue[KPngMaxPLTESize];
<a name="l00134"></a>00134         };
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 <span class="comment">//</span>
<a name="l00137"></a>00137 <span class="comment">// Handles reading raw PNG scanlines and preparing the data</span>
<a name="l00138"></a>00138 <span class="comment">// to be decompressed. A helper to CPngReadCodec.</span>
<a name="l00139"></a>00139 <span class="comment">// It is abstract, and subclassed to implement readers for </span>
<a name="l00140"></a>00140 <span class="comment">// scanlines of different bitmap depths</span>
<a name="l00141"></a>00141 <span class="comment">//</span>
<a name="l00142"></a><a class="code" href="class_c_png_read_sub_codec.html">00142</a> <span class="keyword">class </span><a class="code" href="class_c_png_read_sub_codec.html">CPngReadSubCodec</a> : <span class="keyword">public</span> CBase
<a name="l00143"></a>00143         {
<a name="l00144"></a>00144 <span class="keyword">public</span>:
<a name="l00145"></a>00145         <span class="keyword">static</span> <a class="code" href="class_c_png_read_sub_codec.html">CPngReadSubCodec</a>* NewL(CImageProcessor* aImageProc,CImageProcessor* aMaskProc,<span class="keyword">const</span> <a class="code" href="class_t_png_image_information.html">TPngImageInformation</a>&amp; aInfo);
<a name="l00146"></a>00146         <span class="keyword">virtual</span> ~<a class="code" href="class_c_png_read_sub_codec.html">CPngReadSubCodec</a>();
<a name="l00147"></a>00147         TDes8&amp; FirstBuffer();
<a name="l00148"></a>00148         TDes8&amp; DecodeL();
<a name="l00149"></a>00149 <span class="keyword">protected</span>:
<a name="l00150"></a>00150         <a class="code" href="class_c_png_read_sub_codec.html">CPngReadSubCodec</a>();
<a name="l00151"></a>00151         <span class="keywordtype">void</span> WritePixel(TRgb aPixelColor);
<a name="l00152"></a>00152         <span class="keywordtype">void</span> WritePixel(TRgb aPixelColor,TUint8 aAlphaValue);
<a name="l00153"></a>00153 <span class="keyword">private</span>:
<a name="l00154"></a>00154         <span class="keywordtype">void</span> ConstructL(CImageProcessor* aImageProc,CImageProcessor* aMaskProc,<span class="keyword">const</span> <a class="code" href="class_t_png_image_information.html">TPngImageInformation</a>&amp; aInfo);
<a name="l00155"></a>00155         <span class="keywordtype">void</span> FilterScanlineDataL(TUint8* aDataPtr,<span class="keyword">const</span> TUint8* aDataPtrLimit);
<a name="l00156"></a>00156         TInt PaethPredictor(TInt aLeft,TInt aAbove,TInt aAboveLeft);
<a name="l00157"></a>00157         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoConstructL() = 0;
<a name="l00158"></a>00158         <span class="keyword">virtual</span> TInt ScanlineBufferSize(TInt aPixelLength) = 0;
<a name="l00159"></a>00159         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoDecode(TUint8* aDataPtr,<span class="keyword">const</span> TUint8* aDataPtrLimit) = 0;
<a name="l00160"></a>00160         <span class="keywordtype">void</span> UpdatePos();
<a name="l00161"></a>00161 <span class="keyword">protected</span>:
<a name="l00162"></a>00162         CImageProcessor* iImageProc;
<a name="l00163"></a>00163         CImageProcessor* iMaskProc;
<a name="l00164"></a>00164         <a class="code" href="class_t_png_image_information.html">TPngImageInformation</a> iInfo;
<a name="l00165"></a>00165         TInt iScanlineBufferSize;
<a name="l00166"></a>00166         TInt iBytesPerPixel;
<a name="l00167"></a>00167         HBufC8* iScanlineBuffer1;
<a name="l00168"></a>00168         HBufC8* iScanlineBuffer2;
<a name="l00169"></a>00169         TPtr8 iScanlineDes1;
<a name="l00170"></a>00170         TPtr8 iScanlineDes2;
<a name="l00171"></a>00171         TInt iCurrentScanlineBuffer;
<a name="l00172"></a>00172         TInt iInterlacedScanlineBufferSize[KPngNumInterlacedPasses];
<a name="l00173"></a>00173         TInt iPass;
<a name="l00174"></a>00174         TPoint iPos;
<a name="l00175"></a>00175         };
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="keyword">class </span><a class="code" href="class_c_png_decoder.html">CPngDecoder</a>;
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 <span class="comment">//</span>
<a name="l00180"></a>00180 <span class="comment">// Codec class that does the real work of reading a PNG image.</span>
<a name="l00181"></a>00181 <span class="comment">// Inherits base classes that provide image mask processing</span>
<a name="l00182"></a>00182 <span class="comment">// and interface to unzip functionality</span>
<a name="l00183"></a>00183 <span class="comment">//</span>
<a name="l00184"></a><a class="code" href="class_c_png_read_codec.html">00184</a> <span class="keyword">class </span><a class="code" href="class_c_png_read_codec.html">CPngReadCodec</a> : <span class="keyword">public</span> CImageMaskProcessorReadCodec, <span class="keyword">public</span> MEZBufferManager
<a name="l00185"></a>00185         {
<a name="l00186"></a>00186 <span class="keyword">public</span>:
<a name="l00187"></a>00187         <span class="comment">// Construction</span>
<a name="l00188"></a>00188         ~<a class="code" href="class_c_png_read_codec.html">CPngReadCodec</a>();
<a name="l00189"></a>00189         <span class="keywordtype">void</span> ConstructL () { CImageMaskProcessorReadCodec::ConstructL(); } <span class="comment">// make public, since we don&#39;t have NewL</span>
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 <span class="keyword">private</span>:
<a name="l00192"></a>00192         <span class="comment">// From CImageReadCodec</span>
<a name="l00193"></a>00193         <span class="comment">// Initialise frame to read</span>
<a name="l00194"></a>00194         <span class="keywordtype">void</span> InitFrameL(TFrameInfo&amp; aFrameInfo, CFrameImageData&amp; aFrameImageData, 
<a name="l00195"></a>00195                 TBool aDisableErrorDiffusion, CFbsBitmap&amp; aDestination, CFbsBitmap* aDestinationMask);
<a name="l00196"></a>00196         <span class="comment">// Initialise from header</span>
<a name="l00197"></a>00197         <span class="keywordtype">void</span> InitFrameHeader(TFrameInfo&amp; aFrameSettings, CFrameImageData&amp; <span class="comment">/* aFrameImageData */</span>);
<a name="l00198"></a>00198         <span class="comment">// Process header</span>
<a name="l00199"></a>00199         TFrameState ProcessFrameHeaderL(TBufPtr8&amp; aData);
<a name="l00200"></a>00200         <span class="comment">// Process frame</span>
<a name="l00201"></a>00201         TFrameState ProcessFrameL(TBufPtr8&amp; aSrc);
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 <span class="keyword">private</span>:
<a name="l00204"></a>00204         <span class="comment">// Helper functions to process PNG chunk types</span>
<a name="l00205"></a>00205         <span class="keywordtype">void</span> DoNewFrameL(<a class="code" href="class_c_png_decoder.html">CPngDecoder</a>* aPngDecoder);
<a name="l00206"></a>00206         <span class="keywordtype">void</span> DoProcessInfoL(<span class="keyword">const</span> TUint8*&amp; aDataPtr,<span class="keyword">const</span> TUint8* aDataPtrLimit);
<a name="l00207"></a>00207         <span class="keywordtype">void</span> DoProcessIHDRL(<span class="keyword">const</span> TUint8* aDataPtr,TInt aChunkLength);
<a name="l00208"></a>00208         <span class="keywordtype">void</span> DoProcessPLTEL(<span class="keyword">const</span> TUint8* aDataPtr,TInt aChunkLength);
<a name="l00209"></a>00209         <span class="keywordtype">void</span> DoProcessbKGDL(<span class="keyword">const</span> TUint8* aDataPtr,TInt aChunkLength);
<a name="l00210"></a>00210         <span class="keywordtype">void</span> DoProcesspHYsL(<span class="keyword">const</span> TUint8* aDataPtr,TInt aChunkLength);
<a name="l00211"></a>00211         <span class="keywordtype">void</span> DoProcesstRNSL(<span class="keyword">const</span> TUint8* aDataPtr,TInt aChunkLength);
<a name="l00212"></a>00212         <span class="keywordtype">void</span> DoProcessDataL(<span class="keyword">const</span> TUint8*&amp; aDataPtr,<span class="keyword">const</span> TUint8* aDataPtrLimit);
<a name="l00213"></a>00213 
<a name="l00214"></a>00214         <span class="comment">// From MEZBufferManager: feed data to unzip</span>
<a name="l00215"></a>00215         <span class="keywordtype">void</span> InitializeL(CEZZStream &amp;aZStream);
<a name="l00216"></a>00216         <span class="keywordtype">void</span> NeedInputL(CEZZStream &amp;aZStream);
<a name="l00217"></a>00217         <span class="keywordtype">void</span> NeedOutputL(CEZZStream &amp;aZStream);
<a name="l00218"></a>00218         <span class="keywordtype">void</span> FinalizeL(CEZZStream &amp;aZStream);
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 <span class="keyword">private</span>:
<a name="l00221"></a>00221         TFrameInfo* iFrameInfo;
<a name="l00222"></a>00222         <a class="code" href="class_t_png_image_information.html">TPngImageInformation</a> iImageInfo;
<a name="l00223"></a>00223         TBuf8&lt;KPngChunkIdSize&gt; iChunkId;
<a name="l00224"></a>00224         TInt iChunkBytesRemaining;
<a name="l00225"></a>00225         <a class="code" href="class_c_png_read_sub_codec.html">CPngReadSubCodec</a>* iDecoder;
<a name="l00226"></a>00226         CEZDecompressor* iDecompressor;
<a name="l00227"></a>00227         TPtrC8 iDataDes;
<a name="l00228"></a>00228         };
<a name="l00229"></a>00229 
<a name="l00230"></a>00230 <span class="comment">//</span>
<a name="l00231"></a>00231 <span class="comment">// Handles preparing image data</span>
<a name="l00232"></a>00232 <span class="comment">// for compression and writing raw scanlines </span>
<a name="l00233"></a>00233 <span class="comment">// A helper to CPngWriteCodec</span>
<a name="l00234"></a>00234 <span class="comment">// </span>
<a name="l00235"></a><a class="code" href="class_c_png_write_sub_codec.html">00235</a> <span class="keyword">class </span><a class="code" href="class_c_png_write_sub_codec.html">CPngWriteSubCodec</a> : <span class="keyword">public</span> CBase
<a name="l00236"></a>00236         {
<a name="l00237"></a>00237 <span class="keyword">public</span>:
<a name="l00238"></a>00238         <span class="keyword">static</span> <a class="code" href="class_c_png_write_sub_codec.html">CPngWriteSubCodec</a>* NewL(<span class="keyword">const</span> <a class="code" href="class_t_png_image_information.html">TPngImageInformation</a>&amp; aInfo, <span class="keyword">const</span> CFbsBitmap* aSource);
<a name="l00239"></a>00239         <span class="keyword">virtual</span> ~<a class="code" href="class_c_png_write_sub_codec.html">CPngWriteSubCodec</a>();
<a name="l00240"></a>00240 <span class="keyword">protected</span>:
<a name="l00241"></a>00241         <a class="code" href="class_c_png_write_sub_codec.html">CPngWriteSubCodec</a>();
<a name="l00242"></a>00242 <span class="keyword">private</span>:
<a name="l00243"></a>00243         <span class="keywordtype">void</span> ConstructL(<span class="keyword">const</span> <a class="code" href="class_t_png_image_information.html">TPngImageInformation</a>&amp; aInfo, <span class="keyword">const</span> CFbsBitmap* aSource);
<a name="l00244"></a>00244 <span class="keyword">public</span>:
<a name="l00245"></a>00245         TDes8&amp; Buffer();
<a name="l00246"></a>00246         <span class="keyword">inline</span> TInt BufferSize() <span class="keyword">const</span>;
<a name="l00247"></a>00247         TDes8&amp; EncodeL(<span class="keyword">const</span> TInt aScanline);
<a name="l00248"></a>00248         <span class="keyword">inline</span> CPalette* Palette() <span class="keyword">const</span>;
<a name="l00249"></a>00249 <span class="keyword">protected</span>:
<a name="l00250"></a>00250         TUint8 ReverseBits(<span class="keyword">const</span> TUint8 aValue) <span class="keyword">const</span>;
<a name="l00251"></a>00251         <span class="keywordtype">void</span> EncodePalettedScanline(TUint8* aDataPtr, <span class="keyword">const</span> CFbsBitmap* aSource, <span class="keyword">const</span> TInt aScanline,
<a name="l00252"></a>00252                                                                 <span class="keyword">const</span> TInt aPixelsPerByte, <span class="keyword">const</span> TInt aShiftValue);
<a name="l00253"></a>00253 <span class="keyword">private</span>:
<a name="l00254"></a>00254         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoConstructL();
<a name="l00255"></a>00255         <span class="keyword">virtual</span> TInt ScanlineBufferSize(TInt aPixelLength) = 0;
<a name="l00256"></a>00256         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoEncode(<span class="keyword">const</span> CFbsBitmap* aSource, <span class="keyword">const</span> TInt aScanline,
<a name="l00257"></a>00257                                         TUint8* aDataPtr, <span class="keyword">const</span> TUint8* aDataPtrLimit) = 0;
<a name="l00258"></a>00258 <span class="keyword">protected</span>:
<a name="l00259"></a>00259         <a class="code" href="class_t_png_image_information.html">TPngImageInformation</a> iInfo;
<a name="l00260"></a>00260         <span class="keyword">const</span> CFbsBitmap* iSource;
<a name="l00261"></a>00261         TInt iScanlineBufferSize;
<a name="l00262"></a>00262         HBufC8* iScanlineBuffer;
<a name="l00263"></a>00263         TPtr8 iScanlineDes;
<a name="l00264"></a>00264         CPalette* iPalette;
<a name="l00265"></a>00265         };
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 <span class="comment">//</span>
<a name="l00268"></a>00268 <span class="comment">// Codec class that does the real work of writing a PNG image.</span>
<a name="l00269"></a>00269 <span class="comment">// Inherits base classes to interface to zip functionality</span>
<a name="l00270"></a>00270 <span class="comment">//</span>
<a name="l00271"></a><a class="code" href="class_c_png_write_codec.html">00271</a> <span class="keyword">class </span><a class="code" href="class_c_png_write_codec.html">CPngWriteCodec</a> : <span class="keyword">public</span> CImageWriteCodec, <span class="keyword">public</span> MEZBufferManager
<a name="l00272"></a>00272         {
<a name="l00273"></a>00273 <span class="keyword">public</span>:
<a name="l00274"></a>00274         <span class="comment">// Construction</span>
<a name="l00275"></a>00275         <a class="code" href="class_c_png_write_codec.html">CPngWriteCodec</a>(TInt aBpp, TBool aColor, TBool aPaletted, TInt aCompressionLevel);
<a name="l00276"></a>00276         <span class="keywordtype">void</span> ConstructL () { CImageWriteCodec::ConstructL(); } <span class="comment">// make public, since we don&#39;t have NewL</span>
<a name="l00277"></a>00277         ~<a class="code" href="class_c_png_write_codec.html">CPngWriteCodec</a>();
<a name="l00278"></a>00278 
<a name="l00279"></a>00279 <span class="keyword">private</span>:
<a name="l00280"></a>00280         <span class="comment">// from CImageWriteCodec</span>
<a name="l00281"></a>00281         <span class="keywordtype">void</span> InitFrameL(TBufPtr8&amp; aDst, <span class="keyword">const</span> CFbsBitmap&amp; aSource);
<a name="l00282"></a>00282         TFrameState ProcessFrameL(TBufPtr8&amp; aDst);
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="keyword">private</span>:
<a name="l00285"></a>00285         <span class="comment">// Helper functions to write PNG chunks</span>
<a name="l00286"></a>00286         <span class="keywordtype">void</span> WritePngChunk(TUint8*&amp; aDestPtr, <span class="keyword">const</span> TDesC8&amp; aChunkId, <span class="keyword">const</span> TDesC8&amp; aData, TInt&amp; aLength);
<a name="l00287"></a>00287         <span class="keywordtype">void</span> DeflateEncodedDataL(TBufPtr8&amp; aDst, TFrameState&amp; aState);
<a name="l00288"></a>00288         <span class="keywordtype">void</span> FlushCompressedDataL(TBufPtr8&amp; aDst, TFrameState&amp; aState);
<a name="l00289"></a>00289         <span class="keywordtype">void</span> WritePLTEChunk(TBufPtr8&amp; aDst);
<a name="l00290"></a>00290         <span class="keywordtype">void</span> WriteIDATChunk(TBufPtr8&amp; aDst);
<a name="l00291"></a>00291         <span class="keywordtype">void</span> WriteEndChunk(TBufPtr8&amp; aDst);
<a name="l00292"></a>00292         TInt WriteHeaderChunk(TBufPtr8&amp; aDst);
<a name="l00293"></a>00293         <span class="keywordtype">void</span> GetImageDataL(TInt&amp; aBytesToProcess);
<a name="l00294"></a>00294         <span class="keywordtype">void</span> GetPngScanLine(TDes8&amp; aBuf, <span class="keyword">const</span> TPoint&amp; aPixel, TInt&amp; aLength);
<a name="l00295"></a>00295         <span class="keywordtype">void</span> CalcCrcTable();
<a name="l00296"></a>00296         <span class="keywordtype">void</span> GetCrc(TUint32&amp; aCrc, <span class="keyword">const</span> TUint8* aPtr, <span class="keyword">const</span> TInt aLength);
<a name="l00297"></a>00297 
<a name="l00298"></a>00298 <span class="keyword">private</span>:
<a name="l00299"></a>00299         <span class="comment">// from MEZBufferManager</span>
<a name="l00300"></a>00300         <span class="comment">// feeds data to zip</span>
<a name="l00301"></a>00301         <span class="keywordtype">void</span> InitializeL(CEZZStream &amp;aZStream);
<a name="l00302"></a>00302         <span class="keywordtype">void</span> NeedInputL(CEZZStream &amp;aZStream);
<a name="l00303"></a>00303         <span class="keywordtype">void</span> NeedOutputL(CEZZStream &amp;aZStream);
<a name="l00304"></a>00304         <span class="keywordtype">void</span> FinalizeL(CEZZStream &amp;aZStream);
<a name="l00305"></a>00305 
<a name="l00306"></a>00306 <span class="keyword">private</span>:
<a name="l00307"></a>00307         <span class="keyword">enum</span> TPngEncoderState
<a name="l00308"></a>00308                 {
<a name="l00309"></a>00309                 EPngDeflate,    <span class="comment">// Deflate encoded image data</span>
<a name="l00310"></a>00310                 EPngFlush,              <span class="comment">// Flush encoded image data</span>
<a name="l00311"></a>00311                 EPngWritePLTE,  <span class="comment">// Write PLTE chunk</span>
<a name="l00312"></a>00312                 EPngWriteIDAT,  <span class="comment">// Write IDAT chunk</span>
<a name="l00313"></a>00313                 EPngEndChunk    <span class="comment">// Write end chunk</span>
<a name="l00314"></a>00314                 };
<a name="l00315"></a>00315         
<a name="l00316"></a>00316 <span class="keyword">private</span>:
<a name="l00317"></a>00317         TUint32 iCrcTable[KPngCrcTableLength];
<a name="l00318"></a>00318         TBool iCrcTableCalculated;
<a name="l00319"></a>00319         <a class="code" href="class_c_png_write_sub_codec.html">CPngWriteSubCodec</a>* iEncoder;
<a name="l00320"></a>00320         TPngEncoderState iEncoderState;
<a name="l00321"></a>00321         TInt iCompressionLevel;
<a name="l00322"></a>00322         CEZCompressor* iCompressor;
<a name="l00323"></a>00323         TInt iScanline;
<a name="l00324"></a>00324         TUint8* iDestStartPtr;
<a name="l00325"></a>00325         TUint8* iDestPtr;
<a name="l00326"></a>00326         TUint8* iDestPtrLimit;
<a name="l00327"></a>00327         <a class="code" href="class_t_png_image_information.html">TPngImageInformation</a> iImageInfo;
<a name="l00328"></a>00328         TPtr8 iCompressorPtr;   <span class="comment">// data area for compressor to write to</span>
<a name="l00329"></a>00329         TBool iCallAgain;
<a name="l00330"></a>00330         };
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 
<a name="l00333"></a>00333 <span class="comment">// Global panic function</span>
<a name="l00334"></a>00334 <span class="keywordtype">void</span> Panic(TInt aError);
<a name="l00335"></a>00335 
<a name="l00336"></a>00336 <span class="comment">//</span>
<a name="l00337"></a>00337 <span class="comment">// inline definitions</span>
<a name="l00338"></a>00338 <span class="comment">//</span>
<a name="l00339"></a>00339 <span class="keyword">inline</span> TInt CPngWriteSubCodec::BufferSize()<span class="keyword"> const</span>
<a name="l00340"></a>00340 <span class="keyword">        </span>{ <span class="keywordflow">return</span> iScanlineBufferSize; }
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 <span class="keyword">inline</span> CPalette* CPngWriteSubCodec::Palette()<span class="keyword"> const</span>
<a name="l00343"></a>00343 <span class="keyword">        </span>{ <span class="keywordflow">return</span> iPalette; }
<a name="l00344"></a>00344 
<a name="l00345"></a>00345 
<a name="l00346"></a>00346 <span class="preprocessor">#endif // __PNGCODEC_H__</span>
</pre></div>
<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
     <p class="copyright">Copyright &#169;2010 Nokia Corporation and/or its subsidiary(-ies).<br /> All rights
reserved. Unless otherwise stated, these materials are provided under the terms of the <a href=" http://www.eclipse.org/legal/epl-v10.html"> Eclipse Public License
v1.0</a>.</p> 
   </div>
  </div>
  <?php include_once (CURRENT_SKIN_PATH.'/sdl_footer.html'); ?>
 </body>
</html>
